{
  "docs": [
    {
      "comment": "/**\n * Overrides the css of highlighted events. Make sure to use single quotes!\n * @name markcss\n * @example\n * note(\"c a f e\")\n * .markcss('text-decoration:underline')\n */",
      "meta": {
        "filename": "codemirror.mjs",
        "lineno": 379,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror",
        "code": {}
      },
      "description": "<p>Overrides the css of highlighted events. Make sure to use single quotes!</p>",
      "name": "markcss",
      "examples": [
        "note(\"c a f e\")\n.markcss('text-decoration:underline')"
      ],
      "longname": "markcss",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Displays a slider widget to allow the user manipulate a value\n *\n * @name slider\n * @param {number} value Initial value\n * @param {number} min Minimum value - optional, defaults to 0\n * @param {number} max Maximum value - optional, defaults to 1\n * @param {number} step Step size - optional\n */",
      "meta": {
        "filename": "slider.mjs",
        "lineno": 116,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror",
        "code": {}
      },
      "description": "<p>Displays a slider widget to allow the user manipulate a value</p>",
      "name": "slider",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>Initial value</p>",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>Minimum value - optional, defaults to 0</p>",
          "name": "min"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>Maximum value - optional, defaults to 1</p>",
          "name": "max"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>Step size - optional</p>",
          "name": "step"
        }
      ],
      "longname": "slider",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Select a sound / sample by name. When using mininotation, you can also optionally supply 'n' and 'gain' parameters\n * separated by ':'.\n *\n * @name s\n * @param {string | Pattern} sound The sound / pattern of sounds to pick\n * @synonyms sound\n * @example\n * s(\"bd hh\")\n * @example\n * s(\"bd:0 bd:1 bd:0:0.3 bd:1:1.4\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 75,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Select a sound / sample by name. When using mininotation, you can also optionally supply 'n' and 'gain' parameters\nseparated by ':'.</p>",
      "name": "s",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "Pattern"
            ]
          },
          "description": "<p>The sound / pattern of sounds to pick</p>",
          "name": "sound"
        }
      ],
      "synonyms_text": "sound",
      "synonyms": [
        "sound"
      ],
      "examples": [
        "s(\"bd hh\")",
        "s(\"bd:0 bd:1 bd:0:0.3 bd:1:1.4\")"
      ],
      "longname": "s",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Define a custom webaudio node to use as a sound source.\n *\n * @name source\n * @synonyms src\n * @param {function} getSource\n * @synonyms src\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 90,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Define a custom webaudio node to use as a sound source.</p>",
      "name": "source",
      "synonyms_text": "src",
      "synonyms": [
        "src"
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "getSource"
        }
      ],
      "longname": "source",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Selects the given index from the sample map.\n * Numbers too high will wrap around.\n * `n` can also be used to play midi numbers, but it is recommended to use `note` instead.\n *\n * @name n\n * @param {number | Pattern} value sample index starting from 0\n * @example\n * s(\"bd sd [~ bd] sd,hh*6\").n(\"<0 1>\")\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 100,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Selects the given index from the sample map.\nNumbers too high will wrap around.\n<code>n</code> can also be used to play midi numbers, but it is recommended to use <code>note</code> instead.</p>",
      "name": "n",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>sample index starting from 0</p>",
          "name": "value"
        }
      ],
      "examples": [
        "s(\"bd sd [~ bd] sd,hh*6\").n(\"<0 1>\")"
      ],
      "longname": "n",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Plays the given note name or midi number. A note name consists of\n *\n * - a letter (a-g or A-G)\n * - optional accidentals (b or #)\n * - optional (possibly negative) octave number (0-9). Defaults to 3\n *\n * Examples of valid note names: `c`, `bb`, `Bb`, `f#`, `c3`, `A4`, `Eb2`, `c#5`\n *\n * You can also use midi numbers instead of note names, where 69 is mapped to A4 440Hz in 12EDO.\n *\n * @name note\n * @example\n * note(\"c a f e\")\n * @example\n * note(\"c4 a4 f4 e4\")\n * @example\n * note(\"60 69 65 64\")\n * @example\n * note(\"fbb1 a#0 cbbb-1 e##-2\").sound(\"saw\")\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 112,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Plays the given note name or midi number. A note name consists of</p>\n<ul>\n<li>a letter (a-g or A-G)</li>\n<li>optional accidentals (b or #)</li>\n<li>optional (possibly negative) octave number (0-9). Defaults to 3</li>\n</ul>\n<p>Examples of valid note names: <code>c</code>, <code>bb</code>, <code>Bb</code>, <code>f#</code>, <code>c3</code>, <code>A4</code>, <code>Eb2</code>, <code>c#5</code></p>\n<p>You can also use midi numbers instead of note names, where 69 is mapped to A4 440Hz in 12EDO.</p>",
      "name": "note",
      "examples": [
        "note(\"c a f e\")",
        "note(\"c4 a4 f4 e4\")",
        "note(\"60 69 65 64\")",
        "note(\"fbb1 a#0 cbbb-1 e##-2\").sound(\"saw\")"
      ],
      "longname": "note",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * A pattern of numbers that speed up (or slow down) samples while they play. Currently only supported by osc / superdirt.\n *\n * @name accelerate\n * @param {number | Pattern} amount acceleration.\n * @superdirtOnly\n * @example\n * s(\"sax\").accelerate(\"<0 1 2 4 8 16>\").slow(2).osc()\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 135,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>A pattern of numbers that speed up (or slow down) samples while they play. Currently only supported by osc / superdirt.</p>",
      "name": "accelerate",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>acceleration.</p>",
          "name": "amount"
        }
      ],
      "tags": [
        {
          "originalTitle": "superdirtOnly",
          "title": "superdirtonly",
          "text": ""
        }
      ],
      "examples": [
        "s(\"sax\").accelerate(\"<0 1 2 4 8 16>\").slow(2).osc()"
      ],
      "longname": "accelerate",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the velocity from 0 to 1. Is multiplied together with gain.\n *\n * @name velocity\n * @example\n * s(\"hh*8\")\n * .gain(\".4!2 1 .4!2 1 .4 1\")\n * .velocity(\".4 1\")\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 146,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the velocity from 0 to 1. Is multiplied together with gain.</p>",
      "name": "velocity",
      "examples": [
        "s(\"hh*8\")\n.gain(\".4!2 1 .4!2 1 .4 1\")\n.velocity(\".4 1\")"
      ],
      "longname": "velocity",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Controls the gain by an exponential amount.\n *\n * @name gain\n * @param {number | Pattern} amount gain.\n * @example\n * s(\"hh*8\").gain(\".4!2 1 .4!2 1 .4 1\").fast(2)\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 156,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Controls the gain by an exponential amount.</p>",
      "name": "gain",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>gain.</p>",
          "name": "amount"
        }
      ],
      "examples": [
        "s(\"hh*8\").gain(\".4!2 1 .4!2 1 .4 1\").fast(2)"
      ],
      "longname": "gain",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Gain applied after all effects have been processed.\n *\n * @name postgain\n * @example\n * s(\"bd sd [~ bd] sd,hh*8\")\n * .compressor(\"-20:20:10:.002:.02\").postgain(1.5)\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 166,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Gain applied after all effects have been processed.</p>",
      "name": "postgain",
      "examples": [
        "s(\"bd sd [~ bd] sd,hh*8\")\n.compressor(\"-20:20:10:.002:.02\").postgain(1.5)"
      ],
      "longname": "postgain",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Like `gain`, but linear.\n *\n * @name amp\n * @param {number | Pattern} amount gain.\n * @superdirtOnly\n * @example\n * s(\"bd*8\").amp(\".1*2 .5 .1*2 .5 .1 .5\").osc()\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 176,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Like <code>gain</code>, but linear.</p>",
      "name": "amp",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>gain.</p>",
          "name": "amount"
        }
      ],
      "tags": [
        {
          "originalTitle": "superdirtOnly",
          "title": "superdirtonly",
          "text": ""
        }
      ],
      "examples": [
        "s(\"bd*8\").amp(\".1*2 .5 .1*2 .5 .1 .5\").osc()"
      ],
      "longname": "amp",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Amplitude envelope attack time: Specifies how long it takes for the sound to reach its peak value, relative to the onset.\n *\n * @name attack\n * @param {number | Pattern} attack time in seconds.\n * @synonyms att\n * @example\n * note(\"c3 e3 f3 g3\").attack(\"<0 .1 .5>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 187,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Amplitude envelope attack time: Specifies how long it takes for the sound to reach its peak value, relative to the onset.</p>",
      "name": "attack",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>time in seconds.</p>",
          "name": "attack"
        }
      ],
      "synonyms_text": "att",
      "synonyms": [
        "att"
      ],
      "examples": [
        "note(\"c3 e3 f3 g3\").attack(\"<0 .1 .5>\")"
      ],
      "longname": "attack",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the Frequency Modulation Harmonicity Ratio.\n * Controls the timbre of the sound.\n * Whole numbers and simple ratios sound more natural,\n * while decimal numbers and complex ratios sound metallic.\n *\n * @name fmh\n * @param {number | Pattern} harmonicity\n * @example\n * note(\"c e g b g e\")\n * .fm(4)\n * .fmh(\"<1 2 1.5 1.61>\")\n * ._scope()\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 199,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the Frequency Modulation Harmonicity Ratio.\nControls the timbre of the sound.\nWhole numbers and simple ratios sound more natural,\nwhile decimal numbers and complex ratios sound metallic.</p>",
      "name": "fmh",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "name": "harmonicity"
        }
      ],
      "examples": [
        "note(\"c e g b g e\")\n.fm(4)\n.fmh(\"<1 2 1.5 1.61>\")\n._scope()"
      ],
      "longname": "fmh",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the Frequency Modulation of the synth.\n * Controls the modulation index, which defines the brightness of the sound.\n *\n * @name fm\n * @param {number | Pattern} brightness modulation index\n * @synonyms fmi\n * @example\n * note(\"c e g b g e\")\n * .fm(\"<0 1 2 8 32>\")\n * ._scope()\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 215,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the Frequency Modulation of the synth.\nControls the modulation index, which defines the brightness of the sound.</p>",
      "name": "fm",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>modulation index</p>",
          "name": "brightness"
        }
      ],
      "synonyms_text": "fmi",
      "synonyms": [
        "fmi"
      ],
      "examples": [
        "note(\"c e g b g e\")\n.fm(\"<0 1 2 8 32>\")\n._scope()"
      ],
      "longname": "fm",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Ramp type of fm envelope. Exp might be a bit broken..\n *\n * @name fmenv\n * @param {number | Pattern} type lin | exp\n * @example\n * note(\"c e g b g e\")\n * .fm(4)\n * .fmdecay(.2)\n * .fmsustain(0)\n * .fmenv(\"<exp lin>\")\n * ._scope()\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 230,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Ramp type of fm envelope. Exp might be a bit broken..</p>",
      "name": "fmenv",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>lin | exp</p>",
          "name": "type"
        }
      ],
      "examples": [
        "note(\"c e g b g e\")\n.fm(4)\n.fmdecay(.2)\n.fmsustain(0)\n.fmenv(\"<exp lin>\")\n._scope()"
      ],
      "longname": "fmenv",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Attack time for the FM envelope: time it takes to reach maximum modulation\n *\n * @name fmattack\n * @param {number | Pattern} time attack time\n * @example\n * note(\"c e g b g e\")\n * .fm(4)\n * .fmattack(\"<0 .05 .1 .2>\")\n * ._scope()\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 245,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Attack time for the FM envelope: time it takes to reach maximum modulation</p>",
      "name": "fmattack",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>attack time</p>",
          "name": "time"
        }
      ],
      "examples": [
        "note(\"c e g b g e\")\n.fm(4)\n.fmattack(\"<0 .05 .1 .2>\")\n._scope()"
      ],
      "longname": "fmattack",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Waveform of the fm modulator\n *\n * @name fmwave\n * @param {number | Pattern} wave waveform\n * @example\n * n(\"0 1 2 3\".fast(4)).scale(\"d:minor\").s(\"sine\").fmwave(\"<sine square sawtooth crackle>\").fm(4).fmh(2.01)\n * @example\n * n(\"0 1 2 3\".fast(4)).chord(\"<Dm Am F G>\").voicing().s(\"sawtooth\").fmwave(\"brown\").fm(.6)\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 259,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Waveform of the fm modulator</p>",
      "name": "fmwave",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>waveform</p>",
          "name": "wave"
        }
      ],
      "examples": [
        "n(\"0 1 2 3\".fast(4)).scale(\"d:minor\").s(\"sine\").fmwave(\"<sine square sawtooth crackle>\").fm(4).fmh(2.01)",
        "n(\"0 1 2 3\".fast(4)).chord(\"<Dm Am F G>\").voicing().s(\"sawtooth\").fmwave(\"brown\").fm(.6)"
      ],
      "longname": "fmwave",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Decay time for the FM envelope: seconds until the sustain level is reached after the attack phase.\n *\n * @name fmdecay\n * @param {number | Pattern} time decay time\n * @example\n * note(\"c e g b g e\")\n * .fm(4)\n * .fmdecay(\"<.01 .05 .1 .2>\")\n * .fmsustain(.4)\n * ._scope()\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 272,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Decay time for the FM envelope: seconds until the sustain level is reached after the attack phase.</p>",
      "name": "fmdecay",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>decay time</p>",
          "name": "time"
        }
      ],
      "examples": [
        "note(\"c e g b g e\")\n.fm(4)\n.fmdecay(\"<.01 .05 .1 .2>\")\n.fmsustain(.4)\n._scope()"
      ],
      "longname": "fmdecay",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sustain level for the FM envelope: how much modulation is applied after the decay phase\n *\n * @name fmsustain\n * @param {number | Pattern} level sustain level\n * @example\n * note(\"c e g b g e\")\n * .fm(4)\n * .fmdecay(.1)\n * .fmsustain(\"<1 .75 .5 0>\")\n * ._scope()\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 286,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sustain level for the FM envelope: how much modulation is applied after the decay phase</p>",
      "name": "fmsustain",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>sustain level</p>",
          "name": "level"
        }
      ],
      "examples": [
        "note(\"c e g b g e\")\n.fm(4)\n.fmdecay(.1)\n.fmsustain(\"<1 .75 .5 0>\")\n._scope()"
      ],
      "longname": "fmsustain",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Select the sound bank to use. To be used together with `s`. The bank name (+ \"_\") will be prepended to the value of `s`.\n *\n * @name bank\n * @param {string | Pattern} bank the name of the bank\n * @example\n * s(\"bd sd [~ bd] sd\").bank('RolandTR909') // = s(\"RolandTR909_bd RolandTR909_sd\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 304,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Select the sound bank to use. To be used together with <code>s</code>. The bank name (+ &quot;_&quot;) will be prepended to the value of <code>s</code>.</p>",
      "name": "bank",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "Pattern"
            ]
          },
          "description": "<p>the name of the bank</p>",
          "name": "bank"
        }
      ],
      "examples": [
        "s(\"bd sd [~ bd] sd\").bank('RolandTR909') // = s(\"RolandTR909_bd RolandTR909_sd\")"
      ],
      "longname": "bank",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * mix control for the chorus effect\n *\n * @name chorus\n * @param {string | Pattern} chorus mix amount between 0 and 1\n * @example\n * note(\"d d a# a\").s(\"sawtooth\").chorus(.5)\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 315,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>mix control for the chorus effect</p>",
      "name": "chorus",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "Pattern"
            ]
          },
          "description": "<p>mix amount between 0 and 1</p>",
          "name": "chorus"
        }
      ],
      "examples": [
        "note(\"d d a# a\").s(\"sawtooth\").chorus(.5)"
      ],
      "longname": "chorus",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Amplitude envelope decay time: the time it takes after the attack time to reach the sustain level.\n * Note that the decay is only audible if the sustain value is lower than 1.\n *\n * @name decay\n * @param {number | Pattern} time decay time in seconds\n * @synonyms dec\n * @example\n * note(\"c3 e3 f3 g3\").decay(\"<.1 .2 .3 .4>\").sustain(0)\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 331,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Amplitude envelope decay time: the time it takes after the attack time to reach the sustain level.\nNote that the decay is only audible if the sustain value is lower than 1.</p>",
      "name": "decay",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>decay time in seconds</p>",
          "name": "time"
        }
      ],
      "synonyms_text": "dec",
      "synonyms": [
        "dec"
      ],
      "examples": [
        "note(\"c3 e3 f3 g3\").decay(\"<.1 .2 .3 .4>\").sustain(0)"
      ],
      "longname": "decay",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Amplitude envelope sustain level: The level which is reached after attack / decay, being sustained until the offset.\n *\n * @name sustain\n * @param {number | Pattern} gain sustain level between 0 and 1\n * @synonyms sus\n * @example\n * note(\"c3 e3 f3 g3\").decay(.2).sustain(\"<0 .1 .4 .6 1>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 343,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Amplitude envelope sustain level: The level which is reached after attack / decay, being sustained until the offset.</p>",
      "name": "sustain",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>sustain level between 0 and 1</p>",
          "name": "gain"
        }
      ],
      "synonyms_text": "sus",
      "synonyms": [
        "sus"
      ],
      "examples": [
        "note(\"c3 e3 f3 g3\").decay(.2).sustain(\"<0 .1 .4 .6 1>\")"
      ],
      "longname": "sustain",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Amplitude envelope release time: The time it takes after the offset to go from sustain level to zero.\n *\n * @name release\n * @param {number | Pattern} time release time in seconds\n * @synonyms rel\n * @example\n * note(\"c3 e3 g3 c4\").release(\"<0 .1 .4 .6 1>/2\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 354,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Amplitude envelope release time: The time it takes after the offset to go from sustain level to zero.</p>",
      "name": "release",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>release time in seconds</p>",
          "name": "time"
        }
      ],
      "synonyms_text": "rel",
      "synonyms": [
        "rel"
      ],
      "examples": [
        "note(\"c3 e3 g3 c4\").release(\"<0 .1 .4 .6 1>/2\")"
      ],
      "longname": "release",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the center frequency of the **b**and-**p**ass **f**ilter. When using mininotation, you\n * can also optionally supply the 'bpq' parameter separated by ':'.\n *\n * @name bpf\n * @param {number | Pattern} frequency center frequency\n * @synonyms bandf, bp\n * @example\n * s(\"bd sd [~ bd] sd,hh*6\").bpf(\"<1000 2000 4000 8000>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 367,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the center frequency of the <strong>b</strong>and-<strong>p</strong>ass <strong>f</strong>ilter. When using mininotation, you\ncan also optionally supply the 'bpq' parameter separated by ':'.</p>",
      "name": "bpf",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>center frequency</p>",
          "name": "frequency"
        }
      ],
      "synonyms_text": "bandf, bp",
      "synonyms": [
        "bandf",
        "bp"
      ],
      "examples": [
        "s(\"bd sd [~ bd] sd,hh*6\").bpf(\"<1000 2000 4000 8000>\")"
      ],
      "longname": "bpf",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the **b**and-**p**ass **q**-factor (resonance).\n *\n * @name bpq\n * @param {number | Pattern} q q factor\n * @synonyms bandq\n * @example\n * s(\"bd sd [~ bd] sd\").bpf(500).bpq(\"<0 1 2 3>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 380,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the <strong>b</strong>and-<strong>p</strong>ass <strong>q</strong>-factor (resonance).</p>",
      "name": "bpq",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>q factor</p>",
          "name": "q"
        }
      ],
      "synonyms_text": "bandq",
      "synonyms": [
        "bandq"
      ],
      "examples": [
        "s(\"bd sd [~ bd] sd\").bpf(500).bpq(\"<0 1 2 3>\")"
      ],
      "longname": "bpq",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * A pattern of numbers from 0 to 1. Skips the beginning of each sample, e.g. `0.25` to cut off the first quarter from each sample.\n *\n * @memberof Pattern\n * @name begin\n * @param {number | Pattern} amount between 0 and 1, where 1 is the length of the sample\n * @example\n * samples({ rave: 'rave/AREUREADY.wav' }, 'github:tidalcycles/dirt-samples')\n * s(\"rave\").begin(\"<0 .25 .5 .75>\").fast(2)\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 393,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>A pattern of numbers from 0 to 1. Skips the beginning of each sample, e.g. <code>0.25</code> to cut off the first quarter from each sample.</p>",
      "memberof": "Pattern",
      "name": "begin",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>between 0 and 1, where 1 is the length of the sample</p>",
          "name": "amount"
        }
      ],
      "examples": [
        "samples({ rave: 'rave/AREUREADY.wav' }, 'github:tidalcycles/dirt-samples')\ns(\"rave\").begin(\"<0 .25 .5 .75>\").fast(2)"
      ],
      "scope": "static",
      "longname": "Pattern.begin",
      "kind": "member"
    },
    {
      "comment": "/**\n * The same as .begin, but cuts off the end off each sample.\n *\n * @memberof Pattern\n * @name end\n * @param {number | Pattern} length 1 = whole sample, .5 = half sample, .25 = quarter sample etc..\n * @example\n * s(\"bd*2,oh*4\").end(\"<.1 .2 .5 1>\").fast(2)\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 405,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>The same as .begin, but cuts off the end off each sample.</p>",
      "memberof": "Pattern",
      "name": "end",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>1 = whole sample, .5 = half sample, .25 = quarter sample etc..</p>",
          "name": "length"
        }
      ],
      "examples": [
        "s(\"bd*2,oh*4\").end(\"<.1 .2 .5 1>\").fast(2)"
      ],
      "scope": "static",
      "longname": "Pattern.end",
      "kind": "member"
    },
    {
      "comment": "/**\n * Loops the sample.\n * Note that the tempo of the loop is not synced with the cycle tempo.\n * To change the loop region, use loopBegin / loopEnd.\n *\n * @name loop\n * @param {number | Pattern} on If 1, the sample is looped\n * @example\n * s(\"casio\").loop(1)\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 416,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Loops the sample.\nNote that the tempo of the loop is not synced with the cycle tempo.\nTo change the loop region, use loopBegin / loopEnd.</p>",
      "name": "loop",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>If 1, the sample is looped</p>",
          "name": "on"
        }
      ],
      "examples": [
        "s(\"casio\").loop(1)"
      ],
      "longname": "loop",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Begin to loop at a specific point in the sample (inbetween `begin` and `end`).\n * Note that the loop point must be inbetween `begin` and `end`, and before `loopEnd`!\n * Note: Samples starting with wt_ will automatically loop! (wt = wavetable)\n *\n * @name loopBegin\n * @param {number | Pattern} time between 0 and 1, where 1 is the length of the sample\n * @synonyms loopb\n * @example\n * s(\"space\").loop(1)\n * .loopBegin(\"<0 .125 .25>\")._scope()\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 428,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Begin to loop at a specific point in the sample (inbetween <code>begin</code> and <code>end</code>).\nNote that the loop point must be inbetween <code>begin</code> and <code>end</code>, and before <code>loopEnd</code>!\nNote: Samples starting with wt_ will automatically loop! (wt = wavetable)</p>",
      "name": "loopBegin",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>between 0 and 1, where 1 is the length of the sample</p>",
          "name": "time"
        }
      ],
      "synonyms_text": "loopb",
      "synonyms": [
        "loopb"
      ],
      "examples": [
        "s(\"space\").loop(1)\n.loopBegin(\"<0 .125 .25>\")._scope()"
      ],
      "longname": "loopBegin",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n *\n * End the looping section at a specific point in the sample (inbetween `begin` and `end`).\n * Note that the loop point must be inbetween `begin` and `end`, and after `loopBegin`!\n *\n * @name loopEnd\n * @param {number | Pattern} time between 0 and 1, where 1 is the length of the sample\n * @synonyms loope\n * @example\n * s(\"space\").loop(1)\n * .loopEnd(\"<1 .75 .5 .25>\")._scope()\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 441,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>End the looping section at a specific point in the sample (inbetween <code>begin</code> and <code>end</code>).\nNote that the loop point must be inbetween <code>begin</code> and <code>end</code>, and after <code>loopBegin</code>!</p>",
      "name": "loopEnd",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>between 0 and 1, where 1 is the length of the sample</p>",
          "name": "time"
        }
      ],
      "synonyms_text": "loope",
      "synonyms": [
        "loope"
      ],
      "examples": [
        "s(\"space\").loop(1)\n.loopEnd(\"<1 .75 .5 .25>\")._scope()"
      ],
      "longname": "loopEnd",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Bit crusher effect.\n *\n * @name crush\n * @param {number | Pattern} depth between 1 (for drastic reduction in bit-depth) to 16 (for barely no reduction).\n * @example\n * s(\"<bd sd>,hh*3\").fast(2).crush(\"<16 8 7 6 5 4 3 2>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 454,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Bit crusher effect.</p>",
      "name": "crush",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>between 1 (for drastic reduction in bit-depth) to 16 (for barely no reduction).</p>",
          "name": "depth"
        }
      ],
      "examples": [
        "s(\"<bd sd>,hh*3\").fast(2).crush(\"<16 8 7 6 5 4 3 2>\")"
      ],
      "longname": "crush",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Fake-resampling for lowering the sample rate. Caution: This effect seems to only work in chromium based browsers\n *\n * @name coarse\n * @param {number | Pattern} factor 1 for original 2 for half, 3 for a third and so on.\n * @example\n * s(\"bd sd [~ bd] sd,hh*8\").coarse(\"<1 4 8 16 32>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 465,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Fake-resampling for lowering the sample rate. Caution: This effect seems to only work in chromium based browsers</p>",
      "name": "coarse",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>1 for original 2 for half, 3 for a third and so on.</p>",
          "name": "factor"
        }
      ],
      "examples": [
        "s(\"bd sd [~ bd] sd,hh*8\").coarse(\"<1 4 8 16 32>\")"
      ],
      "longname": "coarse",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Modulate the amplitude of a sound with a continuous waveform\n *\n * @name tremolo\n * @synonyms trem\n * @param {number | Pattern} speed modulation speed in HZ\n * @example\n * note(\"d d d# d\".fast(4)).s(\"supersaw\").tremolo(\"<3 2 100> \").tremoloskew(\"<.5>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 476,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Modulate the amplitude of a sound with a continuous waveform</p>",
      "name": "tremolo",
      "synonyms_text": "trem",
      "synonyms": [
        "trem"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>modulation speed in HZ</p>",
          "name": "speed"
        }
      ],
      "examples": [
        "note(\"d d d# d\".fast(4)).s(\"supersaw\").tremolo(\"<3 2 100> \").tremoloskew(\"<.5>\")"
      ],
      "longname": "tremolo",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Modulate the amplitude of a sound with a continuous waveform\n *\n * @name tremolosync\n * @synonyms tremsync\n * @param {number | Pattern} cycles modulation speed in cycles\n * @example\n * note(\"d d d# d\".fast(4)).s(\"supersaw\").tremolosync(\"4\").tremoloskew(\"<1 .5 0>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 488,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Modulate the amplitude of a sound with a continuous waveform</p>",
      "name": "tremolosync",
      "synonyms_text": "tremsync",
      "synonyms": [
        "tremsync"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>modulation speed in cycles</p>",
          "name": "cycles"
        }
      ],
      "examples": [
        "note(\"d d d# d\".fast(4)).s(\"supersaw\").tremolosync(\"4\").tremoloskew(\"<1 .5 0>\")"
      ],
      "longname": "tremolosync",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Depth of amplitude modulation\n *\n * @name tremolodepth\n * @synonyms tremdepth\n * @param {number | Pattern} depth\n * @example\n * note(\"a1 a1 a#1 a1\".fast(4)).s(\"pulse\").tremsync(4).tremolodepth(\"<1 2 .7>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 503,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Depth of amplitude modulation</p>",
      "name": "tremolodepth",
      "synonyms_text": "tremdepth",
      "synonyms": [
        "tremdepth"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "name": "depth"
        }
      ],
      "examples": [
        "note(\"a1 a1 a#1 a1\".fast(4)).s(\"pulse\").tremsync(4).tremolodepth(\"<1 2 .7>\")"
      ],
      "longname": "tremolodepth",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Alter the shape of the modulation waveform\n *\n * @name tremoloskew\n * @synonyms tremskew\n * @param {number | Pattern} amount between 0 & 1, the shape of the waveform\n * @example\n * note(\"{f a c e}%16\").s(\"sawtooth\").tremsync(4).tremoloskew(\"<.5 0 1>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 514,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Alter the shape of the modulation waveform</p>",
      "name": "tremoloskew",
      "synonyms_text": "tremskew",
      "synonyms": [
        "tremskew"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>between 0 &amp; 1, the shape of the waveform</p>",
          "name": "amount"
        }
      ],
      "examples": [
        "note(\"{f a c e}%16\").s(\"sawtooth\").tremsync(4).tremoloskew(\"<.5 0 1>\")"
      ],
      "longname": "tremoloskew",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Alter the phase of the modulation waveform\n *\n * @name tremolophase\n * @synonyms tremphase\n * @param {number | Pattern} offset the offset in cycles of the modulation\n * @example\n * note(\"{f a c e}%16\").s(\"sawtooth\").tremsync(4).tremolophase(\"<0 .25 .66>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 526,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Alter the phase of the modulation waveform</p>",
      "name": "tremolophase",
      "synonyms_text": "tremphase",
      "synonyms": [
        "tremphase"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>the offset in cycles of the modulation</p>",
          "name": "offset"
        }
      ],
      "examples": [
        "note(\"{f a c e}%16\").s(\"sawtooth\").tremsync(4).tremolophase(\"<0 .25 .66>\")"
      ],
      "longname": "tremolophase",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Shape of amplitude modulation\n *\n * @name tremoloshape\n * @synonyms tremshape\n * @param {number | Pattern} shape tri | square | sine | saw | ramp\n * @example\n * note(\"{f g c d}%16\").tremsync(4).tremoloshape(\"<sine tri square>\").s(\"sawtooth\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 538,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Shape of amplitude modulation</p>",
      "name": "tremoloshape",
      "synonyms_text": "tremshape",
      "synonyms": [
        "tremshape"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>tri | square | sine | saw | ramp</p>",
          "name": "shape"
        }
      ],
      "examples": [
        "note(\"{f g c d}%16\").tremsync(4).tremoloshape(\"<sine tri square>\").s(\"sawtooth\")"
      ],
      "longname": "tremoloshape",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Filter overdrive for supported filter types\n *\n * @name drive\n * @param {number | Pattern} amount\n * @example\n * note(\"{f g g c d a a#}%16\".sub(17)).s(\"supersaw\").lpenv(8).lpf(150).lpq(.8).ftype('ladder').drive(\"<.5 4>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 549,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Filter overdrive for supported filter types</p>",
      "name": "drive",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "name": "amount"
        }
      ],
      "examples": [
        "note(\"{f g g c d a a#}%16\".sub(17)).s(\"supersaw\").lpenv(8).lpf(150).lpq(.8).ftype('ladder').drive(\"<.5 4>\")"
      ],
      "longname": "drive",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Modulate the amplitude of an orbit to create a \"sidechain\" like effect.\n *\n * Can be applied to multiple orbits with the ':' mininotation, e.g. `duckorbit(\"2:3\")`\n *\n * @name duckorbit\n * @synonyms duck\n * @param {number | Pattern} orbit target orbit\n * @example\n * $: n(run(16)).scale(\"c:minor:pentatonic\").s(\"sawtooth\").delay(.7).orbit(2)\n * $: s(\"bd:4!4\").beat(\"0,4,8,11,14\",16).duckorbit(2).duckattack(0.2).duckdepth(1)\n * @example\n * $: n(run(16)).scale(\"c:minor:pentatonic\").s(\"sawtooth\").delay(.7).orbit(2)\n * $: s(\"hh*16\").orbit(3)\n * $: s(\"bd:4!4\").beat(\"0,4,8,11,14\",16).duckorbit(\"2:3\").duckattack(0.2).duckdepth(1)\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 560,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Modulate the amplitude of an orbit to create a &quot;sidechain&quot; like effect.</p>\n<p>Can be applied to multiple orbits with the ':' mininotation, e.g. <code>duckorbit(&quot;2:3&quot;)</code></p>",
      "name": "duckorbit",
      "synonyms_text": "duck",
      "synonyms": [
        "duck"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>target orbit</p>",
          "name": "orbit"
        }
      ],
      "examples": [
        "$: n(run(16)).scale(\"c:minor:pentatonic\").s(\"sawtooth\").delay(.7).orbit(2)\n$: s(\"bd:4!4\").beat(\"0,4,8,11,14\",16).duckorbit(2).duckattack(0.2).duckdepth(1)",
        "$: n(run(16)).scale(\"c:minor:pentatonic\").s(\"sawtooth\").delay(.7).orbit(2)\n$: s(\"hh*16\").orbit(3)\n$: s(\"bd:4!4\").beat(\"0,4,8,11,14\",16).duckorbit(\"2:3\").duckattack(0.2).duckdepth(1)"
      ],
      "longname": "duckorbit",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * The amount of ducking applied to target orbit\n *\n * Can vary across orbits with the ':' mininotation, e.g. `duckdepth(\"0.3:0.1\")`.\n * Note: this requires first applying the effect to multiple orbits with e.g. `duckorbit(\"2:3\")`.\n *\n * @name duckdepth\n * @param {number | Pattern} depth depth of modulation from 0 to 1\n * @example\n * stack( n(run(8)).scale(\"c:minor\").s(\"sawtooth\").delay(.7).orbit(2), s(\"bd:4!4\").beat(\"0,4,8,11,14\",16).duckorbit(2).duckattack(0.2).duckdepth(\"<1 .9 .6 0>\"))\n * @example\n * $: n(run(16)).scale(\"c:minor:pentatonic\").s(\"sawtooth\").delay(.7).orbit(2)\n * $: s(\"hh*16\").orbit(3)\n * $: s(\"bd:4!4\").beat(\"0,4,8,11,14\",16).duckorbit(\"2:3\").duckattack(0.2).duckdepth(\"1:0.5\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 579,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>The amount of ducking applied to target orbit</p>\n<p>Can vary across orbits with the ':' mininotation, e.g. <code>duckdepth(&quot;0.3:0.1&quot;)</code>.\nNote: this requires first applying the effect to multiple orbits with e.g. <code>duckorbit(&quot;2:3&quot;)</code>.</p>",
      "name": "duckdepth",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>depth of modulation from 0 to 1</p>",
          "name": "depth"
        }
      ],
      "examples": [
        "stack( n(run(8)).scale(\"c:minor\").s(\"sawtooth\").delay(.7).orbit(2), s(\"bd:4!4\").beat(\"0,4,8,11,14\",16).duckorbit(2).duckattack(0.2).duckdepth(\"<1 .9 .6 0>\"))",
        "$: n(run(16)).scale(\"c:minor:pentatonic\").s(\"sawtooth\").delay(.7).orbit(2)\n$: s(\"hh*16\").orbit(3)\n$: s(\"bd:4!4\").beat(\"0,4,8,11,14\",16).duckorbit(\"2:3\").duckattack(0.2).duckdepth(\"1:0.5\")"
      ],
      "longname": "duckdepth",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * The time required for the ducked signal(s) to reach their lowest volume.\n * Can be used to prevent clicking or for creative rhythmic effects.\n *\n * Can vary across orbits with the ':' mininotation, e.g. `duckonset(\"0:0.003\")`.\n * Note: this requires first applying the effect to multiple orbits with e.g. `duckorbit(\"2:3\")`.\n *\n * @name duckonset\n * @synonyms duckons\n *\n * @param {number | Pattern} time The onset time in seconds\n * @example\n * // Clicks\n * sound: freq(\"63.2388\").s(\"sine\").orbit(2).gain(4)\n * duckerWithClick: s(\"bd*4\").duckorbit(2).duckattack(0.3).duckonset(0).postgain(0)\n * @example\n * // No clicks\n * sound: freq(\"63.2388\").s(\"sine\").orbit(2).gain(4)\n * duckerWithoutClick: s(\"bd*4\").duckorbit(2).duckattack(0.3).duckonset(0.01).postgain(0)\n * @example\n * // Rhythmic\n * noise: s(\"pink\").distort(\"2:1\").orbit(4) // used rhythmically with 0.3 onset below\n * hhat: s(\"hh*16\").orbit(7)\n * ducker: s(\"bd*4\").bank(\"tr909\").duckorbit(\"4:7\").duckonset(\"0.3:0.003\").duckattack(0.25)\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 597,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>The time required for the ducked signal(s) to reach their lowest volume.\nCan be used to prevent clicking or for creative rhythmic effects.</p>\n<p>Can vary across orbits with the ':' mininotation, e.g. <code>duckonset(&quot;0:0.003&quot;)</code>.\nNote: this requires first applying the effect to multiple orbits with e.g. <code>duckorbit(&quot;2:3&quot;)</code>.</p>",
      "name": "duckonset",
      "synonyms_text": "duckons",
      "synonyms": [
        "duckons"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>The onset time in seconds</p>",
          "name": "time"
        }
      ],
      "examples": [
        "// Clicks\nsound: freq(\"63.2388\").s(\"sine\").orbit(2).gain(4)\nduckerWithClick: s(\"bd*4\").duckorbit(2).duckattack(0.3).duckonset(0).postgain(0)",
        "// No clicks\nsound: freq(\"63.2388\").s(\"sine\").orbit(2).gain(4)\nduckerWithoutClick: s(\"bd*4\").duckorbit(2).duckattack(0.3).duckonset(0.01).postgain(0)",
        "// Rhythmic\nnoise: s(\"pink\").distort(\"2:1\").orbit(4) // used rhythmically with 0.3 onset below\nhhat: s(\"hh*16\").orbit(7)\nducker: s(\"bd*4\").bank(\"tr909\").duckorbit(\"4:7\").duckonset(\"0.3:0.003\").duckattack(0.25)"
      ],
      "longname": "duckonset",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * The time required for the ducked signal(s) to return to their normal volume.\n *\n * Can vary across orbits with the ':' mininotation, e.g. `duckonset(\"0:0.003\")`.\n * Note: this requires first applying the effect to multiple orbits with e.g. `duckorbit(\"2:3\")`.\n *\n * @name duckattack\n * @synonyms duckatt\n *\n * @param {number | Pattern} time The attack time in seconds\n * @example\n * sound: n(run(8)).scale(\"c:minor\").s(\"sawtooth\").delay(.7).orbit(2)\n * ducker: s(\"bd:4!4\").beat(\"0,4,8,11,14\",16).duckorbit(2).duckattack(\"<0.2 0 0.4>\").duckdepth(1)\n * @example\n * moreduck: n(run(8)).scale(\"c:minor\").s(\"sawtooth\").delay(.7).orbit(2)\n * lessduck: s(\"hh*16\").orbit(5)\n * ducker: s(\"bd:4!4\").beat(\"0,4,8,11,14\",16).duckorbit(\"2:5\").duckattack(\"0.4:0.1\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 625,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>The time required for the ducked signal(s) to return to their normal volume.</p>\n<p>Can vary across orbits with the ':' mininotation, e.g. <code>duckonset(&quot;0:0.003&quot;)</code>.\nNote: this requires first applying the effect to multiple orbits with e.g. <code>duckorbit(&quot;2:3&quot;)</code>.</p>",
      "name": "duckattack",
      "synonyms_text": "duckatt",
      "synonyms": [
        "duckatt"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>The attack time in seconds</p>",
          "name": "time"
        }
      ],
      "examples": [
        "sound: n(run(8)).scale(\"c:minor\").s(\"sawtooth\").delay(.7).orbit(2)\nducker: s(\"bd:4!4\").beat(\"0,4,8,11,14\",16).duckorbit(2).duckattack(\"<0.2 0 0.4>\").duckdepth(1)",
        "moreduck: n(run(8)).scale(\"c:minor\").s(\"sawtooth\").delay(.7).orbit(2)\nlessduck: s(\"hh*16\").orbit(5)\nducker: s(\"bd:4!4\").beat(\"0,4,8,11,14\",16).duckorbit(\"2:5\").duckattack(\"0.4:0.1\")"
      ],
      "longname": "duckattack",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Create byte beats with custom expressions\n *\n * @name byteBeatExpression\n * @synonyms bbexpr\n *\n * @param {number | Pattern} byteBeatExpression bitwise expression for creating bytebeat\n * @example\n * s(\"bytebeat\").bbexpr('t*(t>>15^t>>66)')\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 646,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Create byte beats with custom expressions</p>",
      "name": "byteBeatExpression",
      "synonyms_text": "bbexpr",
      "synonyms": [
        "bbexpr"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>bitwise expression for creating bytebeat</p>",
          "name": "byteBeatExpression"
        }
      ],
      "examples": [
        "s(\"bytebeat\").bbexpr('t*(t>>15^t>>66)')"
      ],
      "longname": "byteBeatExpression",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Create byte beats with custom expressions\n *\n * @name byteBeatStartTime\n * @synonyms bbst\n *\n * @param {number | Pattern} byteBeatStartTime in samples (t)\n * @example\n * note(\"c3!8\".add(\"{0 0 12 0 7 5 3}%8\")).s(\"bytebeat:5\").bbst(\"<3 1>\".mul(10000))._scope()\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 659,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Create byte beats with custom expressions</p>",
      "name": "byteBeatStartTime",
      "synonyms_text": "bbst",
      "synonyms": [
        "bbst"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>in samples (t)</p>",
          "name": "byteBeatStartTime"
        }
      ],
      "examples": [
        "note(\"c3!8\".add(\"{0 0 12 0 7 5 3}%8\")).s(\"bytebeat:5\").bbst(\"<3 1>\".mul(10000))._scope()"
      ],
      "longname": "byteBeatStartTime",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Allows you to set the output channels on the interface\n *\n * @name channels\n * @synonyms ch\n *\n * @param {number | Pattern} channels pattern the output channels\n * @example\n * note(\"e a d b g\").channels(\"3:4\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 672,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Allows you to set the output channels on the interface</p>",
      "name": "channels",
      "synonyms_text": "ch",
      "synonyms": [
        "ch"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>pattern the output channels</p>",
          "name": "channels"
        }
      ],
      "examples": [
        "note(\"e a d b g\").channels(\"3:4\")"
      ],
      "longname": "channels",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Controls the pulsewidth of the pulse oscillator\n *\n * @name pw\n * @param {number | Pattern} pulsewidth\n * @example\n * note(\"{f a c e}%16\").s(\"pulse\").pw(\".8:1:.2\")\n * @example\n * n(run(8)).scale(\"D:pentatonic\").s(\"pulse\").pw(\"0 .75 .5 1\")\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 685,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Controls the pulsewidth of the pulse oscillator</p>",
      "name": "pw",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "name": "pulsewidth"
        }
      ],
      "examples": [
        "note(\"{f a c e}%16\").s(\"pulse\").pw(\".8:1:.2\")",
        "n(run(8)).scale(\"D:pentatonic\").s(\"pulse\").pw(\"0 .75 .5 1\")"
      ],
      "longname": "pw",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Controls the lfo rate for the pulsewidth of the pulse oscillator\n *\n * @name pwrate\n * @param {number | Pattern} rate\n * @example\n * n(run(8)).scale(\"D:pentatonic\").s(\"pulse\").pw(\"0.5\").pwrate(\"<5 .1 25>\").pwsweep(\"<0.3 .8>\")\n\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 697,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Controls the lfo rate for the pulsewidth of the pulse oscillator</p>",
      "name": "pwrate",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "name": "rate"
        }
      ],
      "examples": [
        "n(run(8)).scale(\"D:pentatonic\").s(\"pulse\").pw(\"0.5\").pwrate(\"<5 .1 25>\").pwsweep(\"<0.3 .8>\")"
      ],
      "longname": "pwrate",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Controls the lfo sweep for the pulsewidth of the pulse oscillator\n *\n * @name pwsweep\n * @param {number | Pattern} sweep\n * @example\n * n(run(8)).scale(\"D:pentatonic\").s(\"pulse\").pw(\"0.5\").pwrate(\"<5 .1 25>\").pwsweep(\"<0.3 .8>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 709,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Controls the lfo sweep for the pulsewidth of the pulse oscillator</p>",
      "name": "pwsweep",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "name": "sweep"
        }
      ],
      "examples": [
        "n(run(8)).scale(\"D:pentatonic\").s(\"pulse\").pw(\"0.5\").pwrate(\"<5 .1 25>\").pwsweep(\"<0.3 .8>\")"
      ],
      "longname": "pwsweep",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Phaser audio effect that approximates popular guitar pedals.\n *\n * @name phaser\n * @synonyms ph\n * @param {number | Pattern} speed speed of modulation\n * @example\n * n(run(8)).scale(\"D:pentatonic\").s(\"sawtooth\").release(0.5)\n * .phaser(\"<1 2 4 8>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 720,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Phaser audio effect that approximates popular guitar pedals.</p>",
      "name": "phaser",
      "synonyms_text": "ph",
      "synonyms": [
        "ph"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>speed of modulation</p>",
          "name": "speed"
        }
      ],
      "examples": [
        "n(run(8)).scale(\"D:pentatonic\").s(\"sawtooth\").release(0.5)\n.phaser(\"<1 2 4 8>\")"
      ],
      "longname": "phaser",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * The frequency sweep range of the lfo for the phaser effect. Defaults to 2000\n *\n * @name phasersweep\n * @synonyms phs\n * @param {number | Pattern} phasersweep most useful values are between 0 and 4000\n * @example\n * n(run(8)).scale(\"D:pentatonic\").s(\"sawtooth\").release(0.5)\n * .phaser(2).phasersweep(\"<800 2000 4000>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 737,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>The frequency sweep range of the lfo for the phaser effect. Defaults to 2000</p>",
      "name": "phasersweep",
      "synonyms_text": "phs",
      "synonyms": [
        "phs"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>most useful values are between 0 and 4000</p>",
          "name": "phasersweep"
        }
      ],
      "examples": [
        "n(run(8)).scale(\"D:pentatonic\").s(\"sawtooth\").release(0.5)\n.phaser(2).phasersweep(\"<800 2000 4000>\")"
      ],
      "longname": "phasersweep",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * The center frequency of the phaser in HZ. Defaults to 1000\n *\n * @name phasercenter\n * @synonyms phc\n * @param {number | Pattern} centerfrequency in HZ\n * @example\n * n(run(8)).scale(\"D:pentatonic\").s(\"sawtooth\").release(0.5)\n * .phaser(2).phasercenter(\"<800 2000 4000>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 750,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>The center frequency of the phaser in HZ. Defaults to 1000</p>",
      "name": "phasercenter",
      "synonyms_text": "phc",
      "synonyms": [
        "phc"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>in HZ</p>",
          "name": "centerfrequency"
        }
      ],
      "examples": [
        "n(run(8)).scale(\"D:pentatonic\").s(\"sawtooth\").release(0.5)\n.phaser(2).phasercenter(\"<800 2000 4000>\")"
      ],
      "longname": "phasercenter",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * The amount the signal is affected by the phaser effect. Defaults to 0.75\n *\n * @name phaserdepth\n * @synonyms phd, phasdp\n * @param {number | Pattern} depth number between 0 and 1\n * @example\n * n(run(8)).scale(\"D:pentatonic\").s(\"sawtooth\").release(0.5)\n * .phaser(2).phaserdepth(\"<0 .5 .75 1>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 764,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>The amount the signal is affected by the phaser effect. Defaults to 0.75</p>",
      "name": "phaserdepth",
      "synonyms_text": "phd, phasdp",
      "synonyms": [
        "phd",
        "phasdp"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>number between 0 and 1</p>",
          "name": "depth"
        }
      ],
      "examples": [
        "n(run(8)).scale(\"D:pentatonic\").s(\"sawtooth\").release(0.5)\n.phaser(2).phaserdepth(\"<0 .5 .75 1>\")"
      ],
      "longname": "phaserdepth",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Choose the channel the pattern is sent to in superdirt\n *\n * @name channel\n * @param {number | Pattern} channel channel number\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 778,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Choose the channel the pattern is sent to in superdirt</p>",
      "name": "channel",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>channel number</p>",
          "name": "channel"
        }
      ],
      "longname": "channel",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * In the style of classic drum-machines, `cut` will stop a playing sample as soon as another samples with in same cutgroup is to be played. An example would be an open hi-hat followed by a closed one, essentially muting the open.\n *\n * @name cut\n * @param {number | Pattern} group cut group number\n * @example\n * s(\"[oh hh]*4\").cut(1)\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 786,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>In the style of classic drum-machines, <code>cut</code> will stop a playing sample as soon as another samples with in same cutgroup is to be played. An example would be an open hi-hat followed by a closed one, essentially muting the open.</p>",
      "name": "cut",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>cut group number</p>",
          "name": "group"
        }
      ],
      "examples": [
        "s(\"[oh hh]*4\").cut(1)"
      ],
      "longname": "cut",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Applies the cutoff frequency of the **l**ow-**p**ass **f**ilter.\n *\n * When using mininotation, you can also optionally add the 'lpq' parameter, separated by ':'.\n *\n * @name lpf\n * @param {number | Pattern} frequency audible between 0 and 20000\n * @synonyms cutoff, ctf, lp\n * @example\n * s(\"bd sd [~ bd] sd,hh*6\").lpf(\"<4000 2000 1000 500 200 100>\")\n * @example\n * s(\"bd*16\").lpf(\"1000:0 1000:10 1000:20 1000:30\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 796,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Applies the cutoff frequency of the <strong>l</strong>ow-<strong>p</strong>ass <strong>f</strong>ilter.</p>\n<p>When using mininotation, you can also optionally add the 'lpq' parameter, separated by ':'.</p>",
      "name": "lpf",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>audible between 0 and 20000</p>",
          "name": "frequency"
        }
      ],
      "synonyms_text": "cutoff, ctf, lp",
      "synonyms": [
        "cutoff",
        "ctf",
        "lp"
      ],
      "examples": [
        "s(\"bd sd [~ bd] sd,hh*6\").lpf(\"<4000 2000 1000 500 200 100>\")",
        "s(\"bd*16\").lpf(\"1000:0 1000:10 1000:20 1000:30\")"
      ],
      "longname": "lpf",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the lowpass filter envelope modulation depth.\n * @name lpenv\n * @param {number | Pattern} modulation depth of the lowpass filter envelope between 0 and _n_\n * @synonyms lpe\n * @example\n * note(\"c2 e2 f2 g2\")\n * .sound('sawtooth')\n * .lpf(300)\n * .lpa(.5)\n * .lpenv(\"<4 2 1 0 -1 -2 -4>/4\")\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 812,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the lowpass filter envelope modulation depth.</p>",
      "name": "lpenv",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>depth of the lowpass filter envelope between 0 and <em>n</em></p>",
          "name": "modulation"
        }
      ],
      "synonyms_text": "lpe",
      "synonyms": [
        "lpe"
      ],
      "examples": [
        "note(\"c2 e2 f2 g2\")\n.sound('sawtooth')\n.lpf(300)\n.lpa(.5)\n.lpenv(\"<4 2 1 0 -1 -2 -4>/4\")"
      ],
      "longname": "lpenv",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the highpass filter envelope modulation depth.\n * @name hpenv\n * @param {number | Pattern} modulation depth of the highpass filter envelope between 0 and _n_\n * @synonyms hpe\n * @example\n * note(\"c2 e2 f2 g2\")\n * .sound('sawtooth')\n * .hpf(500)\n * .hpa(.5)\n * .hpenv(\"<4 2 1 0 -1 -2 -4>/4\")\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 825,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the highpass filter envelope modulation depth.</p>",
      "name": "hpenv",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>depth of the highpass filter envelope between 0 and <em>n</em></p>",
          "name": "modulation"
        }
      ],
      "synonyms_text": "hpe",
      "synonyms": [
        "hpe"
      ],
      "examples": [
        "note(\"c2 e2 f2 g2\")\n.sound('sawtooth')\n.hpf(500)\n.hpa(.5)\n.hpenv(\"<4 2 1 0 -1 -2 -4>/4\")"
      ],
      "longname": "hpenv",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the bandpass filter envelope modulation depth.\n * @name bpenv\n * @param {number | Pattern} modulation depth of the bandpass filter envelope between 0 and _n_\n * @synonyms bpe\n * @example\n * note(\"c2 e2 f2 g2\")\n * .sound('sawtooth')\n * .bpf(500)\n * .bpa(.5)\n * .bpenv(\"<4 2 1 0 -1 -2 -4>/4\")\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 838,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the bandpass filter envelope modulation depth.</p>",
      "name": "bpenv",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>depth of the bandpass filter envelope between 0 and <em>n</em></p>",
          "name": "modulation"
        }
      ],
      "synonyms_text": "bpe",
      "synonyms": [
        "bpe"
      ],
      "examples": [
        "note(\"c2 e2 f2 g2\")\n.sound('sawtooth')\n.bpf(500)\n.bpa(.5)\n.bpenv(\"<4 2 1 0 -1 -2 -4>/4\")"
      ],
      "longname": "bpenv",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the attack duration for the lowpass filter envelope.\n * @name lpattack\n * @param {number | Pattern} attack time of the filter envelope\n * @synonyms lpa\n * @example\n * note(\"c2 e2 f2 g2\")\n * .sound('sawtooth')\n * .lpf(300)\n * .lpa(\"<.5 .25 .1 .01>/4\")\n * .lpenv(4)\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 851,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the attack duration for the lowpass filter envelope.</p>",
      "name": "lpattack",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>time of the filter envelope</p>",
          "name": "attack"
        }
      ],
      "synonyms_text": "lpa",
      "synonyms": [
        "lpa"
      ],
      "examples": [
        "note(\"c2 e2 f2 g2\")\n.sound('sawtooth')\n.lpf(300)\n.lpa(\"<.5 .25 .1 .01>/4\")\n.lpenv(4)"
      ],
      "longname": "lpattack",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the attack duration for the highpass filter envelope.\n * @name hpattack\n * @param {number | Pattern} attack time of the highpass filter envelope\n * @synonyms hpa\n * @example\n * note(\"c2 e2 f2 g2\")\n * .sound('sawtooth')\n * .hpf(500)\n * .hpa(\"<.5 .25 .1 .01>/4\")\n * .hpenv(4)\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 864,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the attack duration for the highpass filter envelope.</p>",
      "name": "hpattack",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>time of the highpass filter envelope</p>",
          "name": "attack"
        }
      ],
      "synonyms_text": "hpa",
      "synonyms": [
        "hpa"
      ],
      "examples": [
        "note(\"c2 e2 f2 g2\")\n.sound('sawtooth')\n.hpf(500)\n.hpa(\"<.5 .25 .1 .01>/4\")\n.hpenv(4)"
      ],
      "longname": "hpattack",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the attack duration for the bandpass filter envelope.\n * @name bpattack\n * @param {number | Pattern} attack time of the bandpass filter envelope\n * @synonyms bpa\n * @example\n * note(\"c2 e2 f2 g2\")\n * .sound('sawtooth')\n * .bpf(500)\n * .bpa(\"<.5 .25 .1 .01>/4\")\n * .bpenv(4)\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 877,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the attack duration for the bandpass filter envelope.</p>",
      "name": "bpattack",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>time of the bandpass filter envelope</p>",
          "name": "attack"
        }
      ],
      "synonyms_text": "bpa",
      "synonyms": [
        "bpa"
      ],
      "examples": [
        "note(\"c2 e2 f2 g2\")\n.sound('sawtooth')\n.bpf(500)\n.bpa(\"<.5 .25 .1 .01>/4\")\n.bpenv(4)"
      ],
      "longname": "bpattack",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the decay duration for the lowpass filter envelope.\n * @name lpdecay\n * @param {number | Pattern} decay time of the filter envelope\n * @synonyms lpd\n * @example\n * note(\"c2 e2 f2 g2\")\n * .sound('sawtooth')\n * .lpf(300)\n * .lpd(\"<.5 .25 .1 0>/4\")\n * .lpenv(4)\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 890,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the decay duration for the lowpass filter envelope.</p>",
      "name": "lpdecay",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>time of the filter envelope</p>",
          "name": "decay"
        }
      ],
      "synonyms_text": "lpd",
      "synonyms": [
        "lpd"
      ],
      "examples": [
        "note(\"c2 e2 f2 g2\")\n.sound('sawtooth')\n.lpf(300)\n.lpd(\"<.5 .25 .1 0>/4\")\n.lpenv(4)"
      ],
      "longname": "lpdecay",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the decay duration for the highpass filter envelope.\n * @name hpdecay\n * @param {number | Pattern} decay time of the highpass filter envelope\n * @synonyms hpd\n * @example\n * note(\"c2 e2 f2 g2\")\n * .sound('sawtooth')\n * .hpf(500)\n * .hpd(\"<.5 .25 .1 0>/4\")\n * .hps(0.2)\n * .hpenv(4)\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 903,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the decay duration for the highpass filter envelope.</p>",
      "name": "hpdecay",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>time of the highpass filter envelope</p>",
          "name": "decay"
        }
      ],
      "synonyms_text": "hpd",
      "synonyms": [
        "hpd"
      ],
      "examples": [
        "note(\"c2 e2 f2 g2\")\n.sound('sawtooth')\n.hpf(500)\n.hpd(\"<.5 .25 .1 0>/4\")\n.hps(0.2)\n.hpenv(4)"
      ],
      "longname": "hpdecay",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the decay duration for the bandpass filter envelope.\n * @name bpdecay\n * @param {number | Pattern} decay time of the bandpass filter envelope\n * @synonyms bpd\n * @example\n * note(\"c2 e2 f2 g2\")\n * .sound('sawtooth')\n * .bpf(500)\n * .bpd(\"<.5 .25 .1 0>/4\")\n * .bps(0.2)\n * .bpenv(4)\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 917,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the decay duration for the bandpass filter envelope.</p>",
      "name": "bpdecay",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>time of the bandpass filter envelope</p>",
          "name": "decay"
        }
      ],
      "synonyms_text": "bpd",
      "synonyms": [
        "bpd"
      ],
      "examples": [
        "note(\"c2 e2 f2 g2\")\n.sound('sawtooth')\n.bpf(500)\n.bpd(\"<.5 .25 .1 0>/4\")\n.bps(0.2)\n.bpenv(4)"
      ],
      "longname": "bpdecay",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the sustain amplitude for the lowpass filter envelope.\n * @name lpsustain\n * @param {number | Pattern} sustain amplitude of the lowpass filter envelope\n * @synonyms lps\n * @example\n * note(\"c2 e2 f2 g2\")\n * .sound('sawtooth')\n * .lpf(300)\n * .lpd(.5)\n * .lps(\"<0 .25 .5 1>/4\")\n * .lpenv(4)\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 931,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the sustain amplitude for the lowpass filter envelope.</p>",
      "name": "lpsustain",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>amplitude of the lowpass filter envelope</p>",
          "name": "sustain"
        }
      ],
      "synonyms_text": "lps",
      "synonyms": [
        "lps"
      ],
      "examples": [
        "note(\"c2 e2 f2 g2\")\n.sound('sawtooth')\n.lpf(300)\n.lpd(.5)\n.lps(\"<0 .25 .5 1>/4\")\n.lpenv(4)"
      ],
      "longname": "lpsustain",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the sustain amplitude for the highpass filter envelope.\n * @name hpsustain\n * @param {number | Pattern} sustain amplitude of the highpass filter envelope\n * @synonyms hps\n * @example\n * note(\"c2 e2 f2 g2\")\n * .sound('sawtooth')\n * .hpf(500)\n * .hpd(.5)\n * .hps(\"<0 .25 .5 1>/4\")\n * .hpenv(4)\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 945,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the sustain amplitude for the highpass filter envelope.</p>",
      "name": "hpsustain",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>amplitude of the highpass filter envelope</p>",
          "name": "sustain"
        }
      ],
      "synonyms_text": "hps",
      "synonyms": [
        "hps"
      ],
      "examples": [
        "note(\"c2 e2 f2 g2\")\n.sound('sawtooth')\n.hpf(500)\n.hpd(.5)\n.hps(\"<0 .25 .5 1>/4\")\n.hpenv(4)"
      ],
      "longname": "hpsustain",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the sustain amplitude for the bandpass filter envelope.\n * @name bpsustain\n * @param {number | Pattern} sustain amplitude of the bandpass filter envelope\n * @synonyms bps\n * @example\n * note(\"c2 e2 f2 g2\")\n * .sound('sawtooth')\n * .bpf(500)\n * .bpd(.5)\n * .bps(\"<0 .25 .5 1>/4\")\n * .bpenv(4)\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 959,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the sustain amplitude for the bandpass filter envelope.</p>",
      "name": "bpsustain",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>amplitude of the bandpass filter envelope</p>",
          "name": "sustain"
        }
      ],
      "synonyms_text": "bps",
      "synonyms": [
        "bps"
      ],
      "examples": [
        "note(\"c2 e2 f2 g2\")\n.sound('sawtooth')\n.bpf(500)\n.bpd(.5)\n.bps(\"<0 .25 .5 1>/4\")\n.bpenv(4)"
      ],
      "longname": "bpsustain",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the release time for the lowpass filter envelope.\n * @name lprelease\n * @param {number | Pattern} release time of the filter envelope\n * @synonyms lpr\n * @example\n * note(\"c2 e2 f2 g2\")\n * .sound('sawtooth')\n * .clip(.5)\n * .lpf(300)\n * .lpenv(4)\n * .lpr(\"<.5 .25 .1 0>/4\")\n * .release(.5)\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 973,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the release time for the lowpass filter envelope.</p>",
      "name": "lprelease",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>time of the filter envelope</p>",
          "name": "release"
        }
      ],
      "synonyms_text": "lpr",
      "synonyms": [
        "lpr"
      ],
      "examples": [
        "note(\"c2 e2 f2 g2\")\n.sound('sawtooth')\n.clip(.5)\n.lpf(300)\n.lpenv(4)\n.lpr(\"<.5 .25 .1 0>/4\")\n.release(.5)"
      ],
      "longname": "lprelease",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the release time for the highpass filter envelope.\n * @name hprelease\n * @param {number | Pattern} release time of the highpass filter envelope\n * @synonyms hpr\n * @example\n * note(\"c2 e2 f2 g2\")\n * .sound('sawtooth')\n * .clip(.5)\n * .hpf(500)\n * .hpenv(4)\n * .hpr(\"<.5 .25 .1 0>/4\")\n * .release(.5)\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 988,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the release time for the highpass filter envelope.</p>",
      "name": "hprelease",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>time of the highpass filter envelope</p>",
          "name": "release"
        }
      ],
      "synonyms_text": "hpr",
      "synonyms": [
        "hpr"
      ],
      "examples": [
        "note(\"c2 e2 f2 g2\")\n.sound('sawtooth')\n.clip(.5)\n.hpf(500)\n.hpenv(4)\n.hpr(\"<.5 .25 .1 0>/4\")\n.release(.5)"
      ],
      "longname": "hprelease",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the release time for the bandpass filter envelope.\n * @name bprelease\n * @param {number | Pattern} release time of the bandpass filter envelope\n * @synonyms bpr\n * @example\n * note(\"c2 e2 f2 g2\")\n * .sound('sawtooth')\n * .clip(.5)\n * .bpf(500)\n * .bpenv(4)\n * .bpr(\"<.5 .25 .1 0>/4\")\n * .release(.5)\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1003,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the release time for the bandpass filter envelope.</p>",
      "name": "bprelease",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>time of the bandpass filter envelope</p>",
          "name": "release"
        }
      ],
      "synonyms_text": "bpr",
      "synonyms": [
        "bpr"
      ],
      "examples": [
        "note(\"c2 e2 f2 g2\")\n.sound('sawtooth')\n.clip(.5)\n.bpf(500)\n.bpenv(4)\n.bpr(\"<.5 .25 .1 0>/4\")\n.release(.5)"
      ],
      "longname": "bprelease",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the filter type. The ladder filter is more aggressive. More types might be added in the future.\n * @name ftype\n * @param {number | Pattern} type 12db (0), ladder (1), or 24db (2)\n * @example\n * note(\"{f g g c d a a#}%8\").s(\"sawtooth\").lpenv(4).lpf(500).ftype(\"<0 1 2>\").lpq(1)\n * @example\n * note(\"c f g g a c d4\").fast(2)\n * .sound('sawtooth')\n * .lpf(200).fanchor(0)\n * .lpenv(3).lpq(1)\n * .ftype(\"<ladder 12db 24db>\")\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1018,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the filter type. The ladder filter is more aggressive. More types might be added in the future.</p>",
      "name": "ftype",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>12db (0), ladder (1), or 24db (2)</p>",
          "name": "type"
        }
      ],
      "examples": [
        "note(\"{f g g c d a a#}%8\").s(\"sawtooth\").lpenv(4).lpf(500).ftype(\"<0 1 2>\").lpq(1)",
        "note(\"c f g g a c d4\").fast(2)\n.sound('sawtooth')\n.lpf(200).fanchor(0)\n.lpenv(3).lpq(1)\n.ftype(\"<ladder 12db 24db>\")"
      ],
      "longname": "ftype",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * controls the center of the filter envelope. 0 is unipolar positive, .5 is bipolar, 1 is unipolar negative\n * @name fanchor\n * @param {number | Pattern} center 0 to 1\n * @example\n * note(\"{f g g c d a a#}%8\").s(\"sawtooth\").lpf(\"{1000}%2\")\n * .lpenv(8).fanchor(\"<0 .5 1>\")\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1033,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>controls the center of the filter envelope. 0 is unipolar positive, .5 is bipolar, 1 is unipolar negative</p>",
      "name": "fanchor",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>0 to 1</p>",
          "name": "center"
        }
      ],
      "examples": [
        "note(\"{f g g c d a a#}%8\").s(\"sawtooth\").lpf(\"{1000}%2\")\n.lpenv(8).fanchor(\"<0 .5 1>\")"
      ],
      "longname": "fanchor",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Applies the cutoff frequency of the **h**igh-**p**ass **f**ilter.\n *\n * When using mininotation, you can also optionally add the 'hpq' parameter, separated by ':'.\n *\n * @name hpf\n * @param {number | Pattern} frequency audible between 0 and 20000\n * @synonyms hp, hcutoff\n * @example\n * s(\"bd sd [~ bd] sd,hh*8\").hpf(\"<4000 2000 1000 500 200 100>\")\n * @example\n * s(\"bd sd [~ bd] sd,hh*8\").hpf(\"<2000 2000:25>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1042,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Applies the cutoff frequency of the <strong>h</strong>igh-<strong>p</strong>ass <strong>f</strong>ilter.</p>\n<p>When using mininotation, you can also optionally add the 'hpq' parameter, separated by ':'.</p>",
      "name": "hpf",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>audible between 0 and 20000</p>",
          "name": "frequency"
        }
      ],
      "synonyms_text": "hp, hcutoff",
      "synonyms": [
        "hp",
        "hcutoff"
      ],
      "examples": [
        "s(\"bd sd [~ bd] sd,hh*8\").hpf(\"<4000 2000 1000 500 200 100>\")",
        "s(\"bd sd [~ bd] sd,hh*8\").hpf(\"<2000 2000:25>\")"
      ],
      "longname": "hpf",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Applies a vibrato to the frequency of the oscillator.\n *\n * @name vib\n * @synonyms vibrato, v\n * @param {number | Pattern} frequency of the vibrato in hertz\n * @example\n * note(\"a e\")\n * .vib(\"<.5 1 2 4 8 16>\")\n * ._scope()\n * @example\n * // change the modulation depth with \":\"\n * note(\"a e\")\n * .vib(\"<.5 1 2 4 8 16>:12\")\n * ._scope()\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1058,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Applies a vibrato to the frequency of the oscillator.</p>",
      "name": "vib",
      "synonyms_text": "vibrato, v",
      "synonyms": [
        "vibrato",
        "v"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>of the vibrato in hertz</p>",
          "name": "frequency"
        }
      ],
      "examples": [
        "note(\"a e\")\n.vib(\"<.5 1 2 4 8 16>\")\n._scope()",
        "// change the modulation depth with \":\"\nnote(\"a e\")\n.vib(\"<.5 1 2 4 8 16>:12\")\n._scope()"
      ],
      "longname": "vib",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Adds pink noise to the mix\n *\n * @name noise\n * @param {number | Pattern} wet wet amount\n * @example\n * sound(\"<white pink brown>/2\")\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1075,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Adds pink noise to the mix</p>",
      "name": "noise",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>wet amount</p>",
          "name": "wet"
        }
      ],
      "examples": [
        "sound(\"<white pink brown>/2\")"
      ],
      "longname": "noise",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the vibrato depth in semitones. Only has an effect if `vibrato` | `vib` | `v` is is also set\n *\n * @name vibmod\n * @synonyms vmod\n * @param {number | Pattern} depth of vibrato (in semitones)\n * @example\n * note(\"a e\").vib(4)\n * .vibmod(\"<.25 .5 1 2 12>\")\n * ._scope()\n * @example\n * // change the vibrato frequency with \":\"\n * note(\"a e\")\n * .vibmod(\"<.25 .5 1 2 12>:8\")\n * ._scope()\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1084,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the vibrato depth in semitones. Only has an effect if <code>vibrato</code> | <code>vib</code> | <code>v</code> is is also set</p>",
      "name": "vibmod",
      "synonyms_text": "vmod",
      "synonyms": [
        "vmod"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>of vibrato (in semitones)</p>",
          "name": "depth"
        }
      ],
      "examples": [
        "note(\"a e\").vib(4)\n.vibmod(\"<.25 .5 1 2 12>\")\n._scope()",
        "// change the vibrato frequency with \":\"\nnote(\"a e\")\n.vibmod(\"<.25 .5 1 2 12>:8\")\n._scope()"
      ],
      "longname": "vibmod",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Controls the **h**igh-**p**ass **q**-value.\n *\n * @name hpq\n * @param {number | Pattern} q resonance factor between 0 and 50\n * @synonyms hresonance\n * @example\n * s(\"bd sd [~ bd] sd,hh*8\").hpf(2000).hpq(\"<0 10 20 30>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1102,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Controls the <strong>h</strong>igh-<strong>p</strong>ass <strong>q</strong>-value.</p>",
      "name": "hpq",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>resonance factor between 0 and 50</p>",
          "name": "q"
        }
      ],
      "synonyms_text": "hresonance",
      "synonyms": [
        "hresonance"
      ],
      "examples": [
        "s(\"bd sd [~ bd] sd,hh*8\").hpf(2000).hpq(\"<0 10 20 30>\")"
      ],
      "longname": "hpq",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Controls the **l**ow-**p**ass **q**-value.\n *\n * @name lpq\n * @param {number | Pattern} q resonance factor between 0 and 50\n * @synonyms resonance\n * @example\n * s(\"bd sd [~ bd] sd,hh*8\").lpf(2000).lpq(\"<0 10 20 30>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1113,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Controls the <strong>l</strong>ow-<strong>p</strong>ass <strong>q</strong>-value.</p>",
      "name": "lpq",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>resonance factor between 0 and 50</p>",
          "name": "q"
        }
      ],
      "synonyms_text": "resonance",
      "synonyms": [
        "resonance"
      ],
      "examples": [
        "s(\"bd sd [~ bd] sd,hh*8\").lpf(2000).lpq(\"<0 10 20 30>\")"
      ],
      "longname": "lpq",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * DJ filter, below 0.5 is low pass filter, above is high pass filter.\n *\n * @name djf\n * @param {number | Pattern} cutoff below 0.5 is low pass filter, above is high pass filter\n * @example\n * n(\"0 3 7 [10,24]\").s('superzow').octave(3).djf(\"<.5 .25 .5 .75>\").osc()\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1125,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>DJ filter, below 0.5 is low pass filter, above is high pass filter.</p>",
      "name": "djf",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>below 0.5 is low pass filter, above is high pass filter</p>",
          "name": "cutoff"
        }
      ],
      "examples": [
        "n(\"0 3 7 [10,24]\").s('superzow').octave(3).djf(\"<.5 .25 .5 .75>\").osc()"
      ],
      "longname": "djf",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the level of the delay signal.\n *\n * When using mininotation, you can also optionally add the 'delaytime' and 'delayfeedback' parameter,\n * separated by ':'.\n *\n *\n * @name delay\n * @param {number | Pattern} level between 0 and 1\n * @example\n * s(\"bd bd\").delay(\"<0 .25 .5 1>\")\n * @example\n * s(\"bd bd\").delay(\"0.65:0.25:0.9 0.65:0.125:0.7\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1137,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the level of the delay signal.</p>\n<p>When using mininotation, you can also optionally add the 'delaytime' and 'delayfeedback' parameter,\nseparated by ':'.</p>",
      "name": "delay",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>between 0 and 1</p>",
          "name": "level"
        }
      ],
      "examples": [
        "s(\"bd bd\").delay(\"<0 .25 .5 1>\")",
        "s(\"bd bd\").delay(\"0.65:0.25:0.9 0.65:0.125:0.7\")"
      ],
      "longname": "delay",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the level of the signal that is fed back into the delay.\n * Caution: Values >= 1 will result in a signal that gets louder and louder! Don't do it\n *\n * @name delayfeedback\n * @param {number | Pattern} feedback between 0 and 1\n * @synonyms delayfb, dfb\n * @example\n * s(\"bd\").delay(.25).delayfeedback(\"<.25 .5 .75 1>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1153,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the level of the signal that is fed back into the delay.\nCaution: Values &gt;= 1 will result in a signal that gets louder and louder! Don't do it</p>",
      "name": "delayfeedback",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>between 0 and 1</p>",
          "name": "feedback"
        }
      ],
      "synonyms_text": "delayfb, dfb",
      "synonyms": [
        "delayfb",
        "dfb"
      ],
      "examples": [
        "s(\"bd\").delay(.25).delayfeedback(\"<.25 .5 .75 1>\")"
      ],
      "longname": "delayfeedback",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the level of the signal that is fed back into the delay.\n * Caution: Values >= 1 will result in a signal that gets louder and louder! Don't do it\n *\n * @name delayfeedback\n * @param {number | Pattern} feedback between 0 and 1\n * @synonyms delayfb, dfb\n * @example\n * s(\"bd\").delay(.25).delayfeedback(\"<.25 .5 .75 1>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1166,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the level of the signal that is fed back into the delay.\nCaution: Values &gt;= 1 will result in a signal that gets louder and louder! Don't do it</p>",
      "name": "delayfeedback",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>between 0 and 1</p>",
          "name": "feedback"
        }
      ],
      "synonyms_text": "delayfb, dfb",
      "synonyms": [
        "delayfb",
        "dfb"
      ],
      "examples": [
        "s(\"bd\").delay(.25).delayfeedback(\"<.25 .5 .75 1>\")"
      ],
      "longname": "delayfeedback",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the time of the delay effect.\n *\n * @name delayspeed\n * @param {number | Pattern} delayspeed controls the pitch of the delay feedback\n * @synonyms delayt, dt\n * @example\n * note(\"d d a# a\".fast(2)).s(\"sawtooth\").delay(.8).delaytime(1/2).delayspeed(\"<2 .5 -1 -2>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1178,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the time of the delay effect.</p>",
      "name": "delayspeed",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>controls the pitch of the delay feedback</p>",
          "name": "delayspeed"
        }
      ],
      "synonyms_text": "delayt, dt",
      "synonyms": [
        "delayt",
        "dt"
      ],
      "examples": [
        "note(\"d d a# a\".fast(2)).s(\"sawtooth\").delay(.8).delaytime(1/2).delayspeed(\"<2 .5 -1 -2>\")"
      ],
      "longname": "delayspeed",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the time of the delay effect in cycles.\n *\n * @name delaysync\n * @param {number | Pattern} cycles delay length in cycles\n * @synonyms delayt, dt\n * @example\n * s(\"bd bd\").delay(.25).delaysync(\"<1 2 3 5>\".div(8))\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1190,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the time of the delay effect in cycles.</p>",
      "name": "delaysync",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>delay length in cycles</p>",
          "name": "cycles"
        }
      ],
      "synonyms_text": "delayt, dt",
      "synonyms": [
        "delayt",
        "dt"
      ],
      "examples": [
        "s(\"bd bd\").delay(.25).delaysync(\"<1 2 3 5>\".div(8))"
      ],
      "longname": "delaysync",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Specifies whether delaytime is calculated relative to cps.\n *\n * @name lock\n * @param {number | Pattern} enable When set to 1, delaytime is a direct multiple of a cycle.\n * @superdirtOnly\n * @example\n * s(\"sd\").delay().lock(1).osc()\n *\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1202,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Specifies whether delaytime is calculated relative to cps.</p>",
      "name": "lock",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>When set to 1, delaytime is a direct multiple of a cycle.</p>",
          "name": "enable"
        }
      ],
      "tags": [
        {
          "originalTitle": "superdirtOnly",
          "title": "superdirtonly",
          "text": ""
        }
      ],
      "examples": [
        "s(\"sd\").delay().lock(1).osc()"
      ],
      "longname": "lock",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Set detune for stacked voices of supported oscillators\n *\n * @name detune\n * @param {number | Pattern} amount\n * @synonyms det\n * @example\n * note(\"d f a a# a d3\").fast(2).s(\"supersaw\").detune(\"<.1 .2 .5 24.1>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1215,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Set detune for stacked voices of supported oscillators</p>",
      "name": "detune",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "name": "amount"
        }
      ],
      "synonyms_text": "det",
      "synonyms": [
        "det"
      ],
      "examples": [
        "note(\"d f a a# a d3\").fast(2).s(\"supersaw\").detune(\"<.1 .2 .5 24.1>\")"
      ],
      "longname": "detune",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Set number of stacked voices for supported oscillators\n *\n * @name unison\n * @param {number | Pattern} numvoices\n * @example\n * note(\"d f a a# a d3\").fast(2).s(\"supersaw\").unison(\"<1 2 7>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1226,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Set number of stacked voices for supported oscillators</p>",
      "name": "unison",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "name": "numvoices"
        }
      ],
      "examples": [
        "note(\"d f a a# a d3\").fast(2).s(\"supersaw\").unison(\"<1 2 7>\")"
      ],
      "longname": "unison",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Set the stereo pan spread for supported oscillators\n *\n * @name spread\n * @param {number | Pattern} spread between 0 and 1\n * @example\n * note(\"d f a a# a d3\").fast(2).s(\"supersaw\").spread(\"<0 .3 1>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1237,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Set the stereo pan spread for supported oscillators</p>",
      "name": "spread",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>between 0 and 1</p>",
          "name": "spread"
        }
      ],
      "examples": [
        "note(\"d f a a# a d3\").fast(2).s(\"supersaw\").spread(\"<0 .3 1>\")"
      ],
      "longname": "spread",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Set dryness of reverb. See `room` and `size` for more information about reverb.\n *\n * @name dry\n * @param {number | Pattern} dry 0 = wet, 1 = dry\n * @example\n * n(\"[0,3,7](3,8)\").s(\"superpiano\").room(.7).dry(\"<0 .5 .75 1>\").osc()\n * @superdirtOnly\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1247,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Set dryness of reverb. See <code>room</code> and <code>size</code> for more information about reverb.</p>",
      "name": "dry",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>0 = wet, 1 = dry</p>",
          "name": "dry"
        }
      ],
      "examples": [
        "n(\"[0,3,7](3,8)\").s(\"superpiano\").room(.7).dry(\"<0 .5 .75 1>\").osc()"
      ],
      "tags": [
        {
          "originalTitle": "superdirtOnly",
          "title": "superdirtonly",
          "text": ""
        }
      ],
      "longname": "dry",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Set frequency of sound.\n *\n * @name freq\n * @param {number | Pattern} frequency in Hz. the audible range is between 20 and 20000 Hz\n * @example\n * freq(\"220 110 440 110\").s(\"superzow\").osc()\n * @example\n * freq(\"110\".mul.out(\".5 1.5 .6 [2 3]\")).s(\"superzow\").osc()\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1272,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Set frequency of sound.</p>",
      "name": "freq",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>in Hz. the audible range is between 20 and 20000 Hz</p>",
          "name": "frequency"
        }
      ],
      "examples": [
        "freq(\"220 110 440 110\").s(\"superzow\").osc()",
        "freq(\"110\".mul.out(\".5 1.5 .6 [2 3]\")).s(\"superzow\").osc()"
      ],
      "longname": "freq",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Attack time of pitch envelope.\n *\n * @name pattack\n * @synonyms patt\n * @param {number | Pattern} time time in seconds\n * @example\n * note(\"c eb g bb\").pattack(\"0 .1 .25 .5\").slow(2)\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1285,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Attack time of pitch envelope.</p>",
      "name": "pattack",
      "synonyms_text": "patt",
      "synonyms": [
        "patt"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>time in seconds</p>",
          "name": "time"
        }
      ],
      "examples": [
        "note(\"c eb g bb\").pattack(\"0 .1 .25 .5\").slow(2)"
      ],
      "longname": "pattack",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Decay time of pitch envelope.\n *\n * @name pdecay\n * @synonyms pdec\n * @param {number | Pattern} time time in seconds\n * @example\n * note(\"<c eb g bb>\").pdecay(\"<0 .1 .25 .5>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1296,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Decay time of pitch envelope.</p>",
      "name": "pdecay",
      "synonyms_text": "pdec",
      "synonyms": [
        "pdec"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>time in seconds</p>",
          "name": "time"
        }
      ],
      "examples": [
        "note(\"<c eb g bb>\").pdecay(\"<0 .1 .25 .5>\")"
      ],
      "longname": "pdecay",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Release time of pitch envelope\n *\n * @name prelease\n * @synonyms prel\n * @param {number | Pattern} time time in seconds\n * @example\n * note(\"<c eb g bb> ~\")\n * .release(.5) // to hear the pitch release\n * .prelease(\"<0 .1 .25 .5>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1309,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Release time of pitch envelope</p>",
      "name": "prelease",
      "synonyms_text": "prel",
      "synonyms": [
        "prel"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>time in seconds</p>",
          "name": "time"
        }
      ],
      "examples": [
        "note(\"<c eb g bb> ~\")\n.release(.5) // to hear the pitch release\n.prelease(\"<0 .1 .25 .5>\")"
      ],
      "longname": "prelease",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Amount of pitch envelope. Negative values will flip the envelope.\n * If you don't set other pitch envelope controls, `pattack:.2` will be the default.\n *\n * @name penv\n * @param {number | Pattern} semitones change in semitones\n * @example\n * note(\"c\")\n * .penv(\"<12 7 1 .5 0 -1 -7 -12>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1322,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Amount of pitch envelope. Negative values will flip the envelope.\nIf you don't set other pitch envelope controls, <code>pattack:.2</code> will be the default.</p>",
      "name": "penv",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>change in semitones</p>",
          "name": "semitones"
        }
      ],
      "examples": [
        "note(\"c\")\n.penv(\"<12 7 1 .5 0 -1 -7 -12>\")"
      ],
      "longname": "penv",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Curve of envelope. Defaults to linear. exponential is good for kicks\n *\n * @name pcurve\n * @param {number | Pattern} type 0 = linear, 1 = exponential\n * @example\n * note(\"g1*4\")\n * .s(\"sine\").pdec(.5)\n * .penv(32)\n * .pcurve(\"<0 1>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1334,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Curve of envelope. Defaults to linear. exponential is good for kicks</p>",
      "name": "pcurve",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>0 = linear, 1 = exponential</p>",
          "name": "type"
        }
      ],
      "examples": [
        "note(\"g1*4\")\n.s(\"sine\").pdec(.5)\n.penv(32)\n.pcurve(\"<0 1>\")"
      ],
      "longname": "pcurve",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the range anchor of the envelope:\n * - anchor 0: range = [note, note + penv]\n * - anchor 1: range = [note - penv, note]\n * If you don't set an anchor, the value will default to the psustain value.\n *\n * @name panchor\n * @param {number | Pattern} anchor anchor offset\n * @example\n * note(\"c c4\").penv(12).panchor(\"<0 .5 1 .5>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1347,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the range anchor of the envelope:</p>\n<ul>\n<li>anchor 0: range = [note, note + penv]</li>\n<li>anchor 1: range = [note - penv, note]\nIf you don't set an anchor, the value will default to the psustain value.</li>\n</ul>",
      "name": "panchor",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>anchor offset</p>",
          "name": "anchor"
        }
      ],
      "examples": [
        "note(\"c c4\").penv(12).panchor(\"<0 .5 1 .5>\")"
      ],
      "longname": "panchor",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Emulation of a Leslie speaker: speakers rotating in a wooden amplified cabinet.\n *\n * @name leslie\n * @param {number | Pattern} wet between 0 and 1\n * @example\n * n(\"0,4,7\").s(\"supersquare\").leslie(\"<0 .4 .6 1>\").osc()\n * @superdirtOnly\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1371,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Emulation of a Leslie speaker: speakers rotating in a wooden amplified cabinet.</p>",
      "name": "leslie",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>between 0 and 1</p>",
          "name": "wet"
        }
      ],
      "examples": [
        "n(\"0,4,7\").s(\"supersquare\").leslie(\"<0 .4 .6 1>\").osc()"
      ],
      "tags": [
        {
          "originalTitle": "superdirtOnly",
          "title": "superdirtonly",
          "text": ""
        }
      ],
      "longname": "leslie",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Rate of modulation / rotation for leslie effect\n *\n * @name lrate\n * @param {number | Pattern} rate 6.7 for fast, 0.7 for slow\n * @example\n * n(\"0,4,7\").s(\"supersquare\").leslie(1).lrate(\"<1 2 4 8>\").osc()\n * @superdirtOnly\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1382,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Rate of modulation / rotation for leslie effect</p>",
      "name": "lrate",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>6.7 for fast, 0.7 for slow</p>",
          "name": "rate"
        }
      ],
      "examples": [
        "n(\"0,4,7\").s(\"supersquare\").leslie(1).lrate(\"<1 2 4 8>\").osc()"
      ],
      "tags": [
        {
          "originalTitle": "superdirtOnly",
          "title": "superdirtonly",
          "text": ""
        }
      ],
      "longname": "lrate",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Physical size of the cabinet in meters. Be careful, it might be slightly larger than your computer. Affects the Doppler amount (pitch warble)\n *\n * @name lsize\n * @param {number | Pattern} meters somewhere between 0 and 1\n * @example\n * n(\"0,4,7\").s(\"supersquare\").leslie(1).lrate(2).lsize(\"<.1 .5 1>\").osc()\n * @superdirtOnly\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1394,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Physical size of the cabinet in meters. Be careful, it might be slightly larger than your computer. Affects the Doppler amount (pitch warble)</p>",
      "name": "lsize",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>somewhere between 0 and 1</p>",
          "name": "meters"
        }
      ],
      "examples": [
        "n(\"0,4,7\").s(\"supersquare\").leslie(1).lrate(2).lsize(\"<.1 .5 1>\").osc()"
      ],
      "tags": [
        {
          "originalTitle": "superdirtOnly",
          "title": "superdirtonly",
          "text": ""
        }
      ],
      "longname": "lsize",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the displayed text for an event on the pianoroll\n *\n * @name label\n * @param {string} label text to display\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1405,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the displayed text for an event on the pianoroll</p>",
      "name": "label",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>text to display</p>",
          "name": "label"
        }
      ],
      "longname": "label",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the default octave of a synth.\n *\n * @name octave\n * @param {number | Pattern} octave octave number\n * @example\n * n(\"0,4,7\").s('supersquare').octave(\"<3 4 5 6>\").osc()\n * @superDirtOnly\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1441,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the default octave of a synth.</p>",
      "name": "octave",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>octave number</p>",
          "name": "octave"
        }
      ],
      "examples": [
        "n(\"0,4,7\").s('supersquare').octave(\"<3 4 5 6>\").osc()"
      ],
      "tags": [
        {
          "originalTitle": "superDirtOnly",
          "title": "superdirtonly",
          "text": ""
        }
      ],
      "longname": "octave",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * An `orbit` is a global parameter context for patterns. Patterns with the same orbit will share the same global effects.\n *\n * @name orbit\n * @param {number | Pattern} number\n * @example\n * stack(\n *   s(\"hh*6\").delay(.5).delaytime(.25).orbit(1),\n *   s(\"~ sd ~ sd\").delay(.5).delaytime(.125).orbit(2)\n * )\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1454,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>An <code>orbit</code> is a global parameter context for patterns. Patterns with the same orbit will share the same global effects.</p>",
      "name": "orbit",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "name": "number"
        }
      ],
      "examples": [
        "stack(\n  s(\"hh*6\").delay(.5).delaytime(.25).orbit(1),\n  s(\"~ sd ~ sd\").delay(.5).delaytime(.125).orbit(2)\n)"
      ],
      "longname": "orbit",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets position in stereo.\n *\n * @name pan\n * @param {number | Pattern} pan between 0 and 1, from left to right (assuming stereo), once round a circle (assuming multichannel)\n * @example\n * s(\"[bd hh]*2\").pan(\"<.5 1 .5 0>\")\n * @example\n * s(\"bd rim sd rim bd ~ cp rim\").pan(sine.slow(2))\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1470,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets position in stereo.</p>",
      "name": "pan",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>between 0 and 1, from left to right (assuming stereo), once round a circle (assuming multichannel)</p>",
          "name": "pan"
        }
      ],
      "examples": [
        "s(\"[bd hh]*2\").pan(\"<.5 1 .5 0>\")",
        "s(\"bd rim sd rim bd ~ cp rim\").pan(sine.slow(2))"
      ],
      "longname": "pan",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the level of reverb.\n *\n * When using mininotation, you can also optionally add the 'size' parameter, separated by ':'.\n *\n * @name room\n * @param {number | Pattern} level between 0 and 1\n * @example\n * s(\"bd sd [~ bd] sd\").room(\"<0 .2 .4 .6 .8 1>\")\n * @example\n * s(\"bd sd [~ bd] sd\").room(\"<0.9:1 0.9:4>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1533,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the level of reverb.</p>\n<p>When using mininotation, you can also optionally add the 'size' parameter, separated by ':'.</p>",
      "name": "room",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>between 0 and 1</p>",
          "name": "level"
        }
      ],
      "examples": [
        "s(\"bd sd [~ bd] sd\").room(\"<0 .2 .4 .6 .8 1>\")",
        "s(\"bd sd [~ bd] sd\").room(\"<0.9:1 0.9:4>\")"
      ],
      "longname": "room",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Reverb lowpass starting frequency (in hertz).\n * When this property is changed, the reverb will be recaculated, so only change this sparsely..\n *\n * @name roomlp\n * @synonyms rlp\n * @param {number} frequency between 0 and 20000hz\n * @example\n * s(\"bd sd [~ bd] sd\").room(0.5).rlp(10000)\n * @example\n * s(\"bd sd [~ bd] sd\").room(0.5).rlp(5000)\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1547,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Reverb lowpass starting frequency (in hertz).\nWhen this property is changed, the reverb will be recaculated, so only change this sparsely..</p>",
      "name": "roomlp",
      "synonyms_text": "rlp",
      "synonyms": [
        "rlp"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>between 0 and 20000hz</p>",
          "name": "frequency"
        }
      ],
      "examples": [
        "s(\"bd sd [~ bd] sd\").room(0.5).rlp(10000)",
        "s(\"bd sd [~ bd] sd\").room(0.5).rlp(5000)"
      ],
      "longname": "roomlp",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Reverb lowpass frequency at -60dB (in hertz).\n * When this property is changed, the reverb will be recaculated, so only change this sparsely..\n *\n * @name roomdim\n * @synonyms rdim\n * @param {number} frequency between 0 and 20000hz\n * @example\n * s(\"bd sd [~ bd] sd\").room(0.5).rlp(10000).rdim(8000)\n * @example\n * s(\"bd sd [~ bd] sd\").room(0.5).rlp(5000).rdim(400)\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1560,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Reverb lowpass frequency at -60dB (in hertz).\nWhen this property is changed, the reverb will be recaculated, so only change this sparsely..</p>",
      "name": "roomdim",
      "synonyms_text": "rdim",
      "synonyms": [
        "rdim"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>between 0 and 20000hz</p>",
          "name": "frequency"
        }
      ],
      "examples": [
        "s(\"bd sd [~ bd] sd\").room(0.5).rlp(10000).rdim(8000)",
        "s(\"bd sd [~ bd] sd\").room(0.5).rlp(5000).rdim(400)"
      ],
      "longname": "roomdim",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Reverb fade time (in seconds).\n * When this property is changed, the reverb will be recaculated, so only change this sparsely..\n *\n * @name roomfade\n * @synonyms rfade\n * @param {number} seconds for the reverb to fade\n * @example\n * s(\"bd sd [~ bd] sd\").room(0.5).rlp(10000).rfade(0.5)\n * @example\n * s(\"bd sd [~ bd] sd\").room(0.5).rlp(5000).rfade(4)\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1574,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Reverb fade time (in seconds).\nWhen this property is changed, the reverb will be recaculated, so only change this sparsely..</p>",
      "name": "roomfade",
      "synonyms_text": "rfade",
      "synonyms": [
        "rfade"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>for the reverb to fade</p>",
          "name": "seconds"
        }
      ],
      "examples": [
        "s(\"bd sd [~ bd] sd\").room(0.5).rlp(10000).rfade(0.5)",
        "s(\"bd sd [~ bd] sd\").room(0.5).rlp(5000).rfade(4)"
      ],
      "longname": "roomfade",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the sample to use as an impulse response for the reverb.\n * @name iresponse\n * @param {string | Pattern} sample to use as an impulse response\n * @synonyms ir\n * @example\n * s(\"bd sd [~ bd] sd\").room(.8).ir(\"<shaker_large:0 shaker_large:2>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1588,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the sample to use as an impulse response for the reverb.</p>",
      "name": "iresponse",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "Pattern"
            ]
          },
          "description": "<p>to use as an impulse response</p>",
          "name": "sample"
        }
      ],
      "synonyms_text": "ir",
      "synonyms": [
        "ir"
      ],
      "examples": [
        "s(\"bd sd [~ bd] sd\").room(.8).ir(\"<shaker_large:0 shaker_large:2>\")"
      ],
      "longname": "iresponse",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets speed of the sample for the impulse response.\n * @name irspeed\n * @param {string | Pattern} speed\n * @example\n * samples('github:switchangel/pad')\n * $: s(\"brk/2\").fit().scrub(irand(16).div(16).seg(8)).ir(\"swpad:4\").room(.2).irspeed(\"<2 1 .5>/2\").irbegin(.5).roomsize(.5)\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1599,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets speed of the sample for the impulse response.</p>",
      "name": "irspeed",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "Pattern"
            ]
          },
          "name": "speed"
        }
      ],
      "examples": [
        "samples('github:switchangel/pad')\n$: s(\"brk/2\").fit().scrub(irand(16).div(16).seg(8)).ir(\"swpad:4\").room(.2).irspeed(\"<2 1 .5>/2\").irbegin(.5).roomsize(.5)"
      ],
      "longname": "irspeed",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the beginning of the IR response sample\n * @name irbegin\n * @param {string | Pattern} begin between 0 and 1\n * @synonyms ir\n * @example\n * samples('github:switchangel/pad')\n * $: s(\"brk/2\").fit().scrub(irand(16).div(16).seg(8)).ir(\"swpad:4\").room(.65).irspeed(\"-2\").irbegin(\"<0 .5 .75>/2\").roomsize(.6)\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1610,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the beginning of the IR response sample</p>",
      "name": "irbegin",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "Pattern"
            ]
          },
          "description": "<p>between 0 and 1</p>",
          "name": "begin"
        }
      ],
      "synonyms_text": "ir",
      "synonyms": [
        "ir"
      ],
      "examples": [
        "samples('github:switchangel/pad')\n$: s(\"brk/2\").fit().scrub(irand(16).div(16).seg(8)).ir(\"swpad:4\").room(.65).irspeed(\"-2\").irbegin(\"<0 .5 .75>/2\").roomsize(.6)"
      ],
      "longname": "irbegin",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the room size of the reverb, see `room`.\n * When this property is changed, the reverb will be recaculated, so only change this sparsely..\n *\n * @name roomsize\n * @param {number | Pattern} size between 0 and 10\n * @synonyms rsize, sz, size\n * @example\n * s(\"bd sd [~ bd] sd\").room(.8).rsize(1)\n * @example\n * s(\"bd sd [~ bd] sd\").room(.8).rsize(4)\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1621,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the room size of the reverb, see <code>room</code>.\nWhen this property is changed, the reverb will be recaculated, so only change this sparsely..</p>",
      "name": "roomsize",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>between 0 and 10</p>",
          "name": "size"
        }
      ],
      "synonyms_text": "rsize, sz, size",
      "synonyms": [
        "rsize",
        "sz",
        "size"
      ],
      "examples": [
        "s(\"bd sd [~ bd] sd\").room(.8).rsize(1)",
        "s(\"bd sd [~ bd] sd\").room(.8).rsize(4)"
      ],
      "longname": "roomsize",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * (Deprecated) Wave shaping distortion. WARNING: can suddenly get unpredictably loud.\n * Please use distort instead, which has a more predictable response curve\n * second option in optional array syntax (ex: \".9:.5\") applies a postgain to the output\n *\n *\n * @name shape\n * @param {number | Pattern} distortion between 0 and 1\n * @example\n * s(\"bd sd [~ bd] sd,hh*8\").shape(\"<0 .2 .4 .6 .8>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1642,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>(Deprecated) Wave shaping distortion. WARNING: can suddenly get unpredictably loud.\nPlease use distort instead, which has a more predictable response curve\nsecond option in optional array syntax (ex: &quot;.9:.5&quot;) applies a postgain to the output</p>",
      "name": "shape",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>between 0 and 1</p>",
          "name": "distortion"
        }
      ],
      "examples": [
        "s(\"bd sd [~ bd] sd,hh*8\").shape(\"<0 .2 .4 .6 .8>\")"
      ],
      "longname": "shape",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Wave shaping distortion. CAUTION: it can get loud.\n * Second option in optional array syntax (ex: \".9:.5\") applies a postgain to the output.\n * Most useful values are usually between 0 and 10 (depending on source gain). If you are feeling adventurous, you can turn it up to 11 and beyond ;)\n *\n * @name distort\n * @synonyms dist\n * @param {number | Pattern} distortion\n * @example\n * s(\"bd sd [~ bd] sd,hh*8\").distort(\"<0 2 3 10:.5>\")\n * @example\n * note(\"d1!8\").s(\"sine\").penv(36).pdecay(.12).decay(.23).distort(\"8:.4\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1655,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Wave shaping distortion. CAUTION: it can get loud.\nSecond option in optional array syntax (ex: &quot;.9:.5&quot;) applies a postgain to the output.\nMost useful values are usually between 0 and 10 (depending on source gain). If you are feeling adventurous, you can turn it up to 11 and beyond ;)</p>",
      "name": "distort",
      "synonyms_text": "dist",
      "synonyms": [
        "dist"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "name": "distortion"
        }
      ],
      "examples": [
        "s(\"bd sd [~ bd] sd,hh*8\").distort(\"<0 2 3 10:.5>\")",
        "note(\"d1!8\").s(\"sine\").penv(36).pdecay(.12).decay(.23).distort(\"8:.4\")"
      ],
      "longname": "distort",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Dynamics Compressor. The params are `compressor(\"threshold:ratio:knee:attack:release\")`\n * More info [here](https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode?retiredLocale=de#instance_properties)\n *\n * @name compressor\n * @example\n * s(\"bd sd [~ bd] sd,hh*8\")\n * .compressor(\"-20:20:10:.002:.02\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1670,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Dynamics Compressor. The params are <code>compressor(&quot;threshold:ratio:knee:attack:release&quot;)</code>\nMore info <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode?retiredLocale=de#instance_properties\">here</a></p>",
      "name": "compressor",
      "examples": [
        "s(\"bd sd [~ bd] sd,hh*8\")\n.compressor(\"-20:20:10:.002:.02\")"
      ],
      "longname": "compressor",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Changes the speed of sample playback, i.e. a cheap way of changing pitch.\n *\n * @name speed\n * @param {number | Pattern} speed -inf to inf, negative numbers play the sample backwards.\n * @example\n * s(\"bd*6\").speed(\"1 2 4 1 -2 -4\")\n * @example\n * speed(\"1 1.5*2 [2 1.1]\").s(\"piano\").clip(1)\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1691,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Changes the speed of sample playback, i.e. a cheap way of changing pitch.</p>",
      "name": "speed",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>inf to inf, negative numbers play the sample backwards.</p>",
          "name": "speed"
        }
      ],
      "examples": [
        "s(\"bd*6\").speed(\"1 2 4 1 -2 -4\")",
        "speed(\"1 1.5*2 [2 1.1]\").s(\"piano\").clip(1)"
      ],
      "longname": "speed",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Changes the speed of sample playback, i.e. a cheap way of changing pitch.\n *\n * @name stretch\n * @param {number | Pattern} factor -inf to inf, negative numbers play the sample backwards.\n * @example\n * s(\"gm_flute\").stretch(\"1 2 .5\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1704,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Changes the speed of sample playback, i.e. a cheap way of changing pitch.</p>",
      "name": "stretch",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>inf to inf, negative numbers play the sample backwards.</p>",
          "name": "factor"
        }
      ],
      "examples": [
        "s(\"gm_flute\").stretch(\"1 2 .5\")"
      ],
      "longname": "stretch",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Used in conjunction with `speed`, accepts values of \"r\" (rate, default behavior), \"c\" (cycles), or \"s\" (seconds). Using `unit \"c\"` means `speed` will be interpreted in units of cycles, e.g. `speed \"1\"` means samples will be stretched to fill a cycle. Using `unit \"s\"` means the playback speed will be adjusted so that the duration is the number of seconds specified by `speed`.\n *\n * @name unit\n * @param {number | string | Pattern} unit see description above\n * @example\n * speed(\"1 2 .5 3\").s(\"bd\").unit(\"c\").osc()\n * @superdirtOnly\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1714,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Used in conjunction with <code>speed</code>, accepts values of &quot;r&quot; (rate, default behavior), &quot;c&quot; (cycles), or &quot;s&quot; (seconds). Using <code>unit &quot;c&quot;</code> means <code>speed</code> will be interpreted in units of cycles, e.g. <code>speed &quot;1&quot;</code> means samples will be stretched to fill a cycle. Using <code>unit &quot;s&quot;</code> means the playback speed will be adjusted so that the duration is the number of seconds specified by <code>speed</code>.</p>",
      "name": "unit",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "string",
              "Pattern"
            ]
          },
          "description": "<p>see description above</p>",
          "name": "unit"
        }
      ],
      "examples": [
        "speed(\"1 2 .5 3\").s(\"bd\").unit(\"c\").osc()"
      ],
      "tags": [
        {
          "originalTitle": "superdirtOnly",
          "title": "superdirtonly",
          "text": ""
        }
      ],
      "longname": "unit",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Made by Calum Gunn. Reminiscent of some weird mixture of filter, ring-modulator and pitch-shifter. The SuperCollider manual defines Squiz as:\n *\n * \"A simplistic pitch-raising algorithm. It's not meant to sound natural; its sound is reminiscent of some weird mixture of filter, ring-modulator and pitch-shifter, depending on the input. The algorithm works by cutting the signal into fragments (delimited by upwards-going zero-crossings) and squeezing those fragments in the time domain (i.e. simply playing them back faster than they came in), leaving silences inbetween. All the parameters apart from memlen can be modulated.\"\n *\n * @name squiz\n * @param {number | Pattern} squiz Try passing multiples of 2 to it - 2, 4, 8 etc.\n * @example\n * squiz(\"2 4/2 6 [8 16]\").s(\"bd\").osc()\n * @superdirtOnly\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1726,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Made by Calum Gunn. Reminiscent of some weird mixture of filter, ring-modulator and pitch-shifter. The SuperCollider manual defines Squiz as:</p>\n<p>&quot;A simplistic pitch-raising algorithm. It's not meant to sound natural; its sound is reminiscent of some weird mixture of filter, ring-modulator and pitch-shifter, depending on the input. The algorithm works by cutting the signal into fragments (delimited by upwards-going zero-crossings) and squeezing those fragments in the time domain (i.e. simply playing them back faster than they came in), leaving silences inbetween. All the parameters apart from memlen can be modulated.&quot;</p>",
      "name": "squiz",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>Try passing multiples of 2 to it - 2, 4, 8 etc.</p>",
          "name": "squiz"
        }
      ],
      "examples": [
        "squiz(\"2 4/2 6 [8 16]\").s(\"bd\").osc()"
      ],
      "tags": [
        {
          "originalTitle": "superdirtOnly",
          "title": "superdirtonly",
          "text": ""
        }
      ],
      "longname": "squiz",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n *\n * Formant filter to make things sound like vowels.\n *\n * @name vowel\n * @param {string | Pattern} vowel You can use a e i o u ae aa oe ue y uh un en an on, corresponding to [a] [e] [i] [o] [u] [æ] [ɑ] [ø] [y] [ɯ] [ʌ] [œ̃] [ɛ̃] [ɑ̃] [ɔ̃]. Aliases: aa = å = ɑ, oe = ø = ö, y = ı, ae = æ.\n * @example\n * note(\"[c2 <eb2 <g2 g1>>]*2\").s('sawtooth')\n * .vowel(\"<a e i <o u>>\")\n * @example\n * s(\"bd sd mt ht bd [~ cp] ht lt\").vowel(\"[a|e|i|o|u]\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1751,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Formant filter to make things sound like vowels.</p>",
      "name": "vowel",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "Pattern"
            ]
          },
          "description": "<p>You can use a e i o u ae aa oe ue y uh un en an on, corresponding to [a] [e] [i] [o] [u] [æ] [ɑ] [ø] [y] [ɯ] [ʌ] [œ̃] [ɛ̃] [ɑ̃] [ɔ̃]. Aliases: aa = å = ɑ, oe = ø = ö, y = ı, ae = æ.</p>",
          "name": "vowel"
        }
      ],
      "examples": [
        "note(\"[c2 <eb2 <g2 g1>>]*2\").s('sawtooth')\n.vowel(\"<a e i <o u>>\")",
        "s(\"bd sd mt ht bd [~ cp] ht lt\").vowel(\"[a|e|i|o|u]\")"
      ],
      "longname": "vowel",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Noise crackle density\n *\n * @name density\n * @param {number | Pattern} density between 0 and x\n * @example\n * s(\"crackle*4\").density(\"<0.01 0.04 0.2 0.5>\".slow(4))\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1776,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Noise crackle density</p>",
      "name": "density",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>between 0 and x</p>",
          "name": "density"
        }
      ],
      "examples": [
        "s(\"crackle*4\").density(\"<0.01 0.04 0.2 0.5>\".slow(4))"
      ],
      "longname": "density",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Multiplies the duration with the given number. Also cuts samples off at the end if they exceed the duration.\n *\n * @name clip\n * @synonyms legato\n * @param {number | Pattern} factor >= 0\n * @example\n * note(\"c a f e\").s(\"piano\").clip(\"<.5 1 2>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1826,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Multiplies the duration with the given number. Also cuts samples off at the end if they exceed the duration.</p>",
      "name": "clip",
      "synonyms_text": "legato",
      "synonyms": [
        "legato"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<blockquote>\n<p>= 0</p>\n</blockquote>",
          "name": "factor"
        }
      ],
      "examples": [
        "note(\"c a f e\").s(\"piano\").clip(\"<.5 1 2>\")"
      ],
      "longname": "clip",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the duration of the event in cycles. Similar to clip / legato, it also cuts samples off at the end if they exceed the duration.\n *\n * @name duration\n * @synonyms dur\n * @param {number | Pattern} seconds >= 0\n * @example\n * note(\"c a f e\").s(\"piano\").dur(\"<.5 1 2>\")\n *\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1838,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the duration of the event in cycles. Similar to clip / legato, it also cuts samples off at the end if they exceed the duration.</p>",
      "name": "duration",
      "synonyms_text": "dur",
      "synonyms": [
        "dur"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<blockquote>\n<p>= 0</p>\n</blockquote>",
          "name": "seconds"
        }
      ],
      "examples": [
        "note(\"c a f e\").s(\"piano\").dur(\"<.5 1 2>\")"
      ],
      "longname": "duration",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets the color of the hap in visualizations like pianoroll or highlighting.\n * @name color\n * @synonyms colour\n * @param {string} color Hexadecimal or CSS color name\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1867,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets the color of the hap in visualizations like pianoroll or highlighting.</p>",
      "name": "color",
      "synonyms_text": "colour",
      "synonyms": [
        "colour"
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>Hexadecimal or CSS color name</p>",
          "name": "color"
        }
      ],
      "longname": "color",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * ADSR envelope: Combination of Attack, Decay, Sustain, and Release.\n *\n * @name adsr\n * @param {number | Pattern} time attack time in seconds\n * @param {number | Pattern} time decay time in seconds\n * @param {number | Pattern} gain sustain level (0 to 1)\n * @param {number | Pattern} time release time in seconds\n * @example\n * note(\"[c3 bb2 f3 eb3]*2\").sound(\"sawtooth\").lpf(600).adsr(\".1:.1:.5:.2\")\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1880,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>ADSR envelope: Combination of Attack, Decay, Sustain, and Release.</p>",
      "name": "adsr",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>attack time in seconds</p>",
          "name": "time"
        },
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>decay time in seconds</p>",
          "name": "time"
        },
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>sustain level (0 to 1)</p>",
          "name": "gain"
        },
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>release time in seconds</p>",
          "name": "time"
        }
      ],
      "examples": [
        "note(\"[c3 bb2 f3 eb3]*2\").sound(\"sawtooth\").lpf(600).adsr(\".1:.1:.5:.2\")"
      ],
      "longname": "adsr",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * MIDI channel: Sets the MIDI channel for the event.\n *\n * @name midichan\n * @param {number | Pattern} channel MIDI channel number (0-15)\n * @example\n * note(\"c4\").midichan(1).midi()\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1914,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>MIDI channel: Sets the MIDI channel for the event.</p>",
      "name": "midichan",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>MIDI channel number (0-15)</p>",
          "name": "channel"
        }
      ],
      "examples": [
        "note(\"c4\").midichan(1).midi()"
      ],
      "longname": "midichan",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * MIDI port: Sets the MIDI port for the event.\n *\n * @name midiport\n * @param {number | Pattern} port MIDI port\n * @example\n * note(\"c a f e\").midiport(\"<0 1 2 3>\").midi()\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1926,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>MIDI port: Sets the MIDI port for the event.</p>",
      "name": "midiport",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>MIDI port</p>",
          "name": "port"
        }
      ],
      "examples": [
        "note(\"c a f e\").midiport(\"<0 1 2 3>\").midi()"
      ],
      "longname": "midiport",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * MIDI command: Sends a MIDI command message.\n *\n * @name midicmd\n * @param {number | Pattern} command MIDI command\n * @example\n * midicmd(\"clock*48,<start stop>/2\").midi()\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1936,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>MIDI command: Sends a MIDI command message.</p>",
      "name": "midicmd",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>MIDI command</p>",
          "name": "command"
        }
      ],
      "examples": [
        "midicmd(\"clock*48,<start stop>/2\").midi()"
      ],
      "longname": "midicmd",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * MIDI control: Sends a MIDI control change message.\n *\n * @name control\n * @param {number | Pattern}  MIDI control number (0-127)\n * @param {number | Pattern}  MIDI controller value (0-127)\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1946,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>MIDI control: Sends a MIDI control change message.</p>",
      "name": "control",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>control number (0-127)</p>",
          "name": "MIDI"
        },
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>controller value (0-127)</p>",
          "name": "MIDI"
        }
      ],
      "longname": "control",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * MIDI control number: Sends a MIDI control change message.\n *\n * @name ccn\n * @param {number | Pattern}  MIDI control number (0-127)\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1961,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>MIDI control number: Sends a MIDI control change message.</p>",
      "name": "ccn",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>control number (0-127)</p>",
          "name": "MIDI"
        }
      ],
      "longname": "ccn",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * MIDI control value: Sends a MIDI control change message.\n *\n * @name ccv\n * @param {number | Pattern}  MIDI control value (0-127)\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1968,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>MIDI control value: Sends a MIDI control change message.</p>",
      "name": "ccv",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>control value (0-127)</p>",
          "name": "MIDI"
        }
      ],
      "longname": "ccv",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * MIDI NRPN non-registered parameter number: Sends a MIDI NRPN non-registered parameter number message.\n * @name nrpnn\n * @param {number | Pattern} nrpnn MIDI NRPN non-registered parameter number (0-127)\n * @example\n * note(\"c4\").nrpnn(\"1:8\").nrpv(\"123\").midichan(1).midi()\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1978,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>MIDI NRPN non-registered parameter number: Sends a MIDI NRPN non-registered parameter number message.</p>",
      "name": "nrpnn",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>MIDI NRPN non-registered parameter number (0-127)</p>",
          "name": "nrpnn"
        }
      ],
      "examples": [
        "note(\"c4\").nrpnn(\"1:8\").nrpv(\"123\").midichan(1).midi()"
      ],
      "longname": "nrpnn",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * MIDI NRPN non-registered parameter value: Sends a MIDI NRPN non-registered parameter value message.\n * @name nrpv\n * @param {number | Pattern} nrpv MIDI NRPN non-registered parameter value (0-127)\n * @example\n * note(\"c4\").nrpnn(\"1:8\").nrpv(\"123\").midichan(1).midi()\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1986,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>MIDI NRPN non-registered parameter value: Sends a MIDI NRPN non-registered parameter value message.</p>",
      "name": "nrpv",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>MIDI NRPN non-registered parameter value (0-127)</p>",
          "name": "nrpv"
        }
      ],
      "examples": [
        "note(\"c4\").nrpnn(\"1:8\").nrpv(\"123\").midichan(1).midi()"
      ],
      "longname": "nrpv",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * MIDI program number: Sends a MIDI program change message.\n *\n * @name progNum\n * @param {number | Pattern} program MIDI program number (0-127)\n * @example\n * note(\"c4\").progNum(10).midichan(1).midi()\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 1995,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>MIDI program number: Sends a MIDI program change message.</p>",
      "name": "progNum",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>MIDI program number (0-127)</p>",
          "name": "program"
        }
      ],
      "examples": [
        "note(\"c4\").progNum(10).midichan(1).midi()"
      ],
      "longname": "progNum",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * MIDI sysex: Sends a MIDI sysex message.\n * @name sysex\n * @param {number | Pattern} id Sysex ID\n * @param {number | Pattern} data Sysex data\n * @example\n * note(\"c4\").sysex([\"0x77\", \"0x01:0x02:0x03:0x04\"]).midichan(1).midi()\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 2005,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>MIDI sysex: Sends a MIDI sysex message.</p>",
      "name": "sysex",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>Sysex ID</p>",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>Sysex data</p>",
          "name": "data"
        }
      ],
      "examples": [
        "note(\"c4\").sysex([\"0x77\", \"0x01:0x02:0x03:0x04\"]).midichan(1).midi()"
      ],
      "longname": "sysex",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * MIDI sysex ID: Sends a MIDI sysex identifier message.\n * @name sysexid\n * @param {number | Pattern} id Sysex ID\n * @example\n * note(\"c4\").sysexid(\"0x77\").sysexdata(\"0x01:0x02:0x03:0x04\").midichan(1).midi()\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 2020,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>MIDI sysex ID: Sends a MIDI sysex identifier message.</p>",
      "name": "sysexid",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>Sysex ID</p>",
          "name": "id"
        }
      ],
      "examples": [
        "note(\"c4\").sysexid(\"0x77\").sysexdata(\"0x01:0x02:0x03:0x04\").midichan(1).midi()"
      ],
      "longname": "sysexid",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * MIDI sysex data: Sends a MIDI sysex message.\n * @name sysexdata\n * @param {number | Pattern} data Sysex data\n * @example\n * note(\"c4\").sysexid(\"0x77\").sysexdata(\"0x01:0x02:0x03:0x04\").midichan(1).midi()\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 2028,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>MIDI sysex data: Sends a MIDI sysex message.</p>",
      "name": "sysexdata",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>Sysex data</p>",
          "name": "data"
        }
      ],
      "examples": [
        "note(\"c4\").sysexid(\"0x77\").sysexdata(\"0x01:0x02:0x03:0x04\").midichan(1).midi()"
      ],
      "longname": "sysexdata",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * MIDI pitch bend: Sends a MIDI pitch bend message.\n * @name midibend\n * @param {number | Pattern} midibend MIDI pitch bend (-1 - 1)\n * @example\n * note(\"c4\").midibend(sine.slow(4).range(-0.4,0.4)).midi()\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 2037,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>MIDI pitch bend: Sends a MIDI pitch bend message.</p>",
      "name": "midibend",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>MIDI pitch bend (-1 - 1)</p>",
          "name": "midibend"
        }
      ],
      "examples": [
        "note(\"c4\").midibend(sine.slow(4).range(-0.4,0.4)).midi()"
      ],
      "longname": "midibend",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * MIDI key after touch: Sends a MIDI key after touch message.\n * @name miditouch\n * @param {number | Pattern} miditouch MIDI key after touch (0-1)\n * @example\n * note(\"c4\").miditouch(sine.slow(4).range(0,1)).midi()\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 2045,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>MIDI key after touch: Sends a MIDI key after touch message.</p>",
      "name": "miditouch",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>MIDI key after touch (0-1)</p>",
          "name": "miditouch"
        }
      ],
      "examples": [
        "note(\"c4\").miditouch(sine.slow(4).range(0,1)).midi()"
      ],
      "longname": "miditouch",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sets properties in a batch.\n *\n * @name as\n * @param {String | Array} mapping the control names that are set\n * @example\n * \"c:.5 a:1 f:.25 e:.8\".as(\"note:clip\")\n * @example\n * \"{0@2 0.25 0 0.5 .3 .5}%8\".as(\"begin\").s(\"sax_vib\").clip(1)\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 2064,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Sets properties in a batch.</p>",
      "name": "as",
      "params": [
        {
          "type": {
            "names": [
              "String",
              "Array"
            ]
          },
          "description": "<p>the control names that are set</p>",
          "name": "mapping"
        }
      ],
      "examples": [
        "\"c:.5 a:1 f:.25 e:.8\".as(\"note:clip\")",
        "\"{0@2 0.25 0 0.5 .3 .5}%8\".as(\"begin\").s(\"sax_vib\").clip(1)"
      ],
      "longname": "as",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Allows you to scrub an audio file like a tape loop by passing values that represents the position in the audio file\n * in the optional array syntax ex: \"0.5:2\", the second value controls the speed of playback\n * @name scrub\n * @memberof Pattern\n * @returns Pattern\n * @example\n * samples('github:switchangel/pad')\n * s(\"swpad:0\").scrub(\"{0.1!2 .25@3 0.7!2 <0.8:1.5>}%8\")\n * @example\n * samples('github:yaxu/clean-breaks/main');\n * s(\"amen/4\").fit().scrub(\"{0@3 0@2 4@3}%8\".div(16))\n */",
      "meta": {
        "filename": "controls.mjs",
        "lineno": 2083,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Allows you to scrub an audio file like a tape loop by passing values that represents the position in the audio file\nin the optional array syntax ex: &quot;0.5:2&quot;, the second value controls the speed of playback</p>",
      "name": "scrub",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "samples('github:switchangel/pad')\ns(\"swpad:0\").scrub(\"{0.1!2 .25@3 0.7!2 <0.8:1.5>}%8\")",
        "samples('github:yaxu/clean-breaks/main');\ns(\"amen/4\").fit().scrub(\"{0@3 0@2 4@3}%8\".div(16))"
      ],
      "scope": "static",
      "longname": "Pattern.scrub",
      "kind": "member"
    },
    {
      "comment": "/**\n * Intended for a debugging, drawLine renders the pattern as a string, where each character represents the same time span.\n * Should only be used with single characters as values, otherwise the character slots will be messed up.\n * Character legend:\n *\n * - \"|\" cycle separator\n * - \"-\" hold previous value\n * - \".\" silence\n *\n * @param {Pattern} pattern the pattern to use\n * @param {number} chars max number of characters (approximately)\n * @returns string\n * @example\n * const line = drawLine(\"0 [1 2 3]\", 10); // |0--123|0--123\n * console.log(line);\n * silence;\n */",
      "meta": {
        "range": [
          1426,
          2796
        ],
        "filename": "drawLine.mjs",
        "lineno": 26,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100020200",
          "name": "drawLine",
          "type": "FunctionDeclaration",
          "paramnames": [
            "pat",
            "chars"
          ]
        },
        "vars": {
          "cycle": "drawLine~cycle",
          "pos": "drawLine~pos",
          "lines": "drawLine~lines",
          "emptyLine": "drawLine~emptyLine",
          "haps": "drawLine~haps",
          "durations": "drawLine~durations",
          "": null,
          "charFraction": "drawLine~charFraction",
          "totalSlots": "drawLine~totalSlots",
          "i": "drawLine~i",
          "undefined": null,
          "matches": "drawLine~matches",
          "missingLines": "drawLine~missingLines"
        }
      },
      "description": "<p>Intended for a debugging, drawLine renders the pattern as a string, where each character represents the same time span.\nShould only be used with single characters as values, otherwise the character slots will be messed up.\nCharacter legend:</p>\n<ul>\n<li>&quot;|&quot; cycle separator</li>\n<li>&quot;-&quot; hold previous value</li>\n<li>&quot;.&quot; silence</li>\n</ul>",
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "description": "<p>the pattern to use</p>",
          "name": "pattern"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>max number of characters (approximately)</p>",
          "name": "chars"
        }
      ],
      "returns": [
        {
          "description": "<p>string</p>"
        }
      ],
      "examples": [
        "const line = drawLine(\"0 [1 2 3]\", 10); // |0--123|0--123\nconsole.log(line);\nsilence;"
      ],
      "name": "drawLine",
      "longname": "drawLine",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/**\n * Changes the structure of the pattern to form an Euclidean rhythm.\n * Euclidean rhythms are rhythms obtained using the greatest common\n * divisor of two numbers.  They were described in 2004 by Godfried\n * Toussaint, a Canadian computer scientist.  Euclidean rhythms are\n * really useful for computer/algorithmic music because they can\n * describe a large number of rhythms with a couple of numbers.\n *\n * @memberof Pattern\n * @name euclid\n * @param {number} pulses the number of onsets/beats\n * @param {number} steps the number of steps to fill\n * @returns Pattern\n * @example\n * // The Cuban tresillo pattern.\n * note(\"c3\").euclid(3,8)\n */",
      "meta": {
        "filename": "euclid.mjs",
        "lineno": 54,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Changes the structure of the pattern to form an Euclidean rhythm.\nEuclidean rhythms are rhythms obtained using the greatest common\ndivisor of two numbers.  They were described in 2004 by Godfried\nToussaint, a Canadian computer scientist.  Euclidean rhythms are\nreally useful for computer/algorithmic music because they can\ndescribe a large number of rhythms with a couple of numbers.</p>",
      "memberof": "Pattern",
      "name": "euclid",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>the number of onsets/beats</p>",
          "name": "pulses"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>the number of steps to fill</p>",
          "name": "steps"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "// The Cuban tresillo pattern.\nnote(\"c3\").euclid(3,8)"
      ],
      "scope": "static",
      "longname": "Pattern.euclid",
      "kind": "member"
    },
    {
      "comment": "/**\n * Like `euclid`, but has an additional parameter for 'rotating' the resulting sequence.\n * @memberof Pattern\n * @name euclidRot\n * @param {number} pulses the number of onsets/beats\n * @param {number} steps the number of steps to fill\n * @param {number} rotation offset in steps\n * @returns Pattern\n * @example\n * // A Samba rhythm necklace from Brazil\n * note(\"c3\").euclidRot(3,16,14)\n */",
      "meta": {
        "filename": "euclid.mjs",
        "lineno": 72,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Like <code>euclid</code>, but has an additional parameter for 'rotating' the resulting sequence.</p>",
      "memberof": "Pattern",
      "name": "euclidRot",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>the number of onsets/beats</p>",
          "name": "pulses"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>the number of steps to fill</p>",
          "name": "steps"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>offset in steps</p>",
          "name": "rotation"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "// A Samba rhythm necklace from Brazil\nnote(\"c3\").euclidRot(3,16,14)"
      ],
      "scope": "static",
      "longname": "Pattern.euclidRot",
      "kind": "member"
    },
    {
      "comment": "/**\n * @example // A thirteenth-century Persian rhythm called Khafif-e-ramal.\n * note(\"c3\").euclid(2,5)\n * @example // The archetypal pattern of the Cumbia from Colombia, as well as a Calypso rhythm from Trinidad.\n * note(\"c3\").euclid(3,4)\n * @example // Another thirteenth century Persian rhythm by the name of Khafif-e-ramal, as well as a Rumanian folk-dance rhythm.\n * note(\"c3\").euclidRot(3,5,2)\n * @example // A Ruchenitza rhythm used in a Bulgarian folk dance.\n * note(\"c3\").euclid(3,7)\n * @example // The Cuban tresillo pattern.\n * note(\"c3\").euclid(3,8)\n * @example // Another Ruchenitza Bulgarian folk-dance rhythm.\n * note(\"c3\").euclid(4,7)\n * @example // The Aksak rhythm of Turkey.\n * note(\"c3\").euclid(4,9)\n * @example // The metric pattern used by Frank Zappa in his piece titled Outside Now.\n * note(\"c3\").euclid(4,11)\n * @example // Yields the York-Samai pattern, a popular Arab rhythm.\n * note(\"c3\").euclid(5,6)\n * @example // The Nawakhat pattern, another popular Arab rhythm.\n * note(\"c3\").euclid(5,7)\n * @example // The Cuban cinquillo pattern.\n * note(\"c3\").euclid(5,8)\n * @example // A popular Arab rhythm called Agsag-Samai.\n * note(\"c3\").euclid(5,9)\n * @example // The metric pattern used by Moussorgsky in Pictures at an Exhibition.\n * note(\"c3\").euclid(5,11)\n * @example // The Venda clapping pattern of a South African children’s song.\n * note(\"c3\").euclid(5,12)\n * @example // The Bossa-Nova rhythm necklace of Brazil.\n * note(\"c3\").euclid(5,16)\n * @example // A typical rhythm played on the Bendir (frame drum).\n * note(\"c3\").euclid(7,8)\n * @example // A common West African bell pattern.\n * note(\"c3\").euclid(7,12)\n * @example // A Samba rhythm necklace from Brazil.\n * note(\"c3\").euclidRot(7,16,14)\n * @example // A rhythm necklace used in the Central African Republic.\n * note(\"c3\").euclid(9,16)\n * @example // A rhythm necklace of the Aka Pygmies of Central Africa.\n * note(\"c3\").euclidRot(11,24,14)\n * @example // Another rhythm necklace of the Aka Pygmies of the upper Sangha.\n * note(\"c3\").euclidRot(13,24,5)\n */",
      "meta": {
        "range": [
          5307,
          5459
        ],
        "filename": "euclid.mjs",
        "lineno": 130,
        "columnno": 6,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100020705",
          "name": "_euclidRot",
          "type": "FunctionExpression"
        },
        "vars": {
          "b": "_euclidRot~b"
        }
      },
      "examples": [
        "// A thirteenth-century Persian rhythm called Khafif-e-ramal.\nnote(\"c3\").euclid(2,5)",
        "// The archetypal pattern of the Cumbia from Colombia, as well as a Calypso rhythm from Trinidad.\nnote(\"c3\").euclid(3,4)",
        "// Another thirteenth century Persian rhythm by the name of Khafif-e-ramal, as well as a Rumanian folk-dance rhythm.\nnote(\"c3\").euclidRot(3,5,2)",
        "// A Ruchenitza rhythm used in a Bulgarian folk dance.\nnote(\"c3\").euclid(3,7)",
        "// The Cuban tresillo pattern.\nnote(\"c3\").euclid(3,8)",
        "// Another Ruchenitza Bulgarian folk-dance rhythm.\nnote(\"c3\").euclid(4,7)",
        "// The Aksak rhythm of Turkey.\nnote(\"c3\").euclid(4,9)",
        "// The metric pattern used by Frank Zappa in his piece titled Outside Now.\nnote(\"c3\").euclid(4,11)",
        "// Yields the York-Samai pattern, a popular Arab rhythm.\nnote(\"c3\").euclid(5,6)",
        "// The Nawakhat pattern, another popular Arab rhythm.\nnote(\"c3\").euclid(5,7)",
        "// The Cuban cinquillo pattern.\nnote(\"c3\").euclid(5,8)",
        "// A popular Arab rhythm called Agsag-Samai.\nnote(\"c3\").euclid(5,9)",
        "// The metric pattern used by Moussorgsky in Pictures at an Exhibition.\nnote(\"c3\").euclid(5,11)",
        "// The Venda clapping pattern of a South African children’s song.\nnote(\"c3\").euclid(5,12)",
        "// The Bossa-Nova rhythm necklace of Brazil.\nnote(\"c3\").euclid(5,16)",
        "// A typical rhythm played on the Bendir (frame drum).\nnote(\"c3\").euclid(7,8)",
        "// A common West African bell pattern.\nnote(\"c3\").euclid(7,12)",
        "// A Samba rhythm necklace from Brazil.\nnote(\"c3\").euclidRot(7,16,14)",
        "// A rhythm necklace used in the Central African Republic.\nnote(\"c3\").euclid(9,16)",
        "// A rhythm necklace of the Aka Pygmies of Central Africa.\nnote(\"c3\").euclidRot(11,24,14)",
        "// Another rhythm necklace of the Aka Pygmies of the upper Sangha.\nnote(\"c3\").euclidRot(13,24,5)"
      ],
      "name": "_euclidRot",
      "longname": "_euclidRot",
      "kind": "function",
      "scope": "global",
      "params": []
    },
    {
      "comment": "/**\n * Similar to `euclid`, but each pulse is held until the next pulse,\n * so there will be no gaps.\n * @name euclidLegato\n * @memberof Pattern\n * @param {number} pulses the number of onsets/beats\n * @param {number} steps the number of steps to fill\n * @param rotation offset in steps\n * @param pat\n * @example\n * note(\"c3\").euclidLegato(3,8)\n */",
      "meta": {
        "filename": "euclid.mjs",
        "lineno": 154,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Similar to <code>euclid</code>, but each pulse is held until the next pulse,\nso there will be no gaps.</p>",
      "name": "euclidLegato",
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>the number of onsets/beats</p>",
          "name": "pulses"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>the number of steps to fill</p>",
          "name": "steps"
        },
        {
          "description": "<p>offset in steps</p>",
          "name": "rotation"
        },
        {
          "name": "pat"
        }
      ],
      "examples": [
        "note(\"c3\").euclidLegato(3,8)"
      ],
      "scope": "static",
      "longname": "Pattern.euclidLegato",
      "kind": "member"
    },
    {
      "comment": "/**\n * Similar to `euclid`, but each pulse is held until the next pulse,\n * so there will be no gaps, and has an additional parameter for 'rotating'\n * the resulting sequence\n * @name euclidLegatoRot\n * @memberof Pattern\n * @param {number} pulses the number of onsets/beats\n * @param {number} steps the number of steps to fill\n * @param {number} rotation offset in steps\n * @example\n * note(\"c3\").euclidLegatoRot(3,5,2)\n */",
      "meta": {
        "filename": "euclid.mjs",
        "lineno": 184,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Similar to <code>euclid</code>, but each pulse is held until the next pulse,\nso there will be no gaps, and has an additional parameter for 'rotating'\nthe resulting sequence</p>",
      "name": "euclidLegatoRot",
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>the number of onsets/beats</p>",
          "name": "pulses"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>the number of steps to fill</p>",
          "name": "steps"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>offset in steps</p>",
          "name": "rotation"
        }
      ],
      "examples": [
        "note(\"c3\").euclidLegatoRot(3,5,2)"
      ],
      "scope": "static",
      "longname": "Pattern.euclidLegatoRot",
      "kind": "member"
    },
    {
      "comment": "/**\n * A 'euclid' variant with an additional parameter that morphs the resulting\n * rhythm from 0 (no morphing) to 1 (completely 'even'). For example\n * `sound(\"bd\").euclidish(3,8,0)` would be the same as\n * `sound(\"bd\").euclid(3,8)`, and `sound(\"bd\").euclidish(3,8,1)` would be the\n * same as `sound(\"bd bd bd\")`. `sound(\"bd\").euclidish(3,8,0.5)` would have a\n * groove somewhere between.\n * Inspired by the work of Malcom Braff.\n * @name euclidish\n * @synonyms eish\n * @memberof Pattern\n * @param {number} pulses the number of onsets\n * @param {number} steps the number of steps to fill\n * @param {number} groove exists between the extremes of 0 (straight euclidian) and 1 (straight pulse)\n * @example\n * sound(\"hh\").euclidish(7,12,sine.slow(8))\n * .pan(sine.slow(8))\n */",
      "meta": {
        "filename": "euclid.mjs",
        "lineno": 200,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>A 'euclid' variant with an additional parameter that morphs the resulting\nrhythm from 0 (no morphing) to 1 (completely 'even'). For example\n<code>sound(&quot;bd&quot;).euclidish(3,8,0)</code> would be the same as\n<code>sound(&quot;bd&quot;).euclid(3,8)</code>, and <code>sound(&quot;bd&quot;).euclidish(3,8,1)</code> would be the\nsame as <code>sound(&quot;bd bd bd&quot;)</code>. <code>sound(&quot;bd&quot;).euclidish(3,8,0.5)</code> would have a\ngroove somewhere between.\nInspired by the work of Malcom Braff.</p>",
      "name": "euclidish",
      "synonyms_text": "eish",
      "synonyms": [
        "eish"
      ],
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>the number of onsets</p>",
          "name": "pulses"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>the number of steps to fill</p>",
          "name": "steps"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>exists between the extremes of 0 (straight euclidian) and 1 (straight pulse)</p>",
          "name": "groove"
        }
      ],
      "examples": [
        "sound(\"hh\").euclidish(7,12,sine.slow(8))\n.pan(sine.slow(8))"
      ],
      "scope": "static",
      "longname": "Pattern.euclidish",
      "kind": "member"
    },
    {
      "comment": "/** @class Class representing a pattern. */",
      "meta": {
        "range": [
          1701,
          27939
        ],
        "filename": "pattern.mjs",
        "lineno": 44,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100023297",
          "name": "exports.Pattern",
          "type": "ClassDeclaration"
        }
      },
      "name": "Pattern",
      "longname": "Pattern",
      "kind": "class",
      "classdesc": "<p>Class representing a pattern.</p>",
      "scope": "global",
      "description": "<p>Create a pattern. As an end user, you will most likely not create a Pattern directly.</p>",
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>The function that maps a <code>State</code> to an array of <code>Hap</code>.</p>",
          "name": "query"
        }
      ]
    },
    {
      "comment": "/**\n   * Returns a new pattern, with the function applied to the value of\n   * each hap. It has the alias `fmap`.\n   * @synonyms fmap\n   * @param {Function} func to to apply to the value\n   * @returns Pattern\n   * @example\n   * \"0 1 2\".withValue(v => v + 10).log()\n   */",
      "meta": {
        "range": [
          3008,
          3177
        ],
        "filename": "pattern.mjs",
        "lineno": 93,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100023405",
          "name": "Pattern#withValue",
          "type": "MethodDefinition",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns a new pattern, with the function applied to the value of\neach hap. It has the alias <code>fmap</code>.</p>",
      "synonyms_text": "fmap",
      "synonyms": [
        "fmap"
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>to to apply to the value</p>",
          "name": "func"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "\"0 1 2\".withValue(v => v + 10).log()"
      ],
      "name": "withValue",
      "longname": "Pattern#withValue",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * see `withValue`\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          3380,
          3429
        ],
        "filename": "pattern.mjs",
        "lineno": 111,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100023462",
          "name": "Pattern#fmap",
          "type": "MethodDefinition",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>see <code>withValue</code></p>",
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "fmap",
      "longname": "Pattern#fmap",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/**\n   * Assumes 'this' is a pattern of functions, and given a function to\n   * resolve wholes, applies a given pattern of values to that\n   * pattern of functions.\n   * @param {Function} whole_func\n   * @param {Function} func\n   * @noAutocomplete\n   * @returns Pattern\n   */",
      "meta": {
        "range": [
          3711,
          4453
        ],
        "filename": "pattern.mjs",
        "lineno": 124,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100023473",
          "name": "Pattern#appWhole",
          "type": "MethodDefinition",
          "paramnames": [
            "whole_func",
            "pat_val"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Assumes 'this' is a pattern of functions, and given a function to\nresolve wholes, applies a given pattern of values to that\npattern of functions.</p>",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "whole_func"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "func"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "name": "appWhole",
      "longname": "Pattern#appWhole",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * When this method is called on a pattern of functions, it matches its haps\n   * with those in the given pattern of values.  A new pattern is returned, with\n   * each matching value applied to the corresponding function.\n   *\n   * In this `_appBoth` variant, where timespans of the function and value haps\n   * are not the same but do intersect, the resulting hap has a timespan of the\n   * intersection. This applies to both the part and the whole timespan.\n   * @param {Pattern} pat_val\n   * @noAutocomplete\n   * @returns Pattern\n   */",
      "meta": {
        "range": [
          5004,
          5428
        ],
        "filename": "pattern.mjs",
        "lineno": 160,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100023580",
          "name": "Pattern#appBoth",
          "type": "MethodDefinition",
          "paramnames": [
            "pat_val"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>When this method is called on a pattern of functions, it matches its haps\nwith those in the given pattern of values.  A new pattern is returned, with\neach matching value applied to the corresponding function.</p>\n<p>In this <code>_appBoth</code> variant, where timespans of the function and value haps\nare not the same but do intersect, the resulting hap has a timespan of the\nintersection. This applies to both the part and the whole timespan.</p>",
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "pat_val"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "name": "appBoth",
      "longname": "Pattern#appBoth",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * As with `appBoth`, but the `whole` timespan is not the intersection,\n   * but the timespan from the function of patterns that this method is called\n   * on. In practice, this means that the pattern structure, including onsets,\n   * are preserved from the pattern of functions (often referred to as the left\n   * hand or inner pattern).\n   * @param {Pattern} pat_val\n   * @noAutocomplete\n   * @returns Pattern\n   */",
      "meta": {
        "range": [
          5858,
          6662
        ],
        "filename": "pattern.mjs",
        "lineno": 187,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100023640",
          "name": "Pattern#appLeft",
          "type": "MethodDefinition",
          "paramnames": [
            "pat_val"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>As with <code>appBoth</code>, but the <code>whole</code> timespan is not the intersection,\nbut the timespan from the function of patterns that this method is called\non. In practice, this means that the pattern structure, including onsets,\nare preserved from the pattern of functions (often referred to as the left\nhand or inner pattern).</p>",
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "pat_val"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "name": "appLeft",
      "longname": "Pattern#appLeft",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * As with `appLeft`, but `whole` timespans are instead taken from the\n   * pattern of values, i.e. structure is preserved from the right hand/outer\n   * pattern.\n   * @param {Pattern} pat_val\n   * @noAutocomplete\n   * @returns Pattern\n   */",
      "meta": {
        "range": [
          6916,
          7724
        ],
        "filename": "pattern.mjs",
        "lineno": 220,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100023762",
          "name": "Pattern#appRight",
          "type": "MethodDefinition",
          "paramnames": [
            "pat_val"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>As with <code>appLeft</code>, but <code>whole</code> timespans are instead taken from the\npattern of values, i.e. structure is preserved from the right hand/outer\npattern.</p>",
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "pat_val"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "name": "appRight",
      "longname": "Pattern#appRight",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * Query haps inside the given time span.\n   *\n   * @param {Fraction | number} begin from time\n   * @param {Fraction | number} end to time\n   * @returns Hap[]\n   * @example\n   * const pattern = sequence('a', ['b', 'c'])\n   * const haps = pattern.queryArc(0, 1)\n   * console.log(haps)\n   * silence\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          13360,
          13576
        ],
        "filename": "pattern.mjs",
        "lineno": 416,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100024442",
          "name": "Pattern#queryArc",
          "type": "MethodDefinition",
          "paramnames": [
            "begin",
            "end",
            "controls"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Query haps inside the given time span.</p>",
      "params": [
        {
          "type": {
            "names": [
              "Fraction",
              "number"
            ]
          },
          "description": "<p>from time</p>",
          "name": "begin"
        },
        {
          "type": {
            "names": [
              "Fraction",
              "number"
            ]
          },
          "description": "<p>to time</p>",
          "name": "end"
        }
      ],
      "returns": [
        {
          "description": "<p>Hap[]</p>"
        }
      ],
      "examples": [
        "const pattern = sequence('a', ['b', 'c'])\nconst haps = pattern.queryArc(0, 1)\nconsole.log(haps)\nsilence"
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "queryArc",
      "longname": "Pattern#queryArc",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * Returns a new pattern, with queries split at cycle boundaries. This makes\n   * some calculations easier to express, as all haps are then constrained to\n   * happen within a cycle.\n   * @returns Pattern\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          13820,
          14020
        ],
        "filename": "pattern.mjs",
        "lineno": 432,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100024478",
          "name": "Pattern#splitQueries",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns a new pattern, with queries split at cycle boundaries. This makes\nsome calculations easier to express, as all haps are then constrained to\nhappen within a cycle.</p>",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "splitQueries",
      "longname": "Pattern#splitQueries",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/**\n   * Returns a new pattern, where the given function is applied to the query\n   * timespan before passing it to the original pattern.\n   * @param {Function} func the function to apply\n   * @returns Pattern\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          14263,
          14357
        ],
        "filename": "pattern.mjs",
        "lineno": 447,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100024518",
          "name": "Pattern#withQuerySpan",
          "type": "MethodDefinition",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns a new pattern, where the given function is applied to the query\ntimespan before passing it to the original pattern.</p>",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>the function to apply</p>",
          "name": "func"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "withQuerySpan",
      "longname": "Pattern#withQuerySpan",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * As with `withQuerySpan`, but the function is applied to both the\n   * begin and end time of the query timespan.\n   * @param {Function} func the function to apply\n   * @returns Pattern\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          14817,
          14936
        ],
        "filename": "pattern.mjs",
        "lineno": 469,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100024574",
          "name": "Pattern#withQueryTime",
          "type": "MethodDefinition",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>As with <code>withQuerySpan</code>, but the function is applied to both the\nbegin and end time of the query timespan.</p>",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>the function to apply</p>",
          "name": "func"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "withQueryTime",
      "longname": "Pattern#withQueryTime",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * Similar to `withQuerySpan`, but the function is applied to the timespans\n   * of all haps returned by pattern queries (both `part` timespans, and where\n   * present, `whole` timespans).\n   * @param {Function} func\n   * @returns Pattern\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          15214,
          15324
        ],
        "filename": "pattern.mjs",
        "lineno": 481,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100024599",
          "name": "Pattern#withHapSpan",
          "type": "MethodDefinition",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Similar to <code>withQuerySpan</code>, but the function is applied to the timespans\nof all haps returned by pattern queries (both <code>part</code> timespans, and where\npresent, <code>whole</code> timespans).</p>",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "func"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "withHapSpan",
      "longname": "Pattern#withHapSpan",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * As with `withHapSpan`, but the function is applied to both the\n   * begin and end time of the hap timespans.\n   * @param {Function} func the function to apply\n   * @returns Pattern\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          15547,
          15630
        ],
        "filename": "pattern.mjs",
        "lineno": 492,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100024624",
          "name": "Pattern#withHapTime",
          "type": "MethodDefinition",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>As with <code>withHapSpan</code>, but the function is applied to both the\nbegin and end time of the hap timespans.</p>",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>the function to apply</p>",
          "name": "func"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "withHapTime",
      "longname": "Pattern#withHapTime",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * Returns a new pattern with the given function applied to the list of haps returned by every query.\n   * @param {Function} func\n   * @returns Pattern\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          15821,
          15968
        ],
        "filename": "pattern.mjs",
        "lineno": 502,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100024641",
          "name": "Pattern#withHaps",
          "type": "MethodDefinition",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns a new pattern with the given function applied to the list of haps returned by every query.</p>",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "func"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "withHaps",
      "longname": "Pattern#withHaps",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * As with `withHaps`, but applies the function to every hap, rather than every list of haps.\n   * @param {Function} func\n   * @returns Pattern\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          16151,
          16222
        ],
        "filename": "pattern.mjs",
        "lineno": 514,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100024671",
          "name": "Pattern#withHap",
          "type": "MethodDefinition",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>As with <code>withHaps</code>, but applies the function to every hap, rather than every list of haps.</p>",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "func"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "withHap",
      "longname": "Pattern#withHap",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * Returns a new pattern with the context field set to every hap set to the given value.\n   * @param {*} context\n   * @returns Pattern\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          16396,
          16480
        ],
        "filename": "pattern.mjs",
        "lineno": 524,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100024688",
          "name": "Pattern#setContext",
          "type": "MethodDefinition",
          "paramnames": [
            "context"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns a new pattern with the context field set to every hap set to the given value.</p>",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "context"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "setContext",
      "longname": "Pattern#setContext",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * Returns a new pattern with the given function applied to the context field of every hap.\n   * @param {Function} func\n   * @returns Pattern\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          16661,
          16901
        ],
        "filename": "pattern.mjs",
        "lineno": 534,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100024705",
          "name": "Pattern#withContext",
          "type": "MethodDefinition",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns a new pattern with the given function applied to the context field of every hap.</p>",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "func"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "withContext",
      "longname": "Pattern#withContext",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * Returns a new pattern with the context field of every hap set to an empty object.\n   * @returns Pattern\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          17047,
          17121
        ],
        "filename": "pattern.mjs",
        "lineno": 548,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100024753",
          "name": "Pattern#stripContext",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns a new pattern with the context field of every hap set to an empty object.</p>",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "stripContext",
      "longname": "Pattern#stripContext",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/**\n   * Returns a new pattern with the given location information added to the\n   * context of every hap.\n   * @param {Number} start start offset\n   * @param {Number} end end offset\n   * @returns Pattern\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          17359,
          17726
        ],
        "filename": "pattern.mjs",
        "lineno": 560,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100024769",
          "name": "Pattern#withLoc",
          "type": "MethodDefinition",
          "paramnames": [
            "start",
            "end"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns a new pattern with the given location information added to the\ncontext of every hap.</p>",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "<p>start offset</p>",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "<p>end offset</p>",
          "name": "end"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "withLoc",
      "longname": "Pattern#withLoc",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * Returns a new Pattern, which only returns haps that meet the given test.\n   * @param {Function} hap_test - a function which returns false for haps to be removed from the pattern\n   * @returns Pattern\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          17968,
          18065
        ],
        "filename": "pattern.mjs",
        "lineno": 582,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100024833",
          "name": "Pattern#filterHaps",
          "type": "MethodDefinition",
          "paramnames": [
            "hap_test"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns a new Pattern, which only returns haps that meet the given test.</p>",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>a function which returns false for haps to be removed from the pattern</p>",
          "name": "hap_test"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "filterHaps",
      "longname": "Pattern#filterHaps",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * As with `filterHaps`, but the function is applied to values\n   * inside haps.\n   * @param {Function} value_test\n   * @returns Pattern\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          18241,
          18386
        ],
        "filename": "pattern.mjs",
        "lineno": 593,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100024852",
          "name": "Pattern#filterValues",
          "type": "MethodDefinition",
          "paramnames": [
            "value_test"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>As with <code>filterHaps</code>, but the function is applied to values\ninside haps.</p>",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "value_test"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "filterValues",
      "longname": "Pattern#filterValues",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * Returns a new pattern, with haps containing undefined values removed from\n   * query results.\n   * @returns Pattern\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          18544,
          18625
        ],
        "filename": "pattern.mjs",
        "lineno": 603,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100024883",
          "name": "Pattern#removeUndefineds",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns a new pattern, with haps containing undefined values removed from\nquery results.</p>",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "removeUndefineds",
      "longname": "Pattern#removeUndefineds",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/**\n   * Returns a new pattern, with all haps without onsets filtered out. A hap\n   * with an onset is one with a `whole` timespan that begins at the same time\n   * as its `part` timespan.\n   * @returns Pattern\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          18869,
          19134
        ],
        "filename": "pattern.mjs",
        "lineno": 614,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100024897",
          "name": "Pattern#onsetsOnly",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns a new pattern, with all haps without onsets filtered out. A hap\nwith an onset is one with a <code>whole</code> timespan that begins at the same time\nas its <code>part</code> timespan.</p>",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "onsetsOnly",
      "longname": "Pattern#onsetsOnly",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/**\n   * Returns a new pattern, with 'continuous' haps (those without 'whole'\n   * timespans) removed from query results.\n   * @returns Pattern\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          19311,
          19445
        ],
        "filename": "pattern.mjs",
        "lineno": 627,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100024912",
          "name": "Pattern#discreteOnly",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns a new pattern, with 'continuous' haps (those without 'whole'\ntimespans) removed from query results.</p>",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "discreteOnly",
      "longname": "Pattern#discreteOnly",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/**\n   * Combines adjacent haps with the same value and whole.  Only\n   * intended for use in tests.\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          19579,
          21024
        ],
        "filename": "pattern.mjs",
        "lineno": 637,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100024926",
          "name": "Pattern#defragmentHaps",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Combines adjacent haps with the same value and whole.  Only\nintended for use in tests.</p>",
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "defragmentHaps",
      "longname": "Pattern#defragmentHaps",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/**\n   * Queries the pattern for the first cycle, returning Haps. Mainly of use when\n   * debugging a pattern.\n   * @param {Boolean} with_context - set to true, otherwise the context field\n   * will be stripped from the resulting haps.\n   * @returns [Hap]\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          21313,
          21511
        ],
        "filename": "pattern.mjs",
        "lineno": 692,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100025157",
          "name": "Pattern#firstCycle",
          "type": "MethodDefinition",
          "paramnames": [
            "with_context"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Queries the pattern for the first cycle, returning Haps. Mainly of use when\ndebugging a pattern.</p>",
      "params": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "<p>set to true, otherwise the context field\nwill be stripped from the resulting haps.</p>",
          "name": "with_context",
          "defaultvalue": false
        }
      ],
      "returns": [
        {
          "description": "<p>[Hap]</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "firstCycle",
      "longname": "Pattern#firstCycle",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * Accessor for a list of values returned by querying the first cycle.\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          21621,
          21703
        ],
        "filename": "pattern.mjs",
        "lineno": 704,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100025194",
          "name": "Pattern#firstCycleValues",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Accessor for a list of values returned by querying the first cycle.</p>",
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "firstCycleValues",
      "longname": "Pattern#firstCycleValues",
      "kind": "member",
      "memberof": "Pattern",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/**\n   * More human-readable version of the `firstCycleValues` accessor.\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          21809,
          21972
        ],
        "filename": "pattern.mjs",
        "lineno": 712,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100025211",
          "name": "Pattern#showFirstCycle",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>More human-readable version of the <code>firstCycleValues</code> accessor.</p>",
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "showFirstCycle",
      "longname": "Pattern#showFirstCycle",
      "kind": "member",
      "memberof": "Pattern",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/**\n   * Returns a new pattern, which returns haps sorted in temporal order. Mainly\n   * of use when comparing two patterns for equality, in tests.\n   * @returns Pattern\n   * @noAutocomplete\n   */",
      "meta": {
        "range": [
          22175,
          22448
        ],
        "filename": "pattern.mjs",
        "lineno": 724,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100025249",
          "name": "Pattern#sortHapsByPart",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Returns a new pattern, which returns haps sorted in temporal order. Mainly\nof use when comparing two patterns for equality, in tests.</p>",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "sortHapsByPart",
      "longname": "Pattern#sortHapsByPart",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/**\n   * Layers the result of the given function(s). Like `superimpose`, but without the original pattern:\n   * @name layer\n   * @memberof Pattern\n   * @synonyms apply\n   * @returns Pattern\n   * @example\n   * \"<0 2 4 6 ~ 4 ~ 2 0!3 ~!5>*8\"\n   *   .layer(x=>x.add(\"0,2\"))\n   *   .scale('C minor').note()\n   */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 782,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Layers the result of the given function(s). Like <code>superimpose</code>, but without the original pattern:</p>",
      "name": "layer",
      "memberof": "Pattern",
      "synonyms_text": "apply",
      "synonyms": [
        "apply"
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "\"<0 2 4 6 ~ 4 ~ 2 0!3 ~!5>*8\"\n  .layer(x=>x.add(\"0,2\"))\n  .scale('C minor').note()"
      ],
      "scope": "static",
      "longname": "Pattern.layer",
      "kind": "member"
    },
    {
      "comment": "/**\n   * Superimposes the result of the given function(s) on top of the original pattern:\n   * @name superimpose\n   * @memberof Pattern\n   * @returns Pattern\n   * @example\n   * \"<0 2 4 6 ~ 4 ~ 2 0!3 ~!5>*8\"\n   *   .superimpose(x=>x.add(2))\n   *   .scale('C minor').note()\n   */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 797,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Superimposes the result of the given function(s) on top of the original pattern:</p>",
      "name": "superimpose",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "\"<0 2 4 6 ~ 4 ~ 2 0!3 ~!5>*8\"\n  .superimpose(x=>x.add(2))\n  .scale('C minor').note()"
      ],
      "scope": "static",
      "longname": "Pattern.superimpose",
      "kind": "member"
    },
    {
      "comment": "/**\n   * Writes the content of the current event to the console (visible in the side menu).\n   * @name log\n   * @memberof Pattern\n   * @example\n   * s(\"bd sd\").log()\n   */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 857,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Writes the content of the current event to the console (visible in the side menu).</p>",
      "name": "log",
      "memberof": "Pattern",
      "examples": [
        "s(\"bd sd\").log()"
      ],
      "scope": "static",
      "longname": "Pattern.log",
      "kind": "member"
    },
    {
      "comment": "/**\n   * A simplified version of `log` which writes all \"values\" (various configurable parameters)\n   * within the event to the console (visible in the side menu).\n   * @name logValues\n   * @memberof Pattern\n   * @example\n   * s(\"bd sd\").gain(\"0.25 0.5 1\").n(\"2 1 0\").logValues()\n   */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 870,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>A simplified version of <code>log</code> which writes all &quot;values&quot; (various configurable parameters)\nwithin the event to the console (visible in the side menu).</p>",
      "name": "logValues",
      "memberof": "Pattern",
      "examples": [
        "s(\"bd sd\").gain(\"0.25 0.5 1\").n(\"2 1 0\").logValues()"
      ],
      "scope": "static",
      "longname": "Pattern.logValues",
      "kind": "member"
    },
    {
      "comment": "/**\n   * Breaks a pattern into pieces according to the structure of a given pattern.\n   * True values in the given pattern cause the corresponding subcycle of the\n   * source pattern to be looped, and for an (optional) given function to be\n   * applied. False values result in the corresponding part of the source pattern\n   * to be played unchanged.\n   * @name into\n   * @memberof Pattern\n   * @example\n   * sound(\"bd sd ht lt\").into(\"1 0\", hurry(2))\n   */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 900,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Breaks a pattern into pieces according to the structure of a given pattern.\nTrue values in the given pattern cause the corresponding subcycle of the\nsource pattern to be looped, and for an (optional) given function to be\napplied. False values result in the corresponding part of the source pattern\nto be played unchanged.</p>",
      "name": "into",
      "memberof": "Pattern",
      "examples": [
        "sound(\"bd sd ht lt\").into(\"1 0\", hurry(2))"
      ],
      "scope": "static",
      "longname": "Pattern.into",
      "kind": "member"
    },
    {
      "comment": "/**\n * Selects indices in in stacked notes.\n * @example\n * note(\"<[c,eb,g]!2 [c,f,ab] [d,f,ab]>\")\n * .arpWith(haps => haps[2])\n * */",
      "meta": {
        "range": [
          28909,
          29139
        ],
        "filename": "pattern.mjs",
        "lineno": 949,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100025963",
          "name": "exports.arpWith",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Selects indices in in stacked notes.</p>",
      "examples": [
        "note(\"<[c,eb,g]!2 [c,f,ab] [d,f,ab]>\")\n.arpWith(haps => haps[2])"
      ],
      "name": "arpWith",
      "longname": "arpWith",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Selects indices in in stacked notes.\n * @example\n * note(\"<[c,eb,g]!2 [c,f,ab] [d,f,ab]>\")\n * .arp(\"0 [0,2] 1 [0,2]\")\n * */",
      "meta": {
        "range": [
          29272,
          29415
        ],
        "filename": "pattern.mjs",
        "lineno": 963,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100026017",
          "name": "exports.arp",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Selects indices in in stacked notes.</p>",
      "examples": [
        "note(\"<[c,eb,g]!2 [c,f,ab] [d,f,ab]>\")\n.arp(\"0 [0,2] 1 [0,2]\")"
      ],
      "name": "arp",
      "longname": "arp",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n     *\n     * Assumes a pattern of numbers. Adds the given number to each item in the pattern.\n     * @name add\n     * @memberof Pattern\n     * @example\n     * // Here, the triad 0, 2, 4 is shifted by different amounts\n     * n(\"0 2 4\".add(\"<0 3 4 0>\")).scale(\"C:major\")\n     * // Without add, the equivalent would be:\n     * // n(\"<[0 2 4] [3 5 7] [4 6 8] [0 2 4]>\").scale(\"C:major\")\n     * @example\n     * // You can also use add with notes:\n     * note(\"c3 e3 g3\".add(\"<0 5 7 0>\"))\n     * // Behind the scenes, the notes are converted to midi numbers:\n     * // note(\"48 52 55\".add(\"<0 5 7 0>\"))\n     */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 1026,
        "columnno": 4,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Assumes a pattern of numbers. Adds the given number to each item in the pattern.</p>",
      "name": "add",
      "memberof": "Pattern",
      "examples": [
        "// Here, the triad 0, 2, 4 is shifted by different amounts\nn(\"0 2 4\".add(\"<0 3 4 0>\")).scale(\"C:major\")\n// Without add, the equivalent would be:\n// n(\"<[0 2 4] [3 5 7] [4 6 8] [0 2 4]>\").scale(\"C:major\")",
        "// You can also use add with notes:\nnote(\"c3 e3 g3\".add(\"<0 5 7 0>\"))\n// Behind the scenes, the notes are converted to midi numbers:\n// note(\"48 52 55\".add(\"<0 5 7 0>\"))"
      ],
      "scope": "static",
      "longname": "Pattern.add",
      "kind": "member"
    },
    {
      "comment": "/**\n     *\n     * Like add, but the given numbers are subtracted.\n     * @name sub\n     * @memberof Pattern\n     * @example\n     * n(\"0 2 4\".sub(\"<0 1 2 3>\")).scale(\"C4:minor\")\n     * // See add for more information.\n     */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 1043,
        "columnno": 4,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Like add, but the given numbers are subtracted.</p>",
      "name": "sub",
      "memberof": "Pattern",
      "examples": [
        "n(\"0 2 4\".sub(\"<0 1 2 3>\")).scale(\"C4:minor\")\n// See add for more information."
      ],
      "scope": "static",
      "longname": "Pattern.sub",
      "kind": "member"
    },
    {
      "comment": "/**\n     *\n     * Multiplies each number by the given factor.\n     * @name mul\n     * @memberof Pattern\n     * @example\n     * \"<1 1.5 [1.66, <2 2.33>]>*4\".mul(150).freq()\n     */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 1053,
        "columnno": 4,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Multiplies each number by the given factor.</p>",
      "name": "mul",
      "memberof": "Pattern",
      "examples": [
        "\"<1 1.5 [1.66, <2 2.33>]>*4\".mul(150).freq()"
      ],
      "scope": "static",
      "longname": "Pattern.mul",
      "kind": "member"
    },
    {
      "comment": "/**\n     *\n     * Divides each number by the given factor.\n     * @name div\n     * @memberof Pattern\n     */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 1062,
        "columnno": 4,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Divides each number by the given factor.</p>",
      "name": "div",
      "memberof": "Pattern",
      "scope": "static",
      "longname": "Pattern.div",
      "kind": "member"
    },
    {
      "comment": "/**\n   * Applies the given structure to the pattern:\n   *\n   * @example\n   * note(\"c,eb,g\")\n   *   .struct(\"x ~ x ~ ~ x ~ x ~ ~ ~ x ~ x ~ ~\")\n   *   .slow(2)\n   */",
      "meta": {
        "range": [
          35283,
          35371
        ],
        "filename": "pattern.mjs",
        "lineno": 1158,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100026557",
          "name": "Pattern.prototype.struct",
          "type": "FunctionExpression",
          "paramnames": [
            "args"
          ]
        }
      },
      "description": "<p>Applies the given structure to the pattern:</p>",
      "examples": [
        "note(\"c,eb,g\")\n  .struct(\"x ~ x ~ ~ x ~ x ~ ~ ~ x ~ x ~ ~\")\n  .slow(2)"
      ],
      "name": "struct",
      "longname": "Pattern#struct",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * Returns silence when mask is 0 or \"~\"\n   *\n   * @example\n   * note(\"c [eb,g] d [eb,g]\").mask(\"<1 [0 1]>\")\n   */",
      "meta": {
        "range": [
          35591,
          35676
        ],
        "filename": "pattern.mjs",
        "lineno": 1170,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100026597",
          "name": "Pattern.prototype.mask",
          "type": "FunctionExpression",
          "paramnames": [
            "args"
          ]
        }
      },
      "description": "<p>Returns silence when mask is 0 or &quot;~&quot;</p>",
      "examples": [
        "note(\"c [eb,g] d [eb,g]\").mask(\"<1 [0 1]>\")"
      ],
      "name": "mask",
      "longname": "Pattern#mask",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * Resets the pattern to the start of the cycle for each onset of the reset pattern.\n   *\n   * @example\n   * s(\"[<bd lt> sd]*2, hh*8\").reset(\"<x@3 x(5,8)>\")\n   */",
      "meta": {
        "range": [
          35941,
          36030
        ],
        "filename": "pattern.mjs",
        "lineno": 1182,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100026637",
          "name": "Pattern.prototype.reset",
          "type": "FunctionExpression",
          "paramnames": [
            "args"
          ]
        }
      },
      "description": "<p>Resets the pattern to the start of the cycle for each onset of the reset pattern.</p>",
      "examples": [
        "s(\"[<bd lt> sd]*2, hh*8\").reset(\"<x@3 x(5,8)>\")"
      ],
      "name": "reset",
      "longname": "Pattern#reset",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * Restarts the pattern for each onset of the restart pattern.\n   * While reset will only reset the current cycle, restart will start from cycle 0.\n   *\n   * @example\n   * s(\"[<bd lt> sd]*2, hh*8\").restart(\"<x@3 x(5,8)>\")\n   */",
      "meta": {
        "range": [
          36364,
          36457
        ],
        "filename": "pattern.mjs",
        "lineno": 1195,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100026677",
          "name": "Pattern.prototype.restart",
          "type": "FunctionExpression",
          "paramnames": [
            "args"
          ]
        }
      },
      "description": "<p>Restarts the pattern for each onset of the restart pattern.\nWhile reset will only reset the current cycle, restart will start from cycle 0.</p>",
      "examples": [
        "s(\"[<bd lt> sd]*2, hh*8\").restart(\"<x@3 x(5,8)>\")"
      ],
      "name": "restart",
      "longname": "Pattern#restart",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n * Does absolutely nothing, but with a given metrical 'steps'\n * @name gap\n * @param  {number} steps\n * @example\n * gap(3) // \"~@3\"\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 1229,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Does absolutely nothing, but with a given metrical 'steps'</p>",
      "name": "gap",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "steps"
        }
      ],
      "examples": [
        "gap(3) // \"~@3\""
      ],
      "longname": "gap",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Does absolutely nothing..\n * @name silence\n * @example\n * silence // \"~\"\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 1238,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Does absolutely nothing..</p>",
      "name": "silence",
      "examples": [
        "silence // \"~\""
      ],
      "longname": "silence",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * A discrete value that repeats once per cycle.\n *\n * @returns {Pattern}\n * @example\n * pure('e4') // \"e4\"\n * @noAutocomplete\n */",
      "meta": {
        "range": [
          37708,
          37965
        ],
        "filename": "pattern.mjs",
        "lineno": 1257,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100026756",
          "name": "exports.pure",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "<p>A discrete value that repeats once per cycle.</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "pure('e4') // \"e4\""
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "pure",
      "longname": "pure",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/** Takes a list of patterns, and returns a pattern of lists.\n */",
      "meta": {
        "range": [
          38970,
          39150
        ],
        "filename": "pattern.mjs",
        "lineno": 1295,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100026846",
          "name": "exports.sequenceP",
          "type": "FunctionDeclaration",
          "paramnames": [
            "pats"
          ]
        }
      },
      "description": "<p>Takes a list of patterns, and returns a pattern of lists.</p>",
      "name": "sequenceP",
      "longname": "sequenceP",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/**\n * The given items are played at the same time at the same length.\n *\n * @return {Pattern}\n * @synonyms polyrhythm, pr\n * @example\n * stack(\"g3\", \"b3\", [\"e4\", \"d4\"]).note()\n * // \"g3,b3,[e4 d4]\".note()\n *\n * @example\n * // As a chained function:\n * s(\"hh*4\").stack(\n *   note(\"c4(5,8)\")\n * )\n */",
      "meta": {
        "range": [
          39452,
          39830
        ],
        "filename": "pattern.mjs",
        "lineno": 1318,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100026886",
          "name": "exports.stack",
          "type": "FunctionDeclaration",
          "paramnames": [
            "pats"
          ]
        }
      },
      "description": "<p>The given items are played at the same time at the same length.</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "synonyms_text": "polyrhythm, pr",
      "synonyms": [
        "polyrhythm",
        "pr"
      ],
      "examples": [
        "stack(\"g3\", \"b3\", [\"e4\", \"d4\"]).note()\n// \"g3,b3,[e4 d4]\".note()",
        "// As a chained function:\ns(\"hh*4\").stack(\n  note(\"c4(5,8)\")\n)"
      ],
      "name": "stack",
      "longname": "stack",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/**\n * Concatenation: combines a list of patterns, switching between them successively, one per cycle.\n *\n * @return {Pattern}\n * @synonyms cat\n * @example\n * slowcat(\"e5\", \"b4\", [\"d5\", \"c5\"])\n *\n */",
      "meta": {
        "range": [
          41498,
          42548
        ],
        "filename": "pattern.mjs",
        "lineno": 1396,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100027250",
          "name": "exports.slowcat",
          "type": "FunctionDeclaration",
          "paramnames": [
            "pats"
          ]
        }
      },
      "description": "<p>Concatenation: combines a list of patterns, switching between them successively, one per cycle.</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "synonyms_text": "cat",
      "synonyms": [
        "cat"
      ],
      "examples": [
        "slowcat(\"e5\", \"b4\", [\"d5\", \"c5\"])"
      ],
      "name": "slowcat",
      "longname": "slowcat",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/** Concatenation: combines a list of patterns, switching between them successively, one per cycle. Unlike slowcat, this version will skip cycles.\n * @param {...any} items - The items to concatenate\n * @return {Pattern}\n */",
      "meta": {
        "range": [
          42774,
          43147
        ],
        "filename": "pattern.mjs",
        "lineno": 1426,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100027410",
          "name": "exports.slowcatPrime",
          "type": "FunctionDeclaration",
          "paramnames": [
            "pats"
          ]
        }
      },
      "description": "<p>Concatenation: combines a list of patterns, switching between them successively, one per cycle. Unlike slowcat, this version will skip cycles.</p>",
      "params": [
        {
          "type": {
            "names": [
              "any"
            ]
          },
          "variable": true,
          "description": "<p>The items to concatenate</p>",
          "name": "items"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "slowcatPrime",
      "longname": "slowcatPrime",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/** The given items are con**cat**enated, where each one takes one cycle.\n *\n * @param {...any} items - The items to concatenate\n * @synonyms slowcat\n * @return {Pattern}\n * @example\n * cat(\"e5\", \"b4\", [\"d5\", \"c5\"]).note()\n * // \"<e5 b4 [d5 c5]>\".note()\n *\n * @example\n * // As a chained function:\n * s(\"hh*4\").cat(\n *    note(\"c4(5,8)\")\n * )\n */",
      "meta": {
        "range": [
          43496,
          43555
        ],
        "filename": "pattern.mjs",
        "lineno": 1451,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100027463",
          "name": "exports.cat",
          "type": "FunctionDeclaration",
          "paramnames": [
            "pats"
          ]
        }
      },
      "description": "<p>The given items are con<strong>cat</strong>enated, where each one takes one cycle.</p>",
      "params": [
        {
          "type": {
            "names": [
              "any"
            ]
          },
          "variable": true,
          "description": "<p>The items to concatenate</p>",
          "name": "items"
        }
      ],
      "synonyms_text": "slowcat",
      "synonyms": [
        "slowcat"
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "cat(\"e5\", \"b4\", [\"d5\", \"c5\"]).note()\n// \"<e5 b4 [d5 c5]>\".note()",
        "// As a chained function:\ns(\"hh*4\").cat(\n   note(\"c4(5,8)\")\n)"
      ],
      "name": "cat",
      "longname": "cat",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/**\n * Allows to arrange multiple patterns together over multiple cycles.\n * Takes a variable number of arrays with two elements specifying the number of cycles and the pattern to use.\n *\n * @return {Pattern}\n * @example\n * arrange(\n *   [4, \"<c a f e>(3,8)\"],\n *   [2, \"<g a>(5,8)\"]\n * ).note()\n */",
      "meta": {
        "range": [
          43857,
          44091
        ],
        "filename": "pattern.mjs",
        "lineno": 1466,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100027474",
          "name": "exports.arrange",
          "type": "FunctionDeclaration",
          "paramnames": [
            "sections"
          ]
        }
      },
      "description": "<p>Allows to arrange multiple patterns together over multiple cycles.\nTakes a variable number of arrays with two elements specifying the number of cycles and the pattern to use.</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "arrange(\n  [4, \"<c a f e>(3,8)\"],\n  [2, \"<g a>(5,8)\"]\n).note()"
      ],
      "name": "arrange",
      "longname": "arrange",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/**\n * Similarly to `arrange`, allows you to arrange multiple patterns together over multiple cycles.\n * Unlike `arrange`, you specify a start and stop time for each pattern rather than duration, which\n * means that patterns can overlap.\n * @return {Pattern}\n * @example\nseqPLoop([0, 2, \"bd(3,8)\"],\n         [1, 3, \"cp(3,8)\"]\n        )\n  .sound()\n */",
      "meta": {
        "range": [
          44444,
          44868
        ],
        "filename": "pattern.mjs",
        "lineno": 1483,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100027519",
          "name": "exports.seqPLoop",
          "type": "FunctionDeclaration",
          "paramnames": [
            "parts"
          ]
        }
      },
      "description": "<p>Similarly to <code>arrange</code>, allows you to arrange multiple patterns together over multiple cycles.\nUnlike <code>arrange</code>, you specify a start and stop time for each pattern rather than duration, which\nmeans that patterns can overlap.</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "seqPLoop([0, 2, \"bd(3,8)\"],\n         [1, 3, \"cp(3,8)\"]\n        )\n  .sound()"
      ],
      "name": "seqPLoop",
      "longname": "seqPLoop",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/** See `fastcat` */",
      "meta": {
        "range": [
          45171,
          45235
        ],
        "filename": "pattern.mjs",
        "lineno": 1515,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100027662",
          "name": "exports.sequence",
          "type": "FunctionDeclaration",
          "paramnames": [
            "pats"
          ]
        }
      },
      "description": "<p>See <code>fastcat</code></p>",
      "name": "sequence",
      "longname": "sequence",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/** Like **cat**, but the items are crammed into one cycle.\n * @synonyms sequence, fastcat\n * @example\n * seq(\"e5\", \"b4\", [\"d5\", \"c5\"]).note()\n * // \"e5 b4 [d5 c5]\".note()\n *\n * @example\n * // As a chained function:\n * s(\"hh*4\").seq(\n *   note(\"c4(5,8)\")\n * )\n */",
      "meta": {
        "range": [
          45502,
          45561
        ],
        "filename": "pattern.mjs",
        "lineno": 1532,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100027673",
          "name": "exports.seq",
          "type": "FunctionDeclaration",
          "paramnames": [
            "pats"
          ]
        }
      },
      "description": "<p>Like <strong>cat</strong>, but the items are crammed into one cycle.</p>",
      "synonyms_text": "sequence, fastcat",
      "synonyms": [
        "sequence",
        "fastcat"
      ],
      "examples": [
        "seq(\"e5\", \"b4\", [\"d5\", \"c5\"]).note()\n// \"e5 b4 [d5 c5]\".note()",
        "// As a chained function:\ns(\"hh*4\").seq(\n  note(\"c4(5,8)\")\n)"
      ],
      "name": "seq",
      "longname": "seq",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/**\n * Registers a new pattern method. The method is added to the Pattern class + the standalone function is returned from register.\n *\n * @param {string | string[]} name name of the function, or an array of names to be used as synonyms\n * @param {function} func function with 1 or more params, where last is the current pattern\n * @noAutocomplete\n *\n */",
      "meta": {
        "range": [
          48191,
          50867
        ],
        "filename": "pattern.mjs",
        "lineno": 1596,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100028305",
          "name": "exports.register",
          "type": "FunctionDeclaration",
          "paramnames": [
            "name",
            "func",
            "patternify",
            "preserveSteps",
            "join"
          ]
        }
      },
      "description": "<p>Registers a new pattern method. The method is added to the Pattern class + the standalone function is returned from register.</p>",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "Array.<string>"
            ]
          },
          "description": "<p>name of the function, or an array of names to be used as synonyms</p>",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>function with 1 or more params, where last is the current pattern</p>",
          "name": "func"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "register",
      "longname": "register",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/**\n * Assumes a numerical pattern. Returns a new pattern with all values rounded\n * to the nearest integer.\n * @name round\n * @memberof Pattern\n * @returns Pattern\n * @example\n * n(\"0.5 1.5 2.5\".round()).scale(\"C:major\")\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 1689,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Assumes a numerical pattern. Returns a new pattern with all values rounded\nto the nearest integer.</p>",
      "name": "round",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "n(\"0.5 1.5 2.5\".round()).scale(\"C:major\")"
      ],
      "scope": "static",
      "longname": "Pattern.round",
      "kind": "member"
    },
    {
      "comment": "/**\n * Assumes a numerical pattern. Returns a new pattern with all values set to\n * their mathematical floor. E.g. `3.7` replaced with to `3`, and `-4.2`\n * replaced with `-5`.\n * @name floor\n * @memberof Pattern\n * @returns Pattern\n * @example\n * note(\"42 42.1 42.5 43\".floor())\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 1702,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Assumes a numerical pattern. Returns a new pattern with all values set to\ntheir mathematical floor. E.g. <code>3.7</code> replaced with to <code>3</code>, and <code>-4.2</code>\nreplaced with <code>-5</code>.</p>",
      "name": "floor",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "note(\"42 42.1 42.5 43\".floor())"
      ],
      "scope": "static",
      "longname": "Pattern.floor",
      "kind": "member"
    },
    {
      "comment": "/**\n * Assumes a numerical pattern. Returns a new pattern with all values set to\n * their mathematical ceiling. E.g. `3.2` replaced with `4`, and `-4.2`\n * replaced with `-4`.\n * @name ceil\n * @memberof Pattern\n * @returns Pattern\n * @example\n * note(\"42 42.1 42.5 43\".ceil())\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 1716,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Assumes a numerical pattern. Returns a new pattern with all values set to\ntheir mathematical ceiling. E.g. <code>3.2</code> replaced with <code>4</code>, and <code>-4.2</code>\nreplaced with <code>-4</code>.</p>",
      "name": "ceil",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "note(\"42 42.1 42.5 43\".ceil())"
      ],
      "scope": "static",
      "longname": "Pattern.ceil",
      "kind": "member"
    },
    {
      "comment": "/**\n * Assumes a numerical pattern, containing unipolar values in the range 0 ..\n * 1. Returns a new pattern with values scaled to the bipolar range -1 .. 1\n * @returns Pattern\n * @noAutocomplete\n */",
      "meta": {
        "range": [
          52512,
          52616
        ],
        "filename": "pattern.mjs",
        "lineno": 1735,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100028821",
          "name": "exports.toBipolar",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Assumes a numerical pattern, containing unipolar values in the range 0 ..</p>\n<ol>\n<li>Returns a new pattern with values scaled to the bipolar range -1 .. 1</li>\n</ol>",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "toBipolar",
      "longname": "toBipolar",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Assumes a numerical pattern, containing bipolar values in the range -1 .. 1\n * Returns a new pattern with values scaled to the unipolar range 0 .. 1\n * @returns Pattern\n * @noAutocomplete\n */",
      "meta": {
        "range": [
          52817,
          52927
        ],
        "filename": "pattern.mjs",
        "lineno": 1745,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100028843",
          "name": "exports.fromBipolar",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Assumes a numerical pattern, containing bipolar values in the range -1 .. 1\nReturns a new pattern with values scaled to the unipolar range 0 .. 1</p>",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "fromBipolar",
      "longname": "fromBipolar",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Assumes a numerical pattern, containing unipolar values in the range 0 .. 1.\n * Returns a new pattern with values scaled to the given min/max range.\n * Most useful in combination with continuous patterns.\n * @name range\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"[bd sd]*2,hh*8\")\n * .cutoff(sine.range(500,4000))\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 1749,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Assumes a numerical pattern, containing unipolar values in the range 0 .. 1.\nReturns a new pattern with values scaled to the given min/max range.\nMost useful in combination with continuous patterns.</p>",
      "name": "range",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"[bd sd]*2,hh*8\")\n.cutoff(sine.range(500,4000))"
      ],
      "scope": "static",
      "longname": "Pattern.range",
      "kind": "member"
    },
    {
      "comment": "/**\n * Assumes a numerical pattern, containing unipolar values in the range 0 .. 1\n * Returns a new pattern with values scaled to the given min/max range,\n * following an exponential curve.\n * @name rangex\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"[bd sd]*2,hh*8\")\n * .cutoff(sine.rangex(500,4000))\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 1764,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Assumes a numerical pattern, containing unipolar values in the range 0 .. 1\nReturns a new pattern with values scaled to the given min/max range,\nfollowing an exponential curve.</p>",
      "name": "rangex",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"[bd sd]*2,hh*8\")\n.cutoff(sine.rangex(500,4000))"
      ],
      "scope": "static",
      "longname": "Pattern.rangex",
      "kind": "member"
    },
    {
      "comment": "/**\n * Assumes a numerical pattern, containing bipolar values in the range -1 .. 1\n * Returns a new pattern with values scaled to the given min/max range.\n * @name range2\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"[bd sd]*2,hh*8\")\n * .cutoff(sine2.range2(500,4000))\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 1779,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Assumes a numerical pattern, containing bipolar values in the range -1 .. 1\nReturns a new pattern with values scaled to the given min/max range.</p>",
      "name": "range2",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"[bd sd]*2,hh*8\")\n.cutoff(sine2.range2(500,4000))"
      ],
      "scope": "static",
      "longname": "Pattern.range2",
      "kind": "member"
    },
    {
      "comment": "/**\n * Allows dividing numbers via list notation using \":\".\n * Returns a new pattern with just numbers.\n * @name ratio\n * @memberof Pattern\n * @returns Pattern\n * @example\n * ratio(\"1, 5:4, 3:2\").mul(110)\n * .freq().s(\"piano\")\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 1793,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Allows dividing numbers via list notation using &quot;:&quot;.\nReturns a new pattern with just numbers.</p>",
      "name": "ratio",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "ratio(\"1, 5:4, 3:2\").mul(110)\n.freq().s(\"piano\")"
      ],
      "scope": "static",
      "longname": "Pattern.ratio",
      "kind": "member"
    },
    {
      "comment": "/** Compress each cycle into the given timespan, leaving a gap\n * @example\n * cat(\n *   s(\"bd sd\").compress(.25,.75),\n *   s(\"~ bd sd ~\")\n * )\n */",
      "meta": {
        "range": [
          54920,
          55173
        ],
        "filename": "pattern.mjs",
        "lineno": 1822,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100028988",
          "name": "exports.compress",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Compress each cycle into the given timespan, leaving a gap</p>",
      "examples": [
        "cat(\n  s(\"bd sd\").compress(.25,.75),\n  s(\"~ bd sd ~\")\n)"
      ],
      "name": "compress",
      "longname": "compress",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * speeds up a pattern like fast, but rather than it playing multiple times as fast would it instead leaves a gap in the remaining space of the cycle. For example, the following will play the sound pattern \"bd sn\" only once but compressed into the first half of the cycle, i.e. twice as fast.\n * @name fastGap\n * @synonyms fastgap\n * @example\n * s(\"bd sd\").fastGap(2)\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 1835,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>speeds up a pattern like fast, but rather than it playing multiple times as fast would it instead leaves a gap in the remaining space of the cycle. For example, the following will play the sound pattern &quot;bd sn&quot; only once but compressed into the first half of the cycle, i.e. twice as fast.</p>",
      "name": "fastGap",
      "synonyms_text": "fastgap",
      "synonyms": [
        "fastgap"
      ],
      "examples": [
        "s(\"bd sd\").fastGap(2)"
      ],
      "longname": "fastGap",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Similar to `compress`, but doesn't leave gaps, and the 'focus' can be bigger than a cycle\n * @example\n * s(\"bd hh sd hh\").focus(1/4, 3/4)\n */",
      "meta": {
        "range": [
          57064,
          57254
        ],
        "filename": "pattern.mjs",
        "lineno": 1877,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100029330",
          "name": "exports.focus",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Similar to <code>compress</code>, but doesn't leave gaps, and the 'focus' can be bigger than a cycle</p>",
      "examples": [
        "s(\"bd hh sd hh\").focus(1/4, 3/4)"
      ],
      "name": "focus",
      "longname": "focus",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/** The ply function repeats each event the given number of times.\n * @example\n * s(\"bd ~ sd cp\").ply(\"<1 2 3>\")\n */",
      "meta": {
        "range": [
          57521,
          57752
        ],
        "filename": "pattern.mjs",
        "lineno": 1894,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100029409",
          "name": "exports.ply",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>The ply function repeats each event the given number of times.</p>",
      "examples": [
        "s(\"bd ~ sd cp\").ply(\"<1 2 3>\")"
      ],
      "name": "ply",
      "longname": "ply",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Speed up a pattern by the given factor. Used by \"*\" in mini notation.\n *\n * @name fast\n * @synonyms density\n * @memberof Pattern\n * @param {number | Pattern} factor speed up factor\n * @returns Pattern\n * @example\n * s(\"bd hh sd hh\").fast(2) // s(\"[bd hh sd hh]*2\")\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 1902,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Speed up a pattern by the given factor. Used by &quot;*&quot; in mini notation.</p>",
      "name": "fast",
      "synonyms_text": "density",
      "synonyms": [
        "density"
      ],
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>speed up factor</p>",
          "name": "factor"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"bd hh sd hh\").fast(2) // s(\"[bd hh sd hh]*2\")"
      ],
      "scope": "static",
      "longname": "Pattern.fast",
      "kind": "member"
    },
    {
      "comment": "/**\n * Both speeds up the pattern (like 'fast') and the sample playback (like 'speed').\n * @example\n * s(\"bd sd:2\").hurry(\"<1 2 4 3>\").slow(1.5)\n */",
      "meta": {
        "range": [
          58520,
          58629
        ],
        "filename": "pattern.mjs",
        "lineno": 1932,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100029522",
          "name": "exports.hurry",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Both speeds up the pattern (like 'fast') and the sample playback (like 'speed').</p>",
      "examples": [
        "s(\"bd sd:2\").hurry(\"<1 2 4 3>\").slow(1.5)"
      ],
      "name": "hurry",
      "longname": "hurry",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Slow down a pattern over the given number of cycles. Like the \"/\" operator in mini notation.\n *\n * @name slow\n * @synonyms sparsity\n * @memberof Pattern\n * @param {number | Pattern} factor slow down factor\n * @returns Pattern\n * @example\n * s(\"bd hh sd hh\").slow(2) // s(\"[bd hh sd hh]/2\")\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 1936,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Slow down a pattern over the given number of cycles. Like the &quot;/&quot; operator in mini notation.</p>",
      "name": "slow",
      "synonyms_text": "sparsity",
      "synonyms": [
        "sparsity"
      ],
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>slow down factor</p>",
          "name": "factor"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"bd hh sd hh\").slow(2) // s(\"[bd hh sd hh]/2\")"
      ],
      "scope": "static",
      "longname": "Pattern.slow",
      "kind": "member"
    },
    {
      "comment": "/**\n * Carries out an operation 'inside' a cycle.\n * @example\n * \"0 1 2 3 4 3 2 1\".inside(4, rev).scale('C major').note()\n * // \"0 1 2 3 4 3 2 1\".slow(4).rev().fast(4).scale('C major').note()\n */",
      "meta": {
        "range": [
          59314,
          59431
        ],
        "filename": "pattern.mjs",
        "lineno": 1960,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100029583",
          "name": "exports.inside",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Carries out an operation 'inside' a cycle.</p>",
      "examples": [
        "\"0 1 2 3 4 3 2 1\".inside(4, rev).scale('C major').note()\n// \"0 1 2 3 4 3 2 1\".slow(4).rev().fast(4).scale('C major').note()"
      ],
      "name": "inside",
      "longname": "inside",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Carries out an operation 'outside' a cycle.\n * @example\n * \"<[0 1] 2 [3 4] 5>\".outside(4, rev).scale('C major').note()\n * // \"<[0 1] 2 [3 4] 5>\".fast(4).rev().slow(4).scale('C major').note()\n */",
      "meta": {
        "range": [
          59635,
          59754
        ],
        "filename": "pattern.mjs",
        "lineno": 1970,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100029607",
          "name": "exports.outside",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Carries out an operation 'outside' a cycle.</p>",
      "examples": [
        "\"<[0 1] 2 [3 4] 5>\".outside(4, rev).scale('C major').note()\n// \"<[0 1] 2 [3 4] 5>\".fast(4).rev().slow(4).scale('C major').note()"
      ],
      "name": "outside",
      "longname": "outside",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Applies the given function every n cycles, starting from the last cycle.\n * @name lastOf\n * @memberof Pattern\n * @param {number} n how many cycles\n * @param {function} func function to apply\n * @returns Pattern\n * @example\n * note(\"c3 d3 e3 g3\").lastOf(4, x=>x.rev())\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 1974,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Applies the given function every n cycles, starting from the last cycle.</p>",
      "name": "lastOf",
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>how many cycles</p>",
          "name": "n"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>function to apply</p>",
          "name": "func"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "note(\"c3 d3 e3 g3\").lastOf(4, x=>x.rev())"
      ],
      "scope": "static",
      "longname": "Pattern.lastOf",
      "kind": "member"
    },
    {
      "comment": "/**\n * Applies the given function every n cycles, starting from the first cycle.\n * @name firstOf\n * @memberof Pattern\n * @param {number} n how many cycles\n * @param {function} func function to apply\n * @returns Pattern\n * @example\n * note(\"c3 d3 e3 g3\").firstOf(4, x=>x.rev())\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 1990,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Applies the given function every n cycles, starting from the first cycle.</p>",
      "name": "firstOf",
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>how many cycles</p>",
          "name": "n"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>function to apply</p>",
          "name": "func"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "note(\"c3 d3 e3 g3\").firstOf(4, x=>x.rev())"
      ],
      "scope": "static",
      "longname": "Pattern.firstOf",
      "kind": "member"
    },
    {
      "comment": "/**\n * An alias for `firstOf`\n * @name every\n * @memberof Pattern\n * @param {number} n how many cycles\n * @param {function} func function to apply\n * @returns Pattern\n * @example\n * note(\"c3 d3 e3 g3\").every(4, x=>x.rev())\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2001,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>An alias for <code>firstOf</code></p>",
      "name": "every",
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>how many cycles</p>",
          "name": "n"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>function to apply</p>",
          "name": "func"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "note(\"c3 d3 e3 g3\").every(4, x=>x.rev())"
      ],
      "scope": "static",
      "longname": "Pattern.every",
      "kind": "member"
    },
    {
      "comment": "/**\n * Like layer, but with a single function:\n * @name apply\n * @memberof Pattern\n * @example\n * \"<c3 eb3 g3>\".scale('C minor').apply(scaleTranspose(\"0,2,4\")).note()\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2017,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Like layer, but with a single function:</p>",
      "name": "apply",
      "memberof": "Pattern",
      "examples": [
        "\"<c3 eb3 g3>\".scale('C minor').apply(scaleTranspose(\"0,2,4\")).note()"
      ],
      "scope": "static",
      "longname": "Pattern.apply",
      "kind": "member"
    },
    {
      "comment": "/**\n * Plays the pattern at the given cycles per minute.\n * @deprecated\n * @example\n * s(\"<bd sd>,hh*2\").cpm(90) // = 90 bpm\n */",
      "meta": {
        "range": [
          61398,
          61492
        ],
        "filename": "pattern.mjs",
        "lineno": 2036,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100029726",
          "name": "exports.cpm",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Plays the pattern at the given cycles per minute.</p>",
      "deprecated": true,
      "examples": [
        "s(\"<bd sd>,hh*2\").cpm(90) // = 90 bpm"
      ],
      "name": "cpm",
      "longname": "cpm",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Nudge a pattern to start earlier in time. Equivalent of Tidal's <~ operator\n *\n * @name early\n * @memberof Pattern\n * @param {number | Pattern} cycles number of cycles to nudge left\n * @returns Pattern\n * @example\n * \"bd ~\".stack(\"hh ~\".early(.1)).s()\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2040,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Nudge a pattern to start earlier in time. Equivalent of Tidal's &lt;~ operator</p>",
      "name": "early",
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>number of cycles to nudge left</p>",
          "name": "cycles"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "\"bd ~\".stack(\"hh ~\".early(.1)).s()"
      ],
      "scope": "static",
      "longname": "Pattern.early",
      "kind": "member"
    },
    {
      "comment": "/**\n * Nudge a pattern to start later in time. Equivalent of Tidal's ~> operator\n *\n * @name late\n * @memberof Pattern\n * @param {number | Pattern} cycles number of cycles to nudge right\n * @returns Pattern\n * @example\n * \"bd ~\".stack(\"hh ~\".late(.1)).s()\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2060,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Nudge a pattern to start later in time. Equivalent of Tidal's ~&gt; operator</p>",
      "name": "late",
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>number of cycles to nudge right</p>",
          "name": "cycles"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "\"bd ~\".stack(\"hh ~\".late(.1)).s()"
      ],
      "scope": "static",
      "longname": "Pattern.late",
      "kind": "member"
    },
    {
      "comment": "/**\n * Plays a portion of a pattern, specified by the beginning and end of a time span. The new resulting pattern is played over the time period of the original pattern:\n *\n * @example\n * s(\"bd*2 hh*3 [sd bd]*2 perc\").zoom(0.25, 0.75)\n * // s(\"hh*3 [sd bd]*2\") // equivalent\n */",
      "meta": {
        "range": [
          62678,
          63097
        ],
        "filename": "pattern.mjs",
        "lineno": 2087,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100029819",
          "name": "exports.zoom",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Plays a portion of a pattern, specified by the beginning and end of a time span. The new resulting pattern is played over the time period of the original pattern:</p>",
      "examples": [
        "s(\"bd*2 hh*3 [sd bd]*2 perc\").zoom(0.25, 0.75)\n// s(\"hh*3 [sd bd]*2\") // equivalent"
      ],
      "name": "zoom",
      "longname": "zoom",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Splits a pattern into the given number of slices, and plays them according to a pattern of slice numbers.\n * Similar to `slice`, but slices up patterns rather than sound samples.\n * @param {number} number of slices\n * @param {number} slices to play\n * @example\n * note(\"0 1 2 3 4 5 6 7\".scale('c:mixolydian'))\n *.bite(4, \"3 2 1 0\")\n * @example\n * sound(\"bd - bd bd*2, - sd:6 - sd:5 sd:1 - [- sd:2] -, hh [- cp:7]\")\n  .bank(\"RolandTR909\").speed(1.2)\n  .bite(4, \"0 0 [1 2] <3 2> 0 0 [2 1] 3\")\n */",
      "meta": {
        "range": [
          63730,
          64028
        ],
        "filename": "pattern.mjs",
        "lineno": 2119,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100029944",
          "name": "exports.bite",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Splits a pattern into the given number of slices, and plays them according to a pattern of slice numbers.\nSimilar to <code>slice</code>, but slices up patterns rather than sound samples.</p>",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>of slices</p>",
          "name": "number"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>to play</p>",
          "name": "slices"
        }
      ],
      "examples": [
        "note(\"0 1 2 3 4 5 6 7\".scale('c:mixolydian'))\n.bite(4, \"3 2 1 0\")",
        "sound(\"bd - bd bd*2, - sd:6 - sd:5 sd:1 - [- sd:2] -, hh [- cp:7]\")\n  .bank(\"RolandTR909\").speed(1.2)\n  .bite(4, \"0 0 [1 2] <3 2> 0 0 [2 1] 3\")"
      ],
      "name": "bite",
      "longname": "bite",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Selects the given fraction of the pattern and repeats that part to fill the remainder of the cycle.\n * @param {number} fraction fraction to select\n * @example\n * s(\"lt ht mt cp, [hh oh]*2\").linger(\"<1 .5 .25 .125>\")\n */",
      "meta": {
        "range": [
          64257,
          64499
        ],
        "filename": "pattern.mjs",
        "lineno": 2140,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100030009",
          "name": "exports.linger",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Selects the given fraction of the pattern and repeats that part to fill the remainder of the cycle.</p>",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>fraction to select</p>",
          "name": "fraction"
        }
      ],
      "examples": [
        "s(\"lt ht mt cp, [hh oh]*2\").linger(\"<1 .5 .25 .125>\")"
      ],
      "name": "linger",
      "longname": "linger",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Samples the pattern at a rate of n events per cycle. Useful for turning a continuous pattern into a discrete one.\n * @name segment\n * @synonyms seg\n * @param {number} segments number of segments per cycle\n * @example\n * note(saw.range(40,52).segment(24))\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2154,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Samples the pattern at a rate of n events per cycle. Useful for turning a continuous pattern into a discrete one.</p>",
      "name": "segment",
      "synonyms_text": "seg",
      "synonyms": [
        "seg"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>number of segments per cycle</p>",
          "name": "segments"
        }
      ],
      "examples": [
        "note(saw.range(40,52).segment(24))"
      ],
      "longname": "segment",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * The function `swingBy x n` breaks each cycle into `n` slices, and then delays events in the second half of each slice by the amount `x`, which is relative to the size of the (half) slice. So if `x` is 0 it does nothing, `0.5` delays for half the note duration, and 1 will wrap around to doing nothing again. The end result is a shuffle or swing-like rhythm\n * @param {number} subdivision\n * @param {number} offset\n * @example\n * s(\"hh*8\").swingBy(1/3, 4)\n */",
      "meta": {
        "range": [
          65382,
          65484
        ],
        "filename": "pattern.mjs",
        "lineno": 2173,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100030093",
          "name": "exports.swingBy",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>The function <code>swingBy x n</code> breaks each cycle into <code>n</code> slices, and then delays events in the second half of each slice by the amount <code>x</code>, which is relative to the size of the (half) slice. So if <code>x</code> is 0 it does nothing, <code>0.5</code> delays for half the note duration, and 1 will wrap around to doing nothing again. The end result is a shuffle or swing-like rhythm</p>",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "subdivision"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "offset"
        }
      ],
      "examples": [
        "s(\"hh*8\").swingBy(1/3, 4)"
      ],
      "name": "swingBy",
      "longname": "swingBy",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Shorthand for swingBy with 1/3:\n * @param {number} subdivision\n * @example\n * s(\"hh*8\").swing(4)\n * // s(\"hh*8\").swingBy(1/3, 4)\n */",
      "meta": {
        "range": [
          65626,
          65700
        ],
        "filename": "pattern.mjs",
        "lineno": 2182,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100030117",
          "name": "exports.swing",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Shorthand for swingBy with 1/3:</p>",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "subdivision"
        }
      ],
      "examples": [
        "s(\"hh*8\").swing(4)\n// s(\"hh*8\").swingBy(1/3, 4)"
      ],
      "name": "swing",
      "longname": "swing",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Swaps 1s and 0s in a binary pattern.\n * @name invert\n * @synonyms inv\n * @example\n * s(\"bd\").struct(\"1 0 0 1 0 0 1 0\".lastOf(4, invert))\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2184,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Swaps 1s and 0s in a binary pattern.</p>",
      "name": "invert",
      "synonyms_text": "inv",
      "synonyms": [
        "inv"
      ],
      "examples": [
        "s(\"bd\").struct(\"1 0 0 1 0 0 1 0\".lastOf(4, invert))"
      ],
      "longname": "invert",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Applies the given function whenever the given pattern is in a true state.\n * @name when\n * @memberof Pattern\n * @param {Pattern} binary_pat\n * @param {function} func\n * @returns Pattern\n * @example\n * \"c3 eb3 g3\".when(\"<0 1>/2\", x=>x.sub(\"5\")).note()\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2201,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Applies the given function whenever the given pattern is in a true state.</p>",
      "name": "when",
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "binary_pat"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "func"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "\"c3 eb3 g3\".when(\"<0 1>/2\", x=>x.sub(\"5\")).note()"
      ],
      "scope": "static",
      "longname": "Pattern.when",
      "kind": "member"
    },
    {
      "comment": "/**\n * Superimposes the function result on top of the original pattern, delayed by the given time.\n * @name off\n * @memberof Pattern\n * @param {Pattern | number} time offset time\n * @param {function} func function to apply\n * @returns Pattern\n * @example\n * \"c3 eb3 g3\".off(1/8, x=>x.add(7)).note()\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2215,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Superimposes the function result on top of the original pattern, delayed by the given time.</p>",
      "name": "off",
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "Pattern",
              "number"
            ]
          },
          "description": "<p>offset time</p>",
          "name": "time"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>function to apply</p>",
          "name": "func"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "\"c3 eb3 g3\".off(1/8, x=>x.add(7)).note()"
      ],
      "scope": "static",
      "longname": "Pattern.off",
      "kind": "member"
    },
    {
      "comment": "/**\n * Returns a new pattern where every other cycle is played once, twice as\n * fast, and offset in time by one quarter of a cycle. Creates a kind of\n * breakbeat feel.\n * @returns Pattern\n */",
      "meta": {
        "range": [
          67010,
          67148
        ],
        "filename": "pattern.mjs",
        "lineno": 2235,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100030204",
          "name": "exports.brak",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Returns a new pattern where every other cycle is played once, twice as\nfast, and offset in time by one quarter of a cycle. Creates a kind of\nbreakbeat feel.</p>",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "name": "brak",
      "longname": "brak",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Reverse all haps in a pattern\n *\n * @name rev\n * @memberof Pattern\n * @returns Pattern\n * @example\n * note(\"c d e g\").rev()\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2239,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Reverse all haps in a pattern</p>",
      "name": "rev",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "note(\"c d e g\").rev()"
      ],
      "scope": "static",
      "longname": "Pattern.rev",
      "kind": "member"
    },
    {
      "comment": "/** Like press, but allows you to specify the amount by which each\n * event is shifted. pressBy(0.5) is the same as press, while\n * pressBy(1/3) shifts each event by a third of its timespan.\n * @example\n * stack(s(\"hh*4\"),\n *       s(\"bd mt sd ht\").pressBy(\"<0 0.5 0.25>\")\n *      ).slow(2)\n */",
      "meta": {
        "range": [
          68356,
          68486
        ],
        "filename": "pattern.mjs",
        "lineno": 2280,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100030354",
          "name": "exports.pressBy",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Like press, but allows you to specify the amount by which each\nevent is shifted. pressBy(0.5) is the same as press, while\npressBy(1/3) shifts each event by a third of its timespan.</p>",
      "examples": [
        "stack(s(\"hh*4\"),\n      s(\"bd mt sd ht\").pressBy(\"<0 0.5 0.25>\")\n     ).slow(2)"
      ],
      "name": "pressBy",
      "longname": "pressBy",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Syncopates a rhythm, by shifting each event halfway into its timespan.\n * @example\n * stack(s(\"hh*4\"),\n *       s(\"bd mt sd ht\").every(4, press)\n *      ).slow(2)\n */",
      "meta": {
        "range": [
          68662,
          68749
        ],
        "filename": "pattern.mjs",
        "lineno": 2291,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100030383",
          "name": "exports.press",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Syncopates a rhythm, by shifting each event halfway into its timespan.</p>",
      "examples": [
        "stack(s(\"hh*4\"),\n      s(\"bd mt sd ht\").every(4, press)\n     ).slow(2)"
      ],
      "name": "press",
      "longname": "press",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Silences a pattern.\n * @example\n * stack(\n *   s(\"bd\").hush(),\n *   s(\"hh*3\")\n * )\n */",
      "meta": {
        "range": [
          68845,
          68903
        ],
        "filename": "pattern.mjs",
        "lineno": 2303,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100030400",
          "name": "Pattern.prototype.hush",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "<p>Silences a pattern.</p>",
      "examples": [
        "stack(\n  s(\"bd\").hush(),\n  s(\"hh*3\")\n)"
      ],
      "name": "hush",
      "longname": "Pattern#hush",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n * Applies `rev` to a pattern every other cycle, so that the pattern alternates between forwards and backwards.\n * @example\n * note(\"c d e g\").palindrome()\n */",
      "meta": {
        "range": [
          69070,
          69195
        ],
        "filename": "pattern.mjs",
        "lineno": 2312,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100030410",
          "name": "exports.palindrome",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Applies <code>rev</code> to a pattern every other cycle, so that the pattern alternates between forwards and backwards.</p>",
      "examples": [
        "note(\"c d e g\").palindrome()"
      ],
      "name": "palindrome",
      "longname": "palindrome",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Jux with adjustable stereo width. 0 = mono, 1 = full stereo.\n * @name juxBy\n * @synonyms juxby\n * @example\n * s(\"bd lt [~ ht] mt cp ~ bd hh\").juxBy(\"<0 .5 1>/2\", rev)\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2321,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Jux with adjustable stereo width. 0 = mono, 1 = full stereo.</p>",
      "name": "juxBy",
      "synonyms_text": "juxby",
      "synonyms": [
        "juxby"
      ],
      "examples": [
        "s(\"bd lt [~ ht] mt cp ~ bd hh\").juxBy(\"<0 .5 1>/2\", rev)"
      ],
      "longname": "juxBy",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * The jux function creates strange stereo effects, by applying a function to a pattern, but only in the right-hand channel.\n * @example\n * s(\"bd lt [~ ht] mt cp ~ bd hh\").jux(rev)\n * @example\n * s(\"bd lt [~ ht] mt cp ~ bd hh\").jux(press)\n * @example\n * s(\"bd lt [~ ht] mt cp ~ bd hh\").jux(iter(4))\n */",
      "meta": {
        "range": [
          70214,
          70310
        ],
        "filename": "pattern.mjs",
        "lineno": 2351,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100030539",
          "name": "exports.jux",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>The jux function creates strange stereo effects, by applying a function to a pattern, but only in the right-hand channel.</p>",
      "examples": [
        "s(\"bd lt [~ ht] mt cp ~ bd hh\").jux(rev)",
        "s(\"bd lt [~ ht] mt cp ~ bd hh\").jux(press)",
        "s(\"bd lt [~ ht] mt cp ~ bd hh\").jux(iter(4))"
      ],
      "name": "jux",
      "longname": "jux",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Superimpose and offset multiple times, applying the given function each time.\n * @name echoWith\n * @synonyms echowith, stutWith, stutwith\n * @param {number} times how many times to repeat\n * @param {number} time cycle offset between iterations\n * @param {function} func function to apply, given the pattern and the iteration index\n * @example\n * \"<0 [2 4]>\"\n * .echoWith(4, 1/8, (p,n) => p.add(n*2))\n * .scale(\"C:minor\").note()\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2355,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Superimpose and offset multiple times, applying the given function each time.</p>",
      "name": "echoWith",
      "synonyms_text": "echowith, stutWith, stutwith",
      "synonyms": [
        "echowith",
        "stutWith",
        "stutwith"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>how many times to repeat</p>",
          "name": "times"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>cycle offset between iterations</p>",
          "name": "time"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>function to apply, given the pattern and the iteration index</p>",
          "name": "func"
        }
      ],
      "examples": [
        "\"<0 [2 4]>\"\n.echoWith(4, 1/8, (p,n) => p.add(n*2))\n.scale(\"C:minor\").note()"
      ],
      "longname": "echoWith",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Superimpose and offset multiple times, gradually decreasing the velocity\n * @name echo\n * @memberof Pattern\n * @returns Pattern\n * @param {number} times how many times to repeat\n * @param {number} time cycle offset between iterations\n * @param {number} feedback velocity multiplicator for each iteration\n * @example\n * s(\"bd sd\").echo(3, 1/6, .8)\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2374,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Superimpose and offset multiple times, gradually decreasing the velocity</p>",
      "name": "echo",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>how many times to repeat</p>",
          "name": "times"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>cycle offset between iterations</p>",
          "name": "time"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>velocity multiplicator for each iteration</p>",
          "name": "feedback"
        }
      ],
      "examples": [
        "s(\"bd sd\").echo(3, 1/6, .8)"
      ],
      "scope": "static",
      "longname": "Pattern.echo",
      "kind": "member"
    },
    {
      "comment": "/**\n * Deprecated. Like echo, but the last 2 parameters are flipped.\n * @name stut\n * @param {number} times how many times to repeat\n * @param {number} feedback velocity multiplicator for each iteration\n * @param {number} time cycle offset between iterations\n * @example\n * s(\"bd sd\").stut(3, .8, 1/6)\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2389,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Deprecated. Like echo, but the last 2 parameters are flipped.</p>",
      "name": "stut",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>how many times to repeat</p>",
          "name": "times"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>velocity multiplicator for each iteration</p>",
          "name": "feedback"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>cycle offset between iterations</p>",
          "name": "time"
        }
      ],
      "examples": [
        "s(\"bd sd\").stut(3, .8, 1/6)"
      ],
      "longname": "stut",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * The plyWith function repeats each event the given number of times, applying the given function to each event.\\n\n * @name plyWith\n * @synonyms plywith\n * @param {number} factor how many times to repeat\n * @param {function} func function to apply, given the pattern\n * @example\n * \"<0 [2 4]>\"\n * .plyWith(4, (p) => p.add(2))\n * .scale(\"C:minor\").note()\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2410,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>The plyWith function repeats each event the given number of times, applying the given function to each event.\\n</p>",
      "name": "plyWith",
      "synonyms_text": "plywith",
      "synonyms": [
        "plywith"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>how many times to repeat</p>",
          "name": "factor"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>function to apply, given the pattern</p>",
          "name": "func"
        }
      ],
      "examples": [
        "\"<0 [2 4]>\"\n.plyWith(4, (p) => p.add(2))\n.scale(\"C:minor\").note()"
      ],
      "longname": "plyWith",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * The plyForEach function repeats each event the given number of times, applying the given function to each event.\n * This version of ply uses the iteration index as an argument to the function, similar to echoWith.\n * @name plyForEach\n * @synonyms plyforeach\n * @param {number} factor how many times to repeat\n * @param {function} func function to apply, given the pattern and the iteration index\n * @example\n * \"<0 [2 4]>\"\n * .plyForEach(4, (p,n) => p.add(n*2))\n * .scale(\"C:minor\").note()\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2431,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>The plyForEach function repeats each event the given number of times, applying the given function to each event.\nThis version of ply uses the iteration index as an argument to the function, similar to echoWith.</p>",
      "name": "plyForEach",
      "synonyms_text": "plyforeach",
      "synonyms": [
        "plyforeach"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>how many times to repeat</p>",
          "name": "factor"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>function to apply, given the pattern and the iteration index</p>",
          "name": "func"
        }
      ],
      "examples": [
        "\"<0 [2 4]>\"\n.plyForEach(4, (p,n) => p.add(n*2))\n.scale(\"C:minor\").note()"
      ],
      "longname": "plyForEach",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Divides a pattern into a given number of subdivisions, plays the subdivisions in order, but increments the starting subdivision each cycle. The pattern wraps to the first subdivision after the last subdivision is played.\n * @name iter\n * @memberof Pattern\n * @returns Pattern\n * @example\n * note(\"0 1 2 3\".scale('A minor')).iter(4)\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2453,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Divides a pattern into a given number of subdivisions, plays the subdivisions in order, but increments the starting subdivision each cycle. The pattern wraps to the first subdivision after the last subdivision is played.</p>",
      "name": "iter",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "note(\"0 1 2 3\".scale('A minor')).iter(4)"
      ],
      "scope": "static",
      "longname": "Pattern.iter",
      "kind": "member"
    },
    {
      "comment": "/**\n * Like `iter`, but plays the subdivisions in reverse order. Known as iter' in tidalcycles\n * @name iterBack\n * @synonyms iterback\n * @memberof Pattern\n * @returns Pattern\n * @example\n * note(\"0 1 2 3\".scale('A minor')).iterBack(4)\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2480,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Like <code>iter</code>, but plays the subdivisions in reverse order. Known as iter' in tidalcycles</p>",
      "name": "iterBack",
      "synonyms_text": "iterback",
      "synonyms": [
        "iterback"
      ],
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "note(\"0 1 2 3\".scale('A minor')).iterBack(4)"
      ],
      "scope": "static",
      "longname": "Pattern.iterBack",
      "kind": "member"
    },
    {
      "comment": "/**\n * Repeats each cycle the given number of times.\n * @name repeatCycles\n * @memberof Pattern\n * @returns Pattern\n * @example\n * note(irand(12).add(34)).segment(4).repeatCycles(2).s(\"gm_acoustic_guitar_nylon\")\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2498,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Repeats each cycle the given number of times.</p>",
      "name": "repeatCycles",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "note(irand(12).add(34)).segment(4).repeatCycles(2).s(\"gm_acoustic_guitar_nylon\")"
      ],
      "scope": "static",
      "longname": "Pattern.repeatCycles",
      "kind": "member"
    },
    {
      "comment": "/**\n * Divides a pattern into a given number of parts, then cycles through those parts in turn, applying the given function to each part in turn (one part per cycle).\n * @name chunk\n * @synonyms slowChunk, slowchunk\n * @memberof Pattern\n * @returns Pattern\n * @example\n * \"0 1 2 3\".chunk(4, x=>x.add(7))\n * .scale(\"A:minor\").note()\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2521,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Divides a pattern into a given number of parts, then cycles through those parts in turn, applying the given function to each part in turn (one part per cycle).</p>",
      "name": "chunk",
      "synonyms_text": "slowChunk, slowchunk",
      "synonyms": [
        "slowChunk",
        "slowchunk"
      ],
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "\"0 1 2 3\".chunk(4, x=>x.add(7))\n.scale(\"A:minor\").note()"
      ],
      "scope": "static",
      "longname": "Pattern.chunk",
      "kind": "member"
    },
    {
      "comment": "/**\n * Like `chunk`, but cycles through the parts in reverse order. Known as chunk' in tidalcycles\n * @name chunkBack\n * @synonyms chunkback\n * @memberof Pattern\n * @returns Pattern\n * @example\n * \"0 1 2 3\".chunkBack(4, x=>x.add(7))\n * .scale(\"A:minor\").note()\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2552,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Like <code>chunk</code>, but cycles through the parts in reverse order. Known as chunk' in tidalcycles</p>",
      "name": "chunkBack",
      "synonyms_text": "chunkback",
      "synonyms": [
        "chunkback"
      ],
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "\"0 1 2 3\".chunkBack(4, x=>x.add(7))\n.scale(\"A:minor\").note()"
      ],
      "scope": "static",
      "longname": "Pattern.chunkBack",
      "kind": "member"
    },
    {
      "comment": "/**\n * Like `chunk`, but the cycles of the source pattern aren't repeated\n * for each set of chunks.\n * @name fastChunk\n * @synonyms fastchunk\n * @memberof Pattern\n * @returns Pattern\n * @example\n * \"<0 8> 1 2 3 4 5 6 7\"\n * .fastChunk(4, x => x.color('red')).slow(2)\n * .scale(\"C2:major\").note()\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2571,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Like <code>chunk</code>, but the cycles of the source pattern aren't repeated\nfor each set of chunks.</p>",
      "name": "fastChunk",
      "synonyms_text": "fastchunk",
      "synonyms": [
        "fastchunk"
      ],
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "\"<0 8> 1 2 3 4 5 6 7\"\n.fastChunk(4, x => x.color('red')).slow(2)\n.scale(\"C2:major\").note()"
      ],
      "scope": "static",
      "longname": "Pattern.fastChunk",
      "kind": "member"
    },
    {
      "comment": "/**\n * Like `chunk`, but the function is applied to a looped subcycle of the source pattern.\n * @name chunkInto\n * @synonyms chunkinto\n * @memberof Pattern\n * @example\n * sound(\"bd sd ht lt bd - cp lt\").chunkInto(4, hurry(2))\n *   .bank(\"tr909\")\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2592,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Like <code>chunk</code>, but the function is applied to a looped subcycle of the source pattern.</p>",
      "name": "chunkInto",
      "synonyms_text": "chunkinto",
      "synonyms": [
        "chunkinto"
      ],
      "memberof": "Pattern",
      "examples": [
        "sound(\"bd sd ht lt bd - cp lt\").chunkInto(4, hurry(2))\n  .bank(\"tr909\")"
      ],
      "scope": "static",
      "longname": "Pattern.chunkInto",
      "kind": "member"
    },
    {
      "comment": "/**\n * Like `chunkInto`, but moves backwards through the chunks.\n * @name chunkBackInto\n * @synonyms chunkbackinto\n * @memberof Pattern\n * @example\n * sound(\"bd sd ht lt bd - cp lt\").chunkInto(4, hurry(2))\n *   .bank(\"tr909\")\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2605,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Like <code>chunkInto</code>, but moves backwards through the chunks.</p>",
      "name": "chunkBackInto",
      "synonyms_text": "chunkbackinto",
      "synonyms": [
        "chunkbackinto"
      ],
      "memberof": "Pattern",
      "examples": [
        "sound(\"bd sd ht lt bd - cp lt\").chunkInto(4, hurry(2))\n  .bank(\"tr909\")"
      ],
      "scope": "static",
      "longname": "Pattern.chunkBackInto",
      "kind": "member"
    },
    {
      "comment": "/**\n * Loops the pattern inside an `offset` for `cycles`.\n * If you think of the entire span of time in cycles as a ribbon, you can cut a single piece and loop it.\n * @name ribbon\n * @synonyms rib\n * @param {number} offset start point of loop in cycles\n * @param {number} cycles loop length in cycles\n * @example\n * note(\"<c d e f>\").ribbon(1, 2)\n * @example\n * // Looping a portion of randomness\n * n(irand(8).segment(4)).scale(\"c:pentatonic\").ribbon(1337, 2)\n * @example\n * // rhythm generator\n * s(\"bd!16?\").ribbon(29,.5)\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2634,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Loops the pattern inside an <code>offset</code> for <code>cycles</code>.\nIf you think of the entire span of time in cycles as a ribbon, you can cut a single piece and loop it.</p>",
      "name": "ribbon",
      "synonyms_text": "rib",
      "synonyms": [
        "rib"
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>start point of loop in cycles</p>",
          "name": "offset"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>loop length in cycles</p>",
          "name": "cycles"
        }
      ],
      "examples": [
        "note(\"<c d e f>\").ribbon(1, 2)",
        "// Looping a portion of randomness\nn(irand(8).segment(4)).scale(\"c:pentatonic\").ribbon(1337, 2)",
        "// rhythm generator\ns(\"bd!16?\").ribbon(29,.5)"
      ],
      "longname": "ribbon",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Tags each Hap with an identifier. Good for filtering. The function populates Hap.context.tags (Array).\n * @name tag\n * @noAutocomplete\n * @param {string} tag anything unique\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2662,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Tags each Hap with an identifier. Good for filtering. The function populates Hap.context.tags (Array).</p>",
      "name": "tag",
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>anything unique</p>",
          "name": "tag"
        }
      ],
      "longname": "tag",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Filters haps using the given function\n * @name filter\n * @param {Function} test function to test Hap\n * @example\n * s(\"hh!7 oh\").filter(hap => hap.value.s==='hh')\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2672,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Filters haps using the given function</p>",
      "name": "filter",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>function to test Hap</p>",
          "name": "test"
        }
      ],
      "examples": [
        "s(\"hh!7 oh\").filter(hap => hap.value.s==='hh')"
      ],
      "longname": "filter",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Filters haps by their begin time\n * @name filterWhen\n * @noAutocomplete\n * @param {Function} test function to test Hap.whole.begin\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2681,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Filters haps by their begin time</p>",
      "name": "filterWhen",
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>function to test Hap.whole.begin</p>",
          "name": "test"
        }
      ],
      "longname": "filterWhen",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Use within to apply a function to only a part of a pattern.\n * @name within\n * @param {number} start start within cycle (0 - 1)\n * @param {number} end end within cycle (0 - 1). Must be > start\n * @param {Function} func function to be applied to the sub-pattern\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2689,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Use within to apply a function to only a part of a pattern.</p>",
      "name": "within",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>start within cycle (0 - 1)</p>",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>end within cycle (0 - 1). Must be &gt; start</p>",
          "name": "end"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>function to be applied to the sub-pattern</p>",
          "name": "func"
        }
      ],
      "longname": "within",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * *Experimental*\n *\n * Speeds a pattern up or down, to fit to the given number of steps per cycle.\n * @example\n * sound(\"bd sd cp\").pace(4)\n * // The same as sound(\"{bd sd cp}%4\") or sound(\"<bd sd cp>*4\")\n */",
      "meta": {
        "range": [
          83036,
          83331
        ],
        "filename": "pattern.mjs",
        "lineno": 2770,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100031919",
          "name": "exports.pace",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p><em>Experimental</em></p>\n<p>Speeds a pattern up or down, to fit to the given number of steps per cycle.</p>",
      "examples": [
        "sound(\"bd sd cp\").pace(4)\n// The same as sound(\"{bd sd cp}%4\") or sound(\"<bd sd cp>*4\")"
      ],
      "name": "pace",
      "longname": "pace",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * *Experimental*\n *\n * Aligns the steps of the patterns, creating polymeters. The patterns are repeated until they all fit the cycle. For example, in the below the first pattern is repeated twice, and the second is repeated three times, to fit the lowest common multiple of six steps.\n * @synonyms pm\n * @example\n * // The same as note(\"{c eb g, c2 g2}%6\")\n * polymeter(\"c eb g\", \"c2 g2\").note()\n *\n */",
      "meta": {
        "range": [
          84209,
          84717
        ],
        "filename": "pattern.mjs",
        "lineno": 2813,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100032072",
          "name": "exports.polymeter",
          "type": "FunctionDeclaration",
          "paramnames": [
            "args"
          ]
        }
      },
      "description": "<p><em>Experimental</em></p>\n<p>Aligns the steps of the patterns, creating polymeters. The patterns are repeated until they all fit the cycle. For example, in the below the first pattern is repeated twice, and the second is repeated three times, to fit the lowest common multiple of six steps.</p>",
      "synonyms_text": "pm",
      "synonyms": [
        "pm"
      ],
      "examples": [
        "// The same as note(\"{c eb g, c2 g2}%6\")\npolymeter(\"c eb g\", \"c2 g2\").note()"
      ],
      "name": "polymeter",
      "longname": "polymeter",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/** 'Concatenates' patterns like `fastcat`, but proportional to a number of steps per cycle.\n * The steps can either be inferred from the pattern, or provided as a [length, pattern] pair.\n * Has the alias `timecat`.\n * @name stepcat\n * @synonyms timeCat, timecat\n * @return {Pattern}\n * @example\n * stepcat([3,\"e3\"],[1, \"g3\"]).note()\n * // the same as \"e3@3 g3\".note()\n * @example\n * stepcat(\"bd sd cp\",\"hh hh\").sound()\n * // the same as \"bd sd cp hh hh\".sound()\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 2835,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>'Concatenates' patterns like <code>fastcat</code>, but proportional to a number of steps per cycle.\nThe steps can either be inferred from the pattern, or provided as a [length, pattern] pair.\nHas the alias <code>timecat</code>.</p>",
      "name": "stepcat",
      "synonyms_text": "timeCat, timecat",
      "synonyms": [
        "timeCat",
        "timecat"
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "stepcat([3,\"e3\"],[1, \"g3\"]).note()\n// the same as \"e3@3 g3\".note()",
        "stepcat(\"bd sd cp\",\"hh hh\").sound()\n// the same as \"bd sd cp hh hh\".sound()"
      ],
      "longname": "stepcat",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * *Experimental*\n *\n * Concatenates patterns stepwise, according to an inferred 'steps per cycle'.\n * Similar to `stepcat`, but if an argument is a list, the whole pattern will alternate between the elements in the list.\n *\n * @return {Pattern}\n * @example\n * stepalt([\"bd cp\", \"mt\"], \"bd\").sound()\n * // The same as \"bd cp bd mt bd\".sound()\n */",
      "meta": {
        "range": [
          86781,
          87328
        ],
        "filename": "pattern.mjs",
        "lineno": 2901,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100032443",
          "name": "exports.stepalt",
          "type": "FunctionDeclaration",
          "paramnames": [
            "groups"
          ]
        }
      },
      "description": "<p><em>Experimental</em></p>\n<p>Concatenates patterns stepwise, according to an inferred 'steps per cycle'.\nSimilar to <code>stepcat</code>, but if an argument is a list, the whole pattern will alternate between the elements in the list.</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "stepalt([\"bd cp\", \"mt\"], \"bd\").sound()\n// The same as \"bd cp bd mt bd\".sound()"
      ],
      "name": "stepalt",
      "longname": "stepalt",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/**\n * *Experimental*\n *\n * Takes the given number of steps from a pattern (dropping the rest).\n * A positive number will take steps from the start of a pattern, and a negative number from the end.\n * @return {Pattern}\n * @example\n * \"bd cp ht mt\".take(\"2\").sound()\n * // The same as \"bd cp\".sound()\n * @example\n * \"bd cp ht mt\".take(\"1 2 3\").sound()\n * // The same as \"bd bd cp bd cp ht\".sound()\n * @example\n * \"bd cp ht mt\".take(\"-1 -2 -3\").sound()\n * // The same as \"mt ht mt cp ht mt\".sound()\n */",
      "meta": {
        "range": [
          87831,
          88323
        ],
        "filename": "pattern.mjs",
        "lineno": 2933,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100032584",
          "name": "exports.take",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p><em>Experimental</em></p>\n<p>Takes the given number of steps from a pattern (dropping the rest).\nA positive number will take steps from the start of a pattern, and a negative number from the end.</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "\"bd cp ht mt\".take(\"2\").sound()\n// The same as \"bd cp\".sound()",
        "\"bd cp ht mt\".take(\"1 2 3\").sound()\n// The same as \"bd bd cp bd cp ht\".sound()",
        "\"bd cp ht mt\".take(\"-1 -2 -3\").sound()\n// The same as \"mt ht mt cp ht mt\".sound()"
      ],
      "name": "take",
      "longname": "take",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * *Experimental*\n *\n * Drops the given number of steps from a pattern.\n * A positive number will drop steps from the start of a pattern, and a negative number from the end.\n * @return {Pattern}\n * @example\n * \"tha dhi thom nam\".drop(\"1\").sound().bank(\"mridangam\")\n * @example\n * \"tha dhi thom nam\".drop(\"-1\").sound().bank(\"mridangam\")\n * @example\n * \"tha dhi thom nam\".drop(\"0 1 2 3\").sound().bank(\"mridangam\")\n * @example\n * \"tha dhi thom nam\".drop(\"0 -1 -2 -3\").sound().bank(\"mridangam\")\n */",
      "meta": {
        "range": [
          88824,
          89071
        ],
        "filename": "pattern.mjs",
        "lineno": 2976,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100032696",
          "name": "exports.drop",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p><em>Experimental</em></p>\n<p>Drops the given number of steps from a pattern.\nA positive number will drop steps from the start of a pattern, and a negative number from the end.</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "\"tha dhi thom nam\".drop(\"1\").sound().bank(\"mridangam\")",
        "\"tha dhi thom nam\".drop(\"-1\").sound().bank(\"mridangam\")",
        "\"tha dhi thom nam\".drop(\"0 1 2 3\").sound().bank(\"mridangam\")",
        "\"tha dhi thom nam\".drop(\"0 -1 -2 -3\").sound().bank(\"mridangam\")"
      ],
      "name": "drop",
      "longname": "drop",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * *Experimental*\n *\n * `extend` is similar to `fast` in that it increases its density, but it also increases the step count\n * accordingly. So `stepcat(\"a b\".extend(2), \"c d\")` would be the same as `\"a b a b c d\"`, whereas\n * `stepcat(\"a b\".fast(2), \"c d\")` would be the same as `\"[a b] [a b] c d\"`.\n * @example\n * stepcat(\n *   sound(\"bd bd - cp\").extend(2),\n *   sound(\"bd - sd -\")\n * ).pace(8)\n */",
      "meta": {
        "range": [
          89479,
          89594
        ],
        "filename": "pattern.mjs",
        "lineno": 3000,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100032758",
          "name": "exports.extend",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p><em>Experimental</em></p>\n<p><code>extend</code> is similar to <code>fast</code> in that it increases its density, but it also increases the step count\naccordingly. So <code>stepcat(&quot;a b&quot;.extend(2), &quot;c d&quot;)</code> would be the same as <code>&quot;a b a b c d&quot;</code>, whereas\n<code>stepcat(&quot;a b&quot;.fast(2), &quot;c d&quot;)</code> would be the same as <code>&quot;[a b] [a b] c d&quot;</code>.</p>",
      "examples": [
        "stepcat(\n  sound(\"bd bd - cp\").extend(2),\n  sound(\"bd - sd -\")\n).pace(8)"
      ],
      "name": "extend",
      "longname": "extend",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * *Experimental*\n *\n * Expands the step size of the pattern by the given factor.\n * @example\n * sound(\"tha dhi thom nam\").bank(\"mridangam\").expand(\"3 2 1 1 2 3\").pace(8)\n */",
      "meta": {
        "range": [
          89775,
          89904
        ],
        "filename": "pattern.mjs",
        "lineno": 3011,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100032779",
          "name": "exports.expand",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p><em>Experimental</em></p>\n<p>Expands the step size of the pattern by the given factor.</p>",
      "examples": [
        "sound(\"tha dhi thom nam\").bank(\"mridangam\").expand(\"3 2 1 1 2 3\").pace(8)"
      ],
      "name": "expand",
      "longname": "expand",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * *Experimental*\n *\n * Contracts the step size of the pattern by the given factor. See also `expand`.\n * @example\n * sound(\"tha dhi thom nam\").bank(\"mridangam\").contract(\"3 2 1 1 2 3\").pace(8)\n */",
      "meta": {
        "range": [
          90108,
          90241
        ],
        "filename": "pattern.mjs",
        "lineno": 3022,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100032804",
          "name": "exports.contract",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p><em>Experimental</em></p>\n<p>Contracts the step size of the pattern by the given factor. See also <code>expand</code>.</p>",
      "examples": [
        "sound(\"tha dhi thom nam\").bank(\"mridangam\").contract(\"3 2 1 1 2 3\").pace(8)"
      ],
      "name": "contract",
      "longname": "contract",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * *Experimental*\n *\n * Progressively shrinks the pattern by 'n' steps until there's nothing left, or if a second value is given (using mininotation list syntax with `:`),\n * that number of times.\n * A positive number will progressively drop steps from the start of a pattern, and a negative number from the end.\n * @return {Pattern}\n * @example\n * \"tha dhi thom nam\".shrink(\"1\").sound()\n * .bank(\"mridangam\")\n * @example\n * \"tha dhi thom nam\".shrink(\"-1\").sound()\n * .bank(\"mridangam\")\n * @example\n * \"tha dhi thom nam\".shrink(\"1 -1\").sound().bank(\"mridangam\").pace(4)\n * @example\n * note(\"0 1 2 3 4 5 6 7\".scale(\"C:ritusen\")).sound(\"folkharp\")\n   .shrink(\"1 -1\").pace(8)\n\n */",
      "meta": {
        "range": [
          91890,
          92272
        ],
        "filename": "pattern.mjs",
        "lineno": 3088,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100033044",
          "name": "exports.shrink",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p><em>Experimental</em></p>\n<p>Progressively shrinks the pattern by 'n' steps until there's nothing left, or if a second value is given (using mininotation list syntax with <code>:</code>),\nthat number of times.\nA positive number will progressively drop steps from the start of a pattern, and a negative number from the end.</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "\"tha dhi thom nam\".shrink(\"1\").sound()\n.bank(\"mridangam\")",
        "\"tha dhi thom nam\".shrink(\"-1\").sound()\n.bank(\"mridangam\")",
        "\"tha dhi thom nam\".shrink(\"1 -1\").sound().bank(\"mridangam\").pace(4)",
        "note(\"0 1 2 3 4 5 6 7\".scale(\"C:ritusen\")).sound(\"folkharp\")\n   .shrink(\"1 -1\").pace(8)"
      ],
      "name": "shrink",
      "longname": "shrink",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * *Experimental*\n *\n * Progressively grows the pattern by 'n' steps until the full pattern is played, or if a second value is given (using mininotation list syntax with `:`),\n * that number of times.\n * A positive number will progressively grow steps from the start of a pattern, and a negative number from the end.\n * @return {Pattern}\n * @example\n * \"tha dhi thom nam\".grow(\"1\").sound()\n * .bank(\"mridangam\")\n * @example\n * \"tha dhi thom nam\".grow(\"-1\").sound()\n * .bank(\"mridangam\")\n * @example\n * \"tha dhi thom nam\".grow(\"1 -1\").sound().bank(\"mridangam\").pace(4)\n * @example\n * note(\"0 1 2 3 4 5 6 7\".scale(\"C:ritusen\")).sound(\"folkharp\")\n   .grow(\"1 -1\").pace(8)\n */",
      "meta": {
        "range": [
          92952,
          93367
        ],
        "filename": "pattern.mjs",
        "lineno": 3126,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100033110",
          "name": "exports.grow",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p><em>Experimental</em></p>\n<p>Progressively grows the pattern by 'n' steps until the full pattern is played, or if a second value is given (using mininotation list syntax with <code>:</code>),\nthat number of times.\nA positive number will progressively grow steps from the start of a pattern, and a negative number from the end.</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "\"tha dhi thom nam\".grow(\"1\").sound()\n.bank(\"mridangam\")",
        "\"tha dhi thom nam\".grow(\"-1\").sound()\n.bank(\"mridangam\")",
        "\"tha dhi thom nam\".grow(\"1 -1\").sound().bank(\"mridangam\").pace(4)",
        "note(\"0 1 2 3 4 5 6 7\".scale(\"C:ritusen\")).sound(\"folkharp\")\n   .grow(\"1 -1\").pace(8)"
      ],
      "name": "grow",
      "longname": "grow",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * *Experimental*\n * \n * Inserts a pattern into a list of patterns. On the first repetition it will be inserted at the end of the list, then moved backwards through the list \n * on successive repetitions. The patterns are added together stepwise, with all repetitions taking place over a single cycle. Using `pace` to set the \n * number of steps per cycle is therefore usually recommended.\n * \n * @return {Pattern}\n * @example\n * \"[c g]\".tour(\"e f\", \"e f g\", \"g f e c\").note()\n   .sound(\"folkharp\")\n   .pace(8)\n */",
      "meta": {
        "range": [
          93888,
          93964
        ],
        "filename": "pattern.mjs",
        "lineno": 3158,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100033187",
          "name": "exports.tour",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p><em>Experimental</em></p>\n<p>Inserts a pattern into a list of patterns. On the first repetition it will be inserted at the end of the list, then moved backwards through the list\non successive repetitions. The patterns are added together stepwise, with all repetitions taking place over a single cycle. Using <code>pace</code> to set the\nnumber of steps per cycle is therefore usually recommended.</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "\"[c g]\".tour(\"e f\", \"e f g\", \"g f e c\").note()\n   .sound(\"folkharp\")\n   .pace(8)"
      ],
      "name": "tour",
      "longname": "tour",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * *Experimental*\n * \n * 'zips' together the steps of the provided patterns. This can create a long repetition, taking place over a single, dense cycle. \n * Using `pace` to set the number of steps per cycle is therefore usually recommended.\n * \n * @returns {Pattern}\n * @example\n * zip(\"e f\", \"e f g\", \"g [f e] a f4 c\").note()\n   .sound(\"folkharp\")\n   .pace(8)\n */",
      "meta": {
        "range": [
          94564,
          94819
        ],
        "filename": "pattern.mjs",
        "lineno": 3184,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100033256",
          "name": "exports.zip",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p><em>Experimental</em></p>\n<p>'zips' together the steps of the provided patterns. This can create a long repetition, taking place over a single, dense cycle.\nUsing <code>pace</code> to set the number of steps per cycle is therefore usually recommended.</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "zip(\"e f\", \"e f g\", \"g [f e] a f4 c\").note()\n   .sound(\"folkharp\")\n   .pace(8)"
      ],
      "name": "zip",
      "longname": "zip",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/** Aliases for `stepcat` */",
      "meta": {
        "range": [
          94850,
          94881
        ],
        "filename": "pattern.mjs",
        "lineno": 3192,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100033320",
          "name": "exports.timecat",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Aliases for <code>stepcat</code></p>",
      "name": "timecat",
      "longname": "timecat",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Cuts each sample into the given number of parts, allowing you to explore a technique known as 'granular synthesis'.\n * It turns a pattern of samples into a pattern of parts of samples.\n * @name chop\n * @memberof Pattern\n * @returns Pattern\n * @example\n * samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })\n * s(\"rhodes\")\n *  .chop(4)\n *  .rev() // reverse order of chops\n *  .loopAt(2) // fit sample into 2 cycles\n *\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 3225,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Cuts each sample into the given number of parts, allowing you to explore a technique known as 'granular synthesis'.\nIt turns a pattern of samples into a pattern of parts of samples.</p>",
      "name": "chop",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })\ns(\"rhodes\")\n .chop(4)\n .rev() // reverse order of chops\n .loopAt(2) // fit sample into 2 cycles"
      ],
      "scope": "static",
      "longname": "Pattern.chop",
      "kind": "member"
    },
    {
      "comment": "/**\n * Cuts each sample into the given number of parts, triggering progressive portions of each sample at each loop.\n * @name striate\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"numbers:0 numbers:1 numbers:2\").striate(6).slow(3)\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 3256,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Cuts each sample into the given number of parts, triggering progressive portions of each sample at each loop.</p>",
      "name": "striate",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"numbers:0 numbers:1 numbers:2\").striate(6).slow(3)"
      ],
      "scope": "static",
      "longname": "Pattern.striate",
      "kind": "member"
    },
    {
      "comment": "/**\n * Makes the sample fit the given number of cycles by changing the speed.\n * @name loopAt\n * @memberof Pattern\n * @returns Pattern\n * @example\n * samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })\n * s(\"rhodes\").loopAt(2)\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 3274,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Makes the sample fit the given number of cycles by changing the speed.</p>",
      "name": "loopAt",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })\ns(\"rhodes\").loopAt(2)"
      ],
      "scope": "static",
      "longname": "Pattern.loopAt",
      "kind": "member"
    },
    {
      "comment": "/**\n * Chops samples into the given number of slices, triggering those slices with a given pattern of slice numbers.\n * Instead of a number, it also accepts a list of numbers from 0 to 1 to slice at specific points.\n * @name slice\n * @memberof Pattern\n * @returns Pattern\n * @example\n * samples('github:tidalcycles/dirt-samples')\n * s(\"breaks165\").slice(8, \"0 1 <2 2*2> 3 [4 0] 5 6 7\".every(3, rev)).slow(0.75)\n * @example\n * samples('github:tidalcycles/dirt-samples')\n * s(\"breaks125\").fit().slice([0,.25,.5,.75], \"0 1 1 <2 3>\")\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 3291,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Chops samples into the given number of slices, triggering those slices with a given pattern of slice numbers.\nInstead of a number, it also accepts a list of numbers from 0 to 1 to slice at specific points.</p>",
      "name": "slice",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "samples('github:tidalcycles/dirt-samples')\ns(\"breaks165\").slice(8, \"0 1 <2 2*2> 3 [4 0] 5 6 7\".every(3, rev)).slow(0.75)",
        "samples('github:tidalcycles/dirt-samples')\ns(\"breaks125\").fit().slice([0,.25,.5,.75], \"0 1 1 <2 3>\")"
      ],
      "scope": "static",
      "longname": "Pattern.slice",
      "kind": "member"
    },
    {
      "comment": "/**\n *\n * make something happen on event time\n * uses browser timeout which is innacurate for audio tasks\n * @name onTriggerTime\n * @memberof Pattern\n *  @returns Pattern\n * @example\n * s(\"bd!8\").onTriggerTime((hap) => {console.log(hap)})\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 3325,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>make something happen on event time\nuses browser timeout which is innacurate for audio tasks</p>",
      "name": "onTriggerTime",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"bd!8\").onTriggerTime((hap) => {console.log(hap)})"
      ],
      "scope": "static",
      "longname": "Pattern.onTriggerTime",
      "kind": "member"
    },
    {
      "comment": "/**\n * Works the same as slice, but changes the playback speed of each slice to match the duration of its step.\n * @name splice\n * @example\n * samples('github:tidalcycles/dirt-samples')\n * s(\"breaks165\")\n * .splice(8,  \"0 1 [2 3 0]@2 3 0@2 7\")\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 3344,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Works the same as slice, but changes the playback speed of each slice to match the duration of its step.</p>",
      "name": "splice",
      "examples": [
        "samples('github:tidalcycles/dirt-samples')\ns(\"breaks165\")\n.splice(8,  \"0 1 [2 3 0]@2 3 0@2 7\")"
      ],
      "longname": "splice",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Makes the sample fit its event duration. Good for rhythmical loops like drum breaks.\n * Similar to `loopAt`.\n * @name fit\n * @example\n * samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })\n * s(\"rhodes/2\").fit()\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 3380,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Makes the sample fit its event duration. Good for rhythmical loops like drum breaks.\nSimilar to <code>loopAt</code>.</p>",
      "name": "fit",
      "examples": [
        "samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })\ns(\"rhodes/2\").fit()"
      ],
      "longname": "fit",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Makes the sample fit the given number of cycles and cps value, by\n * changing the speed. Please note that at some point cps will be\n * given by a global clock and this function will be\n * deprecated/removed.\n * @name loopAtCps\n * @memberof Pattern\n * @returns Pattern\n * @example\n * samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })\n * s(\"rhodes\").loopAtCps(4,1.5).cps(1.5)\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 3403,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Makes the sample fit the given number of cycles and cps value, by\nchanging the speed. Please note that at some point cps will be\ngiven by a global clock and this function will be\ndeprecated/removed.</p>",
      "name": "loopAtCps",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })\ns(\"rhodes\").loopAtCps(4,1.5).cps(1.5)"
      ],
      "scope": "static",
      "longname": "Pattern.loopAtCps",
      "kind": "member"
    },
    {
      "comment": "/** exposes a custom value at query time. basically allows mutating state without evaluation */",
      "meta": {
        "range": [
          102351,
          102451
        ],
        "filename": "pattern.mjs",
        "lineno": 3421,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100034160",
          "name": "exports.ref",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>exposes a custom value at query time. basically allows mutating state without evaluation</p>",
      "name": "ref",
      "longname": "ref",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Cross-fades between left and right from 0 to 1:\n * - 0 = (full left, no right)\n * - .5 = (both equal)\n * - 1 = (no left, full right)\n *\n * @name xfade\n * @example\n * xfade(s(\"bd*2\"), \"<0 .25 .5 .75 1>\", s(\"hh*8\"))\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 3428,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Cross-fades between left and right from 0 to 1:</p>\n<ul>\n<li>0 = (full left, no right)</li>\n<li>.5 = (both equal)</li>\n<li>1 = (no left, full right)</li>\n</ul>",
      "name": "xfade",
      "examples": [
        "xfade(s(\"bd*2\"), \"<0 .25 .5 .75 1>\", s(\"hh*8\"))"
      ],
      "longname": "xfade",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * creates a structure pattern from divisions of a cycle\n * especially useful for creating rhythms\n * @name beat\n * @example\n * s(\"bd\").beat(\"0,7,10\", 16)\n * @example\n * s(\"sd\").beat(\"4,12\", 16)\n */",
      "meta": {
        "filename": "pattern.mjs",
        "lineno": 3452,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>creates a structure pattern from divisions of a cycle\nespecially useful for creating rhythms</p>",
      "name": "beat",
      "examples": [
        "s(\"bd\").beat(\"0,7,10\", 16)",
        "s(\"sd\").beat(\"4,12\", 16)"
      ],
      "longname": "beat",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Takes two binary rhythms represented as lists of 1s and 0s, and a number\n * between 0 and 1 that morphs between them. The two lists should contain the same\n * number of true values.\n * @example\n * sound(\"hh\").struct(morph([1,0,1,0,1,0,1,0], // straight rhythm\n *                          [1,1,0,1,0,1,0], // wonky rhythm\n *                          0.25 // creates a slightly wonky rhythm\n *                         )\n *                   )\n * @example\n * sound(\"hh\").struct(morph(\"1:0:1:0:1:0:1:0\", // straight rhythm\n *                          \"1:1:0:1:0:1:0\", // wonky rhythm\n *                          sine.slow(8) // slowly morph between the rhythms\n *                         )\n *                   )\n */",
      "meta": {
        "range": [
          105425,
          105663
        ],
        "filename": "pattern.mjs",
        "lineno": 3533,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100034560",
          "name": "exports.morph",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Takes two binary rhythms represented as lists of 1s and 0s, and a number\nbetween 0 and 1 that morphs between them. The two lists should contain the same\nnumber of true values.</p>",
      "examples": [
        "sound(\"hh\").struct(morph([1,0,1,0,1,0,1,0], // straight rhythm\n                         [1,1,0,1,0,1,0], // wonky rhythm\n                         0.25 // creates a slightly wonky rhythm\n                        )\n                  )",
        "sound(\"hh\").struct(morph(\"1:0:1:0:1:0:1:0\", // straight rhythm\n                         \"1:1:0:1:0:1:0\", // wonky rhythm\n                         sine.slow(8) // slowly morph between the rhythms\n                        )\n                  )"
      ],
      "name": "morph",
      "longname": "morph",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/** * Picks patterns (or plain values) either from a list (by index) or a lookup table (by name).\n * Similar to `inhabit`, but maintains the structure of the original patterns.\n * @param {Pattern} pat\n * @param {*} xs\n * @returns {Pattern}\n * @example\n * note(\"<0 1 2!2 3>\".pick([\"g a\", \"e f\", \"f g f g\" , \"g c d\"]))\n * @example\n * sound(\"<0 1 [2,0]>\".pick([\"bd sd\", \"cp cp\", \"hh hh\"]))\n * @example\n * sound(\"<0!2 [0,1] 1>\".pick([\"bd(3,8)\", \"sd sd\"]))\n * @example\n * s(\"<a!2 [a,b] b>\".pick({a: \"bd(3,8)\", b: \"sd sd\"}))\n */",
      "meta": {
        "range": [
          1892,
          2094
        ],
        "filename": "pick.mjs",
        "lineno": 44,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100034717",
          "name": "exports.pick",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Picks patterns (or plain values) either from a list (by index) or a lookup table (by name).\nSimilar to <code>inhabit</code>, but maintains the structure of the original patterns.</p>",
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "pat"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "xs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "note(\"<0 1 2!2 3>\".pick([\"g a\", \"e f\", \"f g f g\" , \"g c d\"]))",
        "sound(\"<0 1 [2,0]>\".pick([\"bd sd\", \"cp cp\", \"hh hh\"]))",
        "sound(\"<0!2 [0,1] 1>\".pick([\"bd(3,8)\", \"sd sd\"]))",
        "s(\"<a!2 [a,b] b>\".pick({a: \"bd(3,8)\", b: \"sd sd\"}))"
      ],
      "name": "pick",
      "longname": "pick",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/** * The same as `pick`, but if you pick a number greater than the size of the list,\n * it wraps around, rather than sticking at the maximum value.\n * For example, if you pick the fifth pattern of a list of three, you'll get the\n * second one.\n * @param {Pattern} pat\n * @param {*} xs\n * @returns {Pattern}\n */",
      "meta": {
        "range": [
          2519,
          2637
        ],
        "filename": "pick.mjs",
        "lineno": 65,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100034762",
          "name": "exports.pickmod",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>The same as <code>pick</code>, but if you pick a number greater than the size of the list,\nit wraps around, rather than sticking at the maximum value.\nFor example, if you pick the fifth pattern of a list of three, you'll get the\nsecond one.</p>",
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "pat"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "xs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "pickmod",
      "longname": "pickmod",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/** * pickF lets you use a pattern of numbers to pick which function to apply to another pattern.\n * @param {Pattern} pat\n * @param {Pattern} lookup a pattern of indices\n * @param {function[]} funcs the array of functions from which to pull\n * @returns {Pattern}\n * @example\n * s(\"bd [rim hh]\").pickF(\"<0 1 2>\", [rev,jux(rev),fast(2)])\n * @example\n * note(\"<c2 d2>(3,8)\").s(\"square\")\n *     .pickF(\"<0 2> 1\", [jux(rev),fast(2),x=>x.lpf(800)])\n */",
      "meta": {
        "range": [
          3086,
          3201
        ],
        "filename": "pick.mjs",
        "lineno": 80,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100034782",
          "name": "exports.pickF",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>pickF lets you use a pattern of numbers to pick which function to apply to another pattern.</p>",
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "pat"
        },
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "description": "<p>a pattern of indices</p>",
          "name": "lookup"
        },
        {
          "type": {
            "names": [
              "Array.<function()>"
            ]
          },
          "description": "<p>the array of functions from which to pull</p>",
          "name": "funcs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "s(\"bd [rim hh]\").pickF(\"<0 1 2>\", [rev,jux(rev),fast(2)])",
        "note(\"<c2 d2>(3,8)\").s(\"square\")\n    .pickF(\"<0 2> 1\", [jux(rev),fast(2),x=>x.lpf(800)])"
      ],
      "name": "pickF",
      "longname": "pickF",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/** * The same as `pickF`, but if you pick a number greater than the size of the functions list,\n * it wraps around, rather than sticking at the maximum value.\n * @param {Pattern} pat\n * @param {Pattern} lookup a pattern of indices\n * @param {function[]} funcs the array of functions from which to pull\n * @returns {Pattern}\n */",
      "meta": {
        "range": [
          3532,
          3656
        ],
        "filename": "pick.mjs",
        "lineno": 91,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100034803",
          "name": "exports.pickmodF",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>The same as <code>pickF</code>, but if you pick a number greater than the size of the functions list,\nit wraps around, rather than sticking at the maximum value.</p>",
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "pat"
        },
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "description": "<p>a pattern of indices</p>",
          "name": "lookup"
        },
        {
          "type": {
            "names": [
              "Array.<function()>"
            ]
          },
          "description": "<p>the array of functions from which to pull</p>",
          "name": "funcs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "pickmodF",
      "longname": "pickmodF",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/** * Similar to `pick`, but it applies an outerJoin instead of an innerJoin.\n * @param {Pattern} pat\n * @param {*} xs\n * @returns {Pattern}\n */",
      "meta": {
        "range": [
          3803,
          3922
        ],
        "filename": "pick.mjs",
        "lineno": 100,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100034824",
          "name": "exports.pickOut",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Similar to <code>pick</code>, but it applies an outerJoin instead of an innerJoin.</p>",
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "pat"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "xs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "pickOut",
      "longname": "pickOut",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/** * The same as `pickOut`, but if you pick a number greater than the size of the list,\n * it wraps around, rather than sticking at the maximum value.\n * @param {Pattern} pat\n * @param {*} xs\n * @returns {Pattern}\n */",
      "meta": {
        "range": [
          4143,
          4267
        ],
        "filename": "pick.mjs",
        "lineno": 110,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100034844",
          "name": "exports.pickmodOut",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>The same as <code>pickOut</code>, but if you pick a number greater than the size of the list,\nit wraps around, rather than sticking at the maximum value.</p>",
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "pat"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "xs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "pickmodOut",
      "longname": "pickmodOut",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/** * Similar to `pick`, but the choosen pattern is restarted when its index is triggered.\n * @param {Pattern} pat\n * @param {*} xs\n * @returns {Pattern}\n */",
      "meta": {
        "range": [
          4427,
          4556
        ],
        "filename": "pick.mjs",
        "lineno": 119,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100034864",
          "name": "exports.pickRestart",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Similar to <code>pick</code>, but the choosen pattern is restarted when its index is triggered.</p>",
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "pat"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "xs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "pickRestart",
      "longname": "pickRestart",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/** * The same as `pickRestart`, but if you pick a number greater than the size of the list,\n   * it wraps around, rather than sticking at the maximum value.\n   * @param {Pattern} pat\n   * @param {*} xs\n   * @returns {Pattern}\n   * @example\n   * \"<a@2 b@2 c@2 d@2>\".pickRestart({\n        a: n(\"0 1 2 0\"),\n        b: n(\"2 3 4 ~\"),\n        c: n(\"[4 5] [4 3] 2 0\"),\n        d: n(\"0 -3 0 ~\")\n      }).scale(\"C:major\").s(\"piano\")\n   */",
      "meta": {
        "range": [
          4989,
          5123
        ],
        "filename": "pick.mjs",
        "lineno": 136,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100034884",
          "name": "exports.pickmodRestart",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>The same as <code>pickRestart</code>, but if you pick a number greater than the size of the list,\nit wraps around, rather than sticking at the maximum value.</p>",
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "pat"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "xs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "\"<a@2 b@2 c@2 d@2>\".pickRestart({\n        a: n(\"0 1 2 0\"),\n        b: n(\"2 3 4 ~\"),\n        c: n(\"[4 5] [4 3] 2 0\"),\n        d: n(\"0 -3 0 ~\")\n      }).scale(\"C:major\").s(\"piano\")"
      ],
      "name": "pickmodRestart",
      "longname": "pickmodRestart",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/** * Similar to `pick`, but the choosen pattern is reset when its index is triggered.\n * @param {Pattern} pat\n * @param {*} xs\n * @returns {Pattern}\n */",
      "meta": {
        "range": [
          5279,
          5402
        ],
        "filename": "pick.mjs",
        "lineno": 145,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100034904",
          "name": "exports.pickReset",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Similar to <code>pick</code>, but the choosen pattern is reset when its index is triggered.</p>",
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "pat"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "xs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "pickReset",
      "longname": "pickReset",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/** * The same as `pickReset`, but if you pick a number greater than the size of the list,\n * it wraps around, rather than sticking at the maximum value.\n * @param {Pattern} pat\n * @param {*} xs\n * @returns {Pattern}\n */",
      "meta": {
        "range": [
          5625,
          5753
        ],
        "filename": "pick.mjs",
        "lineno": 155,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100034924",
          "name": "exports.pickmodReset",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>The same as <code>pickReset</code>, but if you pick a number greater than the size of the list,\nit wraps around, rather than sticking at the maximum value.</p>",
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "pat"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "xs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "pickmodReset",
      "longname": "pickmodReset",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/** Picks patterns (or plain values) either from a list (by index) or a lookup table (by name).\n   * Similar to `pick`, but cycles are squeezed into the target ('inhabited') pattern.\n   * @name inhabit\n   * @synonyms pickSqueeze\n   * @param {Pattern} pat\n   * @param {*} xs\n   * @returns {Pattern}\n   * @example\n   * \"<a b [a,b]>\".inhabit({a: s(\"bd(3,8)\"),\n                            b: s(\"cp sd\")\n                           })\n   * @example\n   * s(\"a@2 [a b] a\".inhabit({a: \"bd(3,8)\", b: \"sd sd\"})).slow(4)\n   */",
      "meta": {
        "filename": "pick.mjs",
        "lineno": 159,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Picks patterns (or plain values) either from a list (by index) or a lookup table (by name).\nSimilar to <code>pick</code>, but cycles are squeezed into the target ('inhabited') pattern.</p>",
      "name": "inhabit",
      "synonyms_text": "pickSqueeze",
      "synonyms": [
        "pickSqueeze"
      ],
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "pat"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "xs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "\"<a b [a,b]>\".inhabit({a: s(\"bd(3,8)\"),\n                            b: s(\"cp sd\")\n                           })",
        "s(\"a@2 [a b] a\".inhabit({a: \"bd(3,8)\", b: \"sd sd\"})).slow(4)"
      ],
      "longname": "inhabit",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/** * The same as `inhabit`, but if you pick a number greater than the size of the list,\n * it wraps around, rather than sticking at the maximum value.\n * For example, if you pick the fifth pattern of a list of three, you'll get the\n * second one.\n * @name inhabitmod\n * @synonyms pickmodSqueeze\n * @param {Pattern} pat\n * @param {*} xs\n * @returns {Pattern}\n */",
      "meta": {
        "filename": "pick.mjs",
        "lineno": 177,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>The same as <code>inhabit</code>, but if you pick a number greater than the size of the list,\nit wraps around, rather than sticking at the maximum value.\nFor example, if you pick the fifth pattern of a list of three, you'll get the\nsecond one.</p>",
      "name": "inhabitmod",
      "synonyms_text": "pickmodSqueeze",
      "synonyms": [
        "pickmodSqueeze"
      ],
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "pat"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "xs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "longname": "inhabitmod",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Pick from the list of values (or patterns of values) via the index using the given\n * pattern of integers. The selected pattern will be compressed to fit the duration of the selecting event\n * @param {Pattern} pat\n * @param {*} xs\n * @returns {Pattern}\n * @example\n * note(squeeze(\"<0@2 [1!2] 2>\", [\"g a\", \"f g f g\" , \"g a c d\"]))\n */",
      "meta": {
        "range": [
          7302,
          7543
        ],
        "filename": "pick.mjs",
        "lineno": 202,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100034996",
          "name": "exports.squeeze",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Pick from the list of values (or patterns of values) via the index using the given\npattern of integers. The selected pattern will be compressed to fit the duration of the selecting event</p>",
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "pat"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "xs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "note(squeeze(\"<0@2 [1!2] 2>\", [\"g a\", \"f g f g\" , \"g a c d\"]))"
      ],
      "name": "squeeze",
      "longname": "squeeze",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n   * Changes the global tempo to the given cycles per minute\n   *\n   * @name setcpm\n   * @alias setCpm\n   * @param {number} cpm cycles per minute\n   * @example\n   * setcpm(140/4) // =140 bpm in 4/4\n   * $: s(\"bd*4,[- sd]*2\").bank('tr707')\n   */",
      "meta": {
        "filename": "repl.mjs",
        "lineno": 90,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Changes the global tempo to the given cycles per minute</p>",
      "name": "setcpm",
      "alias": "setCpm",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>cycles per minute</p>",
          "name": "cpm"
        }
      ],
      "examples": [
        "setcpm(140/4) // =140 bpm in 4/4\n$: s(\"bd*4,[- sd]*2\").bank('tr707')"
      ],
      "longname": "setcpm",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/** Applies a function to all the running patterns. Note that the patterns are groups together into a single `stack` before the function is applied. This is probably what you want, but see `each` for\n   * a version that applies the function to each pattern separately.\n   * ```\n   * $: sound(\"bd - cp sd\")\n   * $: sound(\"hh*8\")\n   * all(fast(\"<2 3>\"))\n   * ```\n   * ```\n   * $: sound(\"bd - cp sd\")\n   * $: sound(\"hh*8\")\n   * all(x => x.pianoroll())\n   * ```\n   */",
      "meta": {
        "range": [
          3200,
          3218
        ],
        "filename": "repl.mjs",
        "lineno": 117,
        "columnno": 6,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100035368",
          "name": "allTransforms",
          "type": "ArrayExpression",
          "value": "[]"
        }
      },
      "description": "<p>Applies a function to all the running patterns. Note that the patterns are groups together into a single <code>stack</code> before the function is applied. This is probably what you want, but see <code>each</code> for\na version that applies the function to each pattern separately.</p>\n<pre class=\"prettyprint source\"><code>$: sound(&quot;bd - cp sd&quot;)\n$: sound(&quot;hh*8&quot;)\nall(fast(&quot;&lt;2 3>&quot;))\n</code></pre>\n<pre class=\"prettyprint source\"><code>$: sound(&quot;bd - cp sd&quot;)\n$: sound(&quot;hh*8&quot;)\nall(x => x.pianoroll())\n</code></pre>",
      "name": "allTransforms",
      "longname": "repl~allTransforms",
      "kind": "member",
      "memberof": "repl",
      "scope": "inner",
      "params": []
    },
    {
      "comment": "/** Applies a function to each of the running patterns separately. This is intended for future use with upcoming 'stepwise' features. See `all` for a version that applies the function to all the patterns stacked together into a single pattern.\n   * ```\n   * $: sound(\"bd - cp sd\")\n   * $: sound(\"hh*8\")\n   * each(fast(\"<2 3>\"))\n   * ```\n   */",
      "meta": {
        "range": [
          3670,
          3754
        ],
        "filename": "repl.mjs",
        "lineno": 129,
        "columnno": 8,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100035386",
          "name": "each",
          "type": "FunctionExpression"
        },
        "vars": {
          "eachTransform": "repl~each~eachTransform"
        }
      },
      "description": "<p>Applies a function to each of the running patterns separately. This is intended for future use with upcoming 'stepwise' features. See <code>all</code> for a version that applies the function to all the patterns stacked together into a single pattern.</p>\n<pre class=\"prettyprint source\"><code>$: sound(&quot;bd - cp sd&quot;)\n$: sound(&quot;hh*8&quot;)\neach(fast(&quot;&lt;2 3>&quot;))\n</code></pre>",
      "name": "each",
      "longname": "repl~each",
      "kind": "function",
      "memberof": "repl",
      "scope": "inner",
      "params": []
    },
    {
      "comment": "/**\n *  A sawtooth signal between 0 and 1.\n *\n * @return {Pattern}\n * @example\n * note(\"<c3 [eb3,g3] g2 [g3,bb3]>*8\")\n * .clip(saw.slow(2))\n * @example\n * n(saw.range(0,8).segment(8))\n * .scale('C major')\n *\n */",
      "meta": {
        "range": [
          1533,
          1573
        ],
        "filename": "signal.mjs",
        "lineno": 35,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036010",
          "name": "exports.saw",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>A sawtooth signal between 0 and 1.</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "note(\"<c3 [eb3,g3] g2 [g3,bb3]>*8\")\n.clip(saw.slow(2))",
        "n(saw.range(0,8).segment(8))\n.scale('C major')"
      ],
      "name": "saw",
      "longname": "saw",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n *  A sawtooth signal between -1 and 1 (like `saw`, but bipolar).\n *\n * @return {Pattern}\n */",
      "meta": {
        "range": [
          1673,
          1709
        ],
        "filename": "signal.mjs",
        "lineno": 42,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036021",
          "name": "exports.saw2",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>A sawtooth signal between -1 and 1 (like <code>saw</code>, but bipolar).</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "saw2",
      "longname": "saw2",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n *  A sawtooth signal between 1 and 0 (like `saw`, but flipped).\n *\n * @return {Pattern}\n * @example\n * note(\"<c3 [eb3,g3] g2 [g3,bb3]>*8\")\n * .clip(isaw.slow(2))\n * @example\n * n(isaw.range(0,8).segment(8))\n * .scale('C major')\n *\n */",
      "meta": {
        "range": [
          1951,
          1998
        ],
        "filename": "signal.mjs",
        "lineno": 56,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036029",
          "name": "exports.isaw",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>A sawtooth signal between 1 and 0 (like <code>saw</code>, but flipped).</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "note(\"<c3 [eb3,g3] g2 [g3,bb3]>*8\")\n.clip(isaw.slow(2))",
        "n(isaw.range(0,8).segment(8))\n.scale('C major')"
      ],
      "name": "isaw",
      "longname": "isaw",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n *  A sawtooth signal between 1 and -1 (like `saw2`, but flipped).\n *\n * @return {Pattern}\n */",
      "meta": {
        "range": [
          2099,
          2137
        ],
        "filename": "signal.mjs",
        "lineno": 63,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036042",
          "name": "exports.isaw2",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>A sawtooth signal between 1 and -1 (like <code>saw2</code>, but flipped).</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "isaw2",
      "longname": "isaw2",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n *  A sine signal between -1 and 1 (like `sine`, but bipolar).\n *\n * @return {Pattern}\n */",
      "meta": {
        "range": [
          2234,
          2296
        ],
        "filename": "signal.mjs",
        "lineno": 70,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036050",
          "name": "exports.sine2",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>A sine signal between -1 and 1 (like <code>sine</code>, but bipolar).</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "sine2",
      "longname": "sine2",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n *  A sine signal between 0 and 1.\n * @return {Pattern}\n * @example\n * n(sine.segment(16).range(0,15))\n * .scale(\"C:minor\")\n *\n */",
      "meta": {
        "range": [
          2433,
          2473
        ],
        "filename": "signal.mjs",
        "lineno": 80,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036069",
          "name": "exports.sine",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>A sine signal between 0 and 1.</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "n(sine.segment(16).range(0,15))\n.scale(\"C:minor\")"
      ],
      "name": "sine",
      "longname": "sine",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n *  A cosine signal between 0 and 1.\n *\n * @return {Pattern}\n * @example\n * n(stack(sine,cosine).segment(16).range(0,15))\n * .scale(\"C:minor\")\n *\n */",
      "meta": {
        "range": [
          2629,
          2683
        ],
        "filename": "signal.mjs",
        "lineno": 91,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036077",
          "name": "exports.cosine",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>A cosine signal between 0 and 1.</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "n(stack(sine,cosine).segment(16).range(0,15))\n.scale(\"C:minor\")"
      ],
      "name": "cosine",
      "longname": "cosine",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n *  A cosine signal between -1 and 1 (like `cosine`, but bipolar).\n *\n * @return {Pattern}\n */",
      "meta": {
        "range": [
          2784,
          2840
        ],
        "filename": "signal.mjs",
        "lineno": 98,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036092",
          "name": "exports.cosine2",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>A cosine signal between -1 and 1 (like <code>cosine</code>, but bipolar).</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "cosine2",
      "longname": "cosine2",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n *  A square signal between 0 and 1.\n * @return {Pattern}\n * @example\n * n(square.segment(4).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "range": [
          2975,
          3036
        ],
        "filename": "signal.mjs",
        "lineno": 107,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036107",
          "name": "exports.square",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>A square signal between 0 and 1.</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "n(square.segment(4).range(0,7)).scale(\"C:minor\")"
      ],
      "name": "square",
      "longname": "square",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n *  A square signal between -1 and 1 (like `square`, but bipolar).\n *\n * @return {Pattern}\n */",
      "meta": {
        "range": [
          3137,
          3179
        ],
        "filename": "signal.mjs",
        "lineno": 114,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036124",
          "name": "exports.square2",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>A square signal between -1 and 1 (like <code>square</code>, but bipolar).</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "square2",
      "longname": "square2",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n *  A triangle signal between 0 and 1.\n *\n * @return {Pattern}\n * @example\n * n(tri.segment(8).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "range": [
          3316,
          3354
        ],
        "filename": "signal.mjs",
        "lineno": 124,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036132",
          "name": "exports.tri",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>A triangle signal between 0 and 1.</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "n(tri.segment(8).range(0,7)).scale(\"C:minor\")"
      ],
      "name": "tri",
      "longname": "tri",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n *  A triangle signal between -1 and 1 (like `tri`, but bipolar).\n *\n * @return {Pattern}\n */",
      "meta": {
        "range": [
          3454,
          3495
        ],
        "filename": "signal.mjs",
        "lineno": 131,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036140",
          "name": "exports.tri2",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>A triangle signal between -1 and 1 (like <code>tri</code>, but bipolar).</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "tri2",
      "longname": "tri2",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n *  An inverted triangle signal between 1 and 0 (like `tri`, but flipped).\n *\n * @return {Pattern}\n * @example\n * n(itri.segment(8).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "range": [
          3669,
          3708
        ],
        "filename": "signal.mjs",
        "lineno": 141,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036148",
          "name": "exports.itri",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>An inverted triangle signal between 1 and 0 (like <code>tri</code>, but flipped).</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "n(itri.segment(8).range(0,7)).scale(\"C:minor\")"
      ],
      "name": "itri",
      "longname": "itri",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n *  An inverted triangle signal between -1 and 1 (like `itri`, but bipolar).\n *\n * @return {Pattern}\n */",
      "meta": {
        "range": [
          3819,
          3861
        ],
        "filename": "signal.mjs",
        "lineno": 148,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036156",
          "name": "exports.itri2",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>An inverted triangle signal between -1 and 1 (like <code>itri</code>, but bipolar).</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "itri2",
      "longname": "itri2",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n *  A signal representing the cycle time.\n *\n * @return {Pattern}\n */",
      "meta": {
        "range": [
          3937,
          3968
        ],
        "filename": "signal.mjs",
        "lineno": 155,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036164",
          "name": "exports.time",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>A signal representing the cycle time.</p>",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "time",
      "longname": "time",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n *  The mouse's x position value ranges from 0 to 1.\n * @name mousex\n * @return {Pattern}\n * @example\n * n(mousex.segment(4).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 157,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>The mouse's x position value ranges from 0 to 1.</p>",
      "name": "mousex",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "n(mousex.segment(4).range(0,7)).scale(\"C:minor\")"
      ],
      "longname": "mousex",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n *  The mouse's y position value ranges from 0 to 1.\n * @name mousey\n * @return {Pattern}\n * @example\n * n(mousey.segment(4).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 166,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>The mouse's y position value ranges from 0 to 1.</p>",
      "name": "mousey",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "n(mousey.segment(4).range(0,7)).scale(\"C:minor\")"
      ],
      "longname": "mousey",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * A discrete pattern of numbers from 0 to n-1\n * @example\n * n(run(4)).scale(\"C4:pentatonic\")\n * // n(\"0 1 2 3\").scale(\"C4:pentatonic\")\n */",
      "meta": {
        "range": [
          5663,
          5724
        ],
        "filename": "signal.mjs",
        "lineno": 228,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036381",
          "name": "exports.run",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>A discrete pattern of numbers from 0 to n-1</p>",
      "examples": [
        "n(run(4)).scale(\"C4:pentatonic\")\n// n(\"0 1 2 3\").scale(\"C4:pentatonic\")"
      ],
      "name": "run",
      "longname": "run",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Creates a pattern from a binary number.\n *\n * @name binary\n * @param {number} n - input number to convert to binary\n * @example\n * \"hh\".s().struct(binary(5))\n * // \"hh\".s().struct(\"1 0 1\")\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 230,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Creates a pattern from a binary number.</p>",
      "name": "binary",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>input number to convert to binary</p>",
          "name": "n"
        }
      ],
      "examples": [
        "\"hh\".s().struct(binary(5))\n// \"hh\".s().struct(\"1 0 1\")"
      ],
      "longname": "binary",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Creates a pattern from a binary number, padded to n bits long.\n *\n * @name binaryN\n * @param {number} n - input number to convert to binary\n * @param {number} nBits - pattern length, defaults to 16\n * @example\n * \"hh\".s().struct(binaryN(55532, 16))\n * // \"hh\".s().struct(\"1 1 0 1 1 0 0 0 1 1 1 0 1 1 0 0\")\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 244,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Creates a pattern from a binary number, padded to n bits long.</p>",
      "name": "binaryN",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>input number to convert to binary</p>",
          "name": "n"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>pattern length, defaults to 16</p>",
          "name": "nBits"
        }
      ],
      "examples": [
        "\"hh\".s().struct(binaryN(55532, 16))\n// \"hh\".s().struct(\"1 1 0 1 1 0 0 0 1 1 1 0 1 1 0 0\")"
      ],
      "longname": "binaryN",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Slices a pattern into the given number of parts, then plays those parts in random order.\n * Each part will be played exactly once per cycle.\n * @name shuffle\n * @example\n * note(\"c d e f\").sound(\"piano\").shuffle(4)\n * @example\n * seq(\"c d e f\".shuffle(4), \"g\").note().sound(\"piano\")\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 279,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Slices a pattern into the given number of parts, then plays those parts in random order.\nEach part will be played exactly once per cycle.</p>",
      "name": "shuffle",
      "examples": [
        "note(\"c d e f\").sound(\"piano\").shuffle(4)",
        "seq(\"c d e f\".shuffle(4), \"g\").note().sound(\"piano\")"
      ],
      "longname": "shuffle",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Slices a pattern into the given number of parts, then plays those parts at random. Similar to `shuffle`,\n * but parts might be played more than once, or not at all, per cycle.\n * @name scramble\n * @example\n * note(\"c d e f\").sound(\"piano\").scramble(4)\n * @example\n * seq(\"c d e f\".scramble(4), \"g\").note().sound(\"piano\")\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 292,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Slices a pattern into the given number of parts, then plays those parts at random. Similar to <code>shuffle</code>,\nbut parts might be played more than once, or not at all, per cycle.</p>",
      "name": "scramble",
      "examples": [
        "note(\"c d e f\").sound(\"piano\").scramble(4)",
        "seq(\"c d e f\".scramble(4), \"g\").note().sound(\"piano\")"
      ],
      "longname": "scramble",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * A continuous pattern of random numbers, between 0 and 1.\n *\n * @name rand\n * @example\n * // randomly change the cutoff\n * s(\"bd*4,hh*8\").cutoff(rand.range(500,8000))\n *\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 305,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>A continuous pattern of random numbers, between 0 and 1.</p>",
      "name": "rand",
      "examples": [
        "// randomly change the cutoff\ns(\"bd*4,hh*8\").cutoff(rand.range(500,8000))"
      ],
      "longname": "rand",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * A continuous pattern of random numbers, between -1 and 1\n */",
      "meta": {
        "range": [
          8355,
          8393
        ],
        "filename": "signal.mjs",
        "lineno": 318,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036689",
          "name": "exports.rand2",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>A continuous pattern of random numbers, between -1 and 1</p>",
      "name": "rand2",
      "longname": "rand2",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * A continuous pattern of 0 or 1 (binary random), with a probability for the value being 1\n *\n * @name brandBy\n * @param {number} probability - a number between 0 and 1\n * @example\n * s(\"hh*10\").pan(brandBy(0.2))\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 322,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>A continuous pattern of 0 or 1 (binary random), with a probability for the value being 1</p>",
      "name": "brandBy",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>a number between 0 and 1</p>",
          "name": "probability"
        }
      ],
      "examples": [
        "s(\"hh*10\").pan(brandBy(0.2))"
      ],
      "longname": "brandBy",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * A continuous pattern of 0 or 1 (binary random)\n *\n * @name brand\n * @example\n * s(\"hh*10\").pan(brand)\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 332,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>A continuous pattern of 0 or 1 (binary random)</p>",
      "name": "brand",
      "examples": [
        "s(\"hh*10\").pan(brand)"
      ],
      "longname": "brand",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * A continuous pattern of random integers, between 0 and n-1.\n *\n * @name irand\n * @param {number} n max value (exclusive)\n * @example\n * // randomly select scale notes from 0 - 7 (= C to C)\n * n(irand(8)).struct(\"x x*2 x x*3\").scale(\"C:minor\")\n *\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 343,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>A continuous pattern of random integers, between 0 and n-1.</p>",
      "name": "irand",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>max value (exclusive)</p>",
          "name": "n"
        }
      ],
      "examples": [
        "// randomly select scale notes from 0 - 7 (= C to C)\nn(irand(8)).struct(\"x x*2 x x*3\").scale(\"C:minor\")"
      ],
      "longname": "irand",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Choose from the list of values (or patterns of values) using the given\n * pattern of numbers, which should be in the range of 0..1\n * @param {Pattern} pat\n * @param {*} xs\n * @returns {Pattern}\n * @example\n * note(\"c2 g2!2 d2 f1\").s(chooseWith(sine.fast(2), [\"sawtooth\", \"triangle\", \"bd:6\"]))\n */",
      "meta": {
        "range": [
          9855,
          9942
        ],
        "filename": "signal.mjs",
        "lineno": 375,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036836",
          "name": "exports.chooseWith",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Choose from the list of values (or patterns of values) using the given\npattern of numbers, which should be in the range of 0..1</p>",
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "pat"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "xs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "note(\"c2 g2!2 d2 f1\").s(chooseWith(sine.fast(2), [\"sawtooth\", \"triangle\", \"bd:6\"]))"
      ],
      "name": "chooseWith",
      "longname": "chooseWith",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * As with {chooseWith}, but the structure comes from the chosen values, rather\n * than the pattern you're using to choose with.\n * @param {Pattern} pat\n * @param {*} xs\n * @returns {Pattern}\n */",
      "meta": {
        "range": [
          10144,
          10233
        ],
        "filename": "signal.mjs",
        "lineno": 386,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036852",
          "name": "exports.chooseInWith",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>As with {chooseWith}, but the structure comes from the chosen values, rather\nthan the pattern you're using to choose with.</p>",
      "params": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "name": "pat"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "xs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "chooseInWith",
      "longname": "chooseInWith",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Chooses randomly from the given list of elements.\n * @param  {...any} xs values / patterns to choose from.\n * @returns {Pattern} - a continuous pattern.\n * @example\n * note(\"c2 g2!2 d2 f1\").s(choose(\"sine\", \"triangle\", \"bd:6\"))\n */",
      "meta": {
        "range": [
          10474,
          10528
        ],
        "filename": "signal.mjs",
        "lineno": 397,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036868",
          "name": "exports.choose",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Chooses randomly from the given list of elements.</p>",
      "params": [
        {
          "type": {
            "names": [
              "any"
            ]
          },
          "variable": true,
          "description": "<p>values / patterns to choose from.</p>",
          "name": "xs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "description": "<ul>\n<li>a continuous pattern.</li>\n</ul>"
        }
      ],
      "examples": [
        "note(\"c2 g2!2 d2 f1\").s(choose(\"sine\", \"triangle\", \"bd:6\"))"
      ],
      "name": "choose",
      "longname": "choose",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Chooses from the given list of values (or patterns of values), according\n * to the pattern that the method is called on. The pattern should be in\n * the range 0 .. 1.\n * @param  {...any} xs\n * @returns {Pattern}\n */",
      "meta": {
        "range": [
          10859,
          10937
        ],
        "filename": "signal.mjs",
        "lineno": 410,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036896",
          "name": "Pattern.prototype.choose",
          "type": "FunctionExpression",
          "paramnames": [
            "xs"
          ]
        }
      },
      "description": "<p>Chooses from the given list of values (or patterns of values), according\nto the pattern that the method is called on. The pattern should be in\nthe range 0 .. 1.</p>",
      "params": [
        {
          "type": {
            "names": [
              "any"
            ]
          },
          "variable": true,
          "name": "xs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "choose",
      "longname": "Pattern#choose",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n * As with choose, but the pattern that this method is called on should be\n * in the range -1 .. 1\n * @param  {...any} xs\n * @returns {Pattern}\n */",
      "meta": {
        "range": [
          11092,
          11185
        ],
        "filename": "signal.mjs",
        "lineno": 420,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036912",
          "name": "Pattern.prototype.choose2",
          "type": "FunctionExpression",
          "paramnames": [
            "xs"
          ]
        }
      },
      "description": "<p>As with choose, but the pattern that this method is called on should be\nin the range -1 .. 1</p>",
      "params": [
        {
          "type": {
            "names": [
              "any"
            ]
          },
          "variable": true,
          "name": "xs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "name": "choose2",
      "longname": "Pattern#choose2",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n * Picks one of the elements at random each cycle.\n * @synonyms randcat\n * @returns {Pattern}\n * @example\n * chooseCycles(\"bd\", \"hh\", \"sd\").s().fast(8)\n * @example\n * s(\"bd | hh | sd\").fast(8)\n */",
      "meta": {
        "range": [
          11389,
          11462
        ],
        "filename": "signal.mjs",
        "lineno": 433,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100036930",
          "name": "exports.chooseCycles",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Picks one of the elements at random each cycle.</p>",
      "synonyms_text": "randcat",
      "synonyms": [
        "randcat"
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "chooseCycles(\"bd\", \"hh\", \"sd\").s().fast(8)",
        "s(\"bd | hh | sd\").fast(8)"
      ],
      "name": "chooseCycles",
      "longname": "chooseCycles",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Chooses randomly from the given list of elements by giving a probability to each element\n * @param {...any} pairs arrays of value and weight\n * @returns {Pattern} - a continuous pattern.\n * @example\n * note(\"c2 g2!2 d2 f1\").s(wchoose([\"sine\",10], [\"triangle\",1], [\"bd:6\",1]))\n */",
      "meta": {
        "range": [
          12754,
          12819
        ],
        "filename": "signal.mjs",
        "lineno": 473,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100037068",
          "name": "exports.wchoose",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Chooses randomly from the given list of elements by giving a probability to each element</p>",
      "params": [
        {
          "type": {
            "names": [
              "any"
            ]
          },
          "variable": true,
          "description": "<p>arrays of value and weight</p>",
          "name": "pairs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          },
          "description": "<ul>\n<li>a continuous pattern.</li>\n</ul>"
        }
      ],
      "examples": [
        "note(\"c2 g2!2 d2 f1\").s(wchoose([\"sine\",10], [\"triangle\",1], [\"bd:6\",1]))"
      ],
      "name": "wchoose",
      "longname": "wchoose",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Picks one of the elements at random each cycle by giving a probability to each element\n * @synonyms wrandcat\n * @returns {Pattern}\n * @example\n * wchooseCycles([\"bd\",10], [\"hh\",1], [\"sd\",1]).s().fast(8)\n * @example\n * wchooseCycles([\"bd bd bd\",5], [\"hh hh hh\",3], [\"sd sd sd\",1]).fast(4).s()\n * @example\n * // The probability can itself be a pattern\n * wchooseCycles([\"bd(3,8)\",\"<5 0>\"], [\"hh hh hh\",3]).fast(4).s()\n */",
      "meta": {
        "range": [
          13248,
          13343
        ],
        "filename": "signal.mjs",
        "lineno": 487,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100037080",
          "name": "exports.wchooseCycles",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Picks one of the elements at random each cycle by giving a probability to each element</p>",
      "synonyms_text": "wrandcat",
      "synonyms": [
        "wrandcat"
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "examples": [
        "wchooseCycles([\"bd\",10], [\"hh\",1], [\"sd\",1]).s().fast(8)",
        "wchooseCycles([\"bd bd bd\",5], [\"hh hh hh\",3], [\"sd sd sd\",1]).fast(4).s()",
        "// The probability can itself be a pattern\nwchooseCycles([\"bd(3,8)\",\"<5 0>\"], [\"hh hh hh\",3]).fast(4).s()"
      ],
      "name": "wchooseCycles",
      "longname": "wchooseCycles",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Generates a continuous pattern of [perlin noise](https://en.wikipedia.org/wiki/Perlin_noise), in the range 0..1.\n *\n * @name perlin\n * @example\n * // randomly change the cutoff\n * s(\"bd*4,hh*8\").cutoff(perlin.range(500,8000))\n *\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 521,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Generates a continuous pattern of <a href=\"https://en.wikipedia.org/wiki/Perlin_noise\">perlin noise</a>, in the range 0..1.</p>",
      "name": "perlin",
      "examples": [
        "// randomly change the cutoff\ns(\"bd*4,hh*8\").cutoff(perlin.range(500,8000))"
      ],
      "longname": "perlin",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Generates a continuous pattern of [berlin noise](conceived by Jame Coyne and Jade Rowland as a joke but turned out to be surprisingly cool and useful,\n * like perlin noise but with sawtooth waves), in the range 0..1.\n *\n * @name berlin\n * @example\n * // ascending arpeggios\n * n(\"0!16\".add(berlin.fast(4).mul(14))).scale(\"d:minor\")\n *\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 532,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Generates a continuous pattern of [berlin noise](conceived by Jame Coyne and Jade Rowland as a joke but turned out to be surprisingly cool and useful,\nlike perlin noise but with sawtooth waves), in the range 0..1.</p>",
      "name": "berlin",
      "examples": [
        "// ascending arpeggios\nn(\"0!16\".add(berlin.fast(4).mul(14))).scale(\"d:minor\")"
      ],
      "longname": "berlin",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Randomly removes events from the pattern by a given amount.\n * 0 = 0% chance of removal\n * 1 = 100% chance of removal\n *\n * @name degradeBy\n * @memberof Pattern\n * @param {number} amount - a number between 0 and 1\n * @returns Pattern\n * @example\n * s(\"hh*8\").degradeBy(0.2)\n * @example\n * s(\"[hh?0.2]*8\")\n * @example\n * //beat generator\n * s(\"bd\").segment(16).degradeBy(.5).ribbon(16,1)\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 551,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Randomly removes events from the pattern by a given amount.\n0 = 0% chance of removal\n1 = 100% chance of removal</p>",
      "name": "degradeBy",
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>a number between 0 and 1</p>",
          "name": "amount"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"hh*8\").degradeBy(0.2)",
        "s(\"[hh?0.2]*8\")",
        "//beat generator\ns(\"bd\").segment(16).degradeBy(.5).ribbon(16,1)"
      ],
      "scope": "static",
      "longname": "Pattern.degradeBy",
      "kind": "member"
    },
    {
      "comment": "/**\n *\n * Randomly removes 50% of events from the pattern. Shorthand for `.degradeBy(0.5)`\n *\n * @name degrade\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"hh*8\").degrade()\n * @example\n * s(\"[hh?]*8\")\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 577,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Randomly removes 50% of events from the pattern. Shorthand for <code>.degradeBy(0.5)</code></p>",
      "name": "degrade",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"hh*8\").degrade()",
        "s(\"[hh?]*8\")"
      ],
      "scope": "static",
      "longname": "Pattern.degrade",
      "kind": "member"
    },
    {
      "comment": "/**\n * Inverse of `degradeBy`: Randomly removes events from the pattern by a given amount.\n * 0 = 100% chance of removal\n * 1 = 0% chance of removal\n * Events that would be removed by degradeBy are let through by undegradeBy and vice versa (see second example).\n *\n * @name undegradeBy\n * @memberof Pattern\n * @param {number} amount - a number between 0 and 1\n * @returns Pattern\n * @example\n * s(\"hh*8\").undegradeBy(0.2)\n * @example\n * s(\"hh*10\").layer(\n *   x => x.degradeBy(0.2).pan(0),\n *   x => x.undegradeBy(0.8).pan(1)\n * )\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 591,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Inverse of <code>degradeBy</code>: Randomly removes events from the pattern by a given amount.\n0 = 100% chance of removal\n1 = 0% chance of removal\nEvents that would be removed by degradeBy are let through by undegradeBy and vice versa (see second example).</p>",
      "name": "undegradeBy",
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>a number between 0 and 1</p>",
          "name": "amount"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"hh*8\").undegradeBy(0.2)",
        "s(\"hh*10\").layer(\n  x => x.degradeBy(0.2).pan(0),\n  x => x.undegradeBy(0.8).pan(1)\n)"
      ],
      "scope": "static",
      "longname": "Pattern.undegradeBy",
      "kind": "member"
    },
    {
      "comment": "/**\n * Inverse of `degrade`: Randomly removes 50% of events from the pattern. Shorthand for `.undegradeBy(0.5)`\n * Events that would be removed by degrade are let through by undegrade and vice versa (see second example).\n *\n * @name undegrade\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"hh*8\").undegrade()\n * @example\n * s(\"hh*10\").layer(\n *   x => x.degrade().pan(0),\n *   x => x.undegrade().pan(1)\n * )\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 621,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Inverse of <code>degrade</code>: Randomly removes 50% of events from the pattern. Shorthand for <code>.undegradeBy(0.5)</code>\nEvents that would be removed by degrade are let through by undegrade and vice versa (see second example).</p>",
      "name": "undegrade",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"hh*8\").undegrade()",
        "s(\"hh*10\").layer(\n  x => x.degrade().pan(0),\n  x => x.undegrade().pan(1)\n)"
      ],
      "scope": "static",
      "longname": "Pattern.undegrade",
      "kind": "member"
    },
    {
      "comment": "/**\n *\n * Randomly applies the given function by the given probability.\n * Similar to `someCyclesBy`\n *\n * @name sometimesBy\n * @memberof Pattern\n * @param {number | Pattern} probability - a number between 0 and 1\n * @param {function} function - the transformation to apply\n * @returns Pattern\n * @example\n * s(\"hh*8\").sometimesBy(.4, x=>x.speed(\"0.5\"))\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 638,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Randomly applies the given function by the given probability.\nSimilar to <code>someCyclesBy</code></p>",
      "name": "sometimesBy",
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>a number between 0 and 1</p>",
          "name": "probability"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>the transformation to apply</p>",
          "name": "function"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"hh*8\").sometimesBy(.4, x=>x.speed(\"0.5\"))"
      ],
      "scope": "static",
      "longname": "Pattern.sometimesBy",
      "kind": "member"
    },
    {
      "comment": "/**\n *\n * Applies the given function with a 50% chance\n *\n * @name sometimes\n * @memberof Pattern\n * @param {function} function - the transformation to apply\n * @returns Pattern\n * @example\n * s(\"hh*8\").sometimes(x=>x.speed(\"0.5\"))\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 658,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Applies the given function with a 50% chance</p>",
      "name": "sometimes",
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>the transformation to apply</p>",
          "name": "function"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"hh*8\").sometimes(x=>x.speed(\"0.5\"))"
      ],
      "scope": "static",
      "longname": "Pattern.sometimes",
      "kind": "member"
    },
    {
      "comment": "/**\n *\n * Randomly applies the given function by the given probability on a cycle by cycle basis.\n * Similar to `sometimesBy`\n *\n * @name someCyclesBy\n * @memberof Pattern\n * @param {number | Pattern} probability - a number between 0 and 1\n * @param {function} function - the transformation to apply\n * @returns Pattern\n * @example\n * s(\"bd,hh*8\").someCyclesBy(.3, x=>x.speed(\"0.5\"))\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 673,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Randomly applies the given function by the given probability on a cycle by cycle basis.\nSimilar to <code>sometimesBy</code></p>",
      "name": "someCyclesBy",
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Pattern"
            ]
          },
          "description": "<p>a number between 0 and 1</p>",
          "name": "probability"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "<p>the transformation to apply</p>",
          "name": "function"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"bd,hh*8\").someCyclesBy(.3, x=>x.speed(\"0.5\"))"
      ],
      "scope": "static",
      "longname": "Pattern.someCyclesBy",
      "kind": "member"
    },
    {
      "comment": "/**\n *\n * Shorthand for `.someCyclesBy(0.5, fn)`\n *\n * @name someCycles\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"bd,hh*8\").someCycles(x=>x.speed(\"0.5\"))\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 698,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Shorthand for <code>.someCyclesBy(0.5, fn)</code></p>",
      "name": "someCycles",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"bd,hh*8\").someCycles(x=>x.speed(\"0.5\"))"
      ],
      "scope": "static",
      "longname": "Pattern.someCycles",
      "kind": "member"
    },
    {
      "comment": "/**\n *\n * Shorthand for `.sometimesBy(0.75, fn)`\n *\n * @name often\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"hh*8\").often(x=>x.speed(\"0.5\"))\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 712,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Shorthand for <code>.sometimesBy(0.75, fn)</code></p>",
      "name": "often",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"hh*8\").often(x=>x.speed(\"0.5\"))"
      ],
      "scope": "static",
      "longname": "Pattern.often",
      "kind": "member"
    },
    {
      "comment": "/**\n *\n * Shorthand for `.sometimesBy(0.25, fn)`\n *\n * @name rarely\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"hh*8\").rarely(x=>x.speed(\"0.5\"))\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 726,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Shorthand for <code>.sometimesBy(0.25, fn)</code></p>",
      "name": "rarely",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"hh*8\").rarely(x=>x.speed(\"0.5\"))"
      ],
      "scope": "static",
      "longname": "Pattern.rarely",
      "kind": "member"
    },
    {
      "comment": "/**\n *\n * Shorthand for `.sometimesBy(0.1, fn)`\n *\n * @name almostNever\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"hh*8\").almostNever(x=>x.speed(\"0.5\"))\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 740,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Shorthand for <code>.sometimesBy(0.1, fn)</code></p>",
      "name": "almostNever",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"hh*8\").almostNever(x=>x.speed(\"0.5\"))"
      ],
      "scope": "static",
      "longname": "Pattern.almostNever",
      "kind": "member"
    },
    {
      "comment": "/**\n *\n * Shorthand for `.sometimesBy(0.9, fn)`\n *\n * @name almostAlways\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"hh*8\").almostAlways(x=>x.speed(\"0.5\"))\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 754,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Shorthand for <code>.sometimesBy(0.9, fn)</code></p>",
      "name": "almostAlways",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"hh*8\").almostAlways(x=>x.speed(\"0.5\"))"
      ],
      "scope": "static",
      "longname": "Pattern.almostAlways",
      "kind": "member"
    },
    {
      "comment": "/**\n *\n * Shorthand for `.sometimesBy(0, fn)` (never calls fn)\n *\n * @name never\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"hh*8\").never(x=>x.speed(\"0.5\"))\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 768,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Shorthand for <code>.sometimesBy(0, fn)</code> (never calls fn)</p>",
      "name": "never",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"hh*8\").never(x=>x.speed(\"0.5\"))"
      ],
      "scope": "static",
      "longname": "Pattern.never",
      "kind": "member"
    },
    {
      "comment": "/**\n *\n * Shorthand for `.sometimesBy(1, fn)` (always calls fn)\n *\n * @name always\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"hh*8\").always(x=>x.speed(\"0.5\"))\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 782,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Shorthand for <code>.sometimesBy(1, fn)</code> (always calls fn)</p>",
      "name": "always",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"hh*8\").always(x=>x.speed(\"0.5\"))"
      ],
      "scope": "static",
      "longname": "Pattern.always",
      "kind": "member"
    },
    {
      "comment": "/**\n *\n * Do something on a keypress, or array of keypresses\n * [Key name reference](https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values)\n *\n * @name whenKey\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"bd(5,8)\").whenKey(\"Control:j\", x => x.segment(16).color(\"red\")).whenKey(\"Control:i\", x => x.fast(2).color(\"blue\"))\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 809,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>Do something on a keypress, or array of keypresses\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values\">Key name reference</a></p>",
      "name": "whenKey",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "s(\"bd(5,8)\").whenKey(\"Control:j\", x => x.segment(16).color(\"red\")).whenKey(\"Control:i\", x => x.fast(2).color(\"blue\"))"
      ],
      "scope": "static",
      "longname": "Pattern.whenKey",
      "kind": "member"
    },
    {
      "comment": "/**\n *\n * returns true when a key or array of keys is held\n * [Key name reference](https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values)\n *\n * @name keyDown\n * @memberof Pattern\n * @returns Pattern\n * @example\n * keyDown(\"Control:j\").pick([s(\"bd(5,8)\"), s(\"cp(3,8)\")])\n */",
      "meta": {
        "filename": "signal.mjs",
        "lineno": 825,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {}
      },
      "description": "<p>returns true when a key or array of keys is held\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values\">Key name reference</a></p>",
      "name": "keyDown",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "keyDown(\"Control:j\").pick([s(\"bd(5,8)\"), s(\"cp(3,8)\")])"
      ],
      "scope": "static",
      "longname": "Pattern.keyDown",
      "kind": "member"
    },
    {
      "comment": "/**\n * @deprecated does not appear to be referenced or invoked anywhere in the codebase\n * @noAutocomplete\n */",
      "meta": {
        "range": [
          2816,
          2983
        ],
        "filename": "util.mjs",
        "lineno": 73,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100050891",
          "name": "exports.getFreq",
          "type": "VariableDeclaration"
        }
      },
      "deprecated": "does not appear to be referenced or invoked anywhere in the codebase",
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "getFreq",
      "longname": "getFreq",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * @deprecated only used in workshop (first-notes)\n * @noAutocomplete\n */",
      "meta": {
        "range": [
          3142,
          3261
        ],
        "filename": "util.mjs",
        "lineno": 85,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/core",
        "code": {
          "id": "astnode100050930",
          "name": "exports.midi2note",
          "type": "VariableDeclaration"
        }
      },
      "deprecated": "only used in workshop (first-notes)",
      "tags": [
        {
          "originalTitle": "noAutocomplete",
          "title": "noautocomplete",
          "text": ""
        }
      ],
      "name": "midi2note",
      "longname": "midi2note",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Sends notes to Csound for rendering with MIDI semantics. The hap value is\n * translated to these Csound pfields:\n *\n *  p1 -- Csound instrument either as a number (1-based, can be a fraction),\n *        or as a string name.\n *  p2 -- time in beats (usually seconds) from start of performance.\n *  p3 -- duration in beats (usually seconds).\n *  p4 -- MIDI key number (as a real number, not an integer but in [0, 127].\n *  p5 -- MIDI velocity (as a real number, not an integer but in [0, 127].\n *  p6 -- Strudel controls, as a string.\n */",
      "meta": {
        "range": [
          4679,
          6063
        ],
        "filename": "index.mjs",
        "lineno": 139,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/csound",
        "code": {
          "id": "astnode100053534",
          "name": "exports.csoundm",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Sends notes to Csound for rendering with MIDI semantics. The hap value is\ntranslated to these Csound pfields:</p>\n<p>p1 -- Csound instrument either as a number (1-based, can be a fraction),\nor as a string name.\np2 -- time in beats (usually seconds) from start of performance.\np3 -- duration in beats (usually seconds).\np4 -- MIDI key number (as a real number, not an integer but in [0, 127].\np5 -- MIDI velocity (as a real number, not an integer but in [0, 127].\np6 -- Strudel controls, as a string.</p>",
      "name": "csoundm",
      "longname": "csoundm",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Visualises a pattern as a scrolling 'pianoroll', displayed in the background of the editor. To show a pianoroll for all running patterns, use `all(pianoroll)`. To have a pianoroll appear below\n * a pattern instead, prefix with `_`, e.g.: `sound(\"bd sd\")._pianoroll()`.\n *\n * @name pianoroll\n * @synonyms punchcard\n * @param {Object} options Object containing all the optional following parameters as key value pairs:\n * @param {integer} cycles number of cycles to be displayed at the same time - defaults to 4\n * @param {number} playhead location of the active notes on the time axis - 0 to 1, defaults to 0.5\n * @param {boolean} vertical displays the roll vertically - 0 by default\n * @param {boolean} labels displays labels on individual notes (see the label function) - 0 by default\n * @param {boolean} flipTime reverse the direction of the roll - 0 by default\n * @param {boolean} flipValues reverse the relative location of notes on the value axis - 0 by default\n * @param {number} overscan lookup X cycles outside of the cycles window to display notes in advance - 1 by default\n * @param {boolean} hideNegative hide notes with negative time (before starting playing the pattern) - 0 by default\n * @param {boolean} smear notes leave a solid trace - 0 by default\n * @param {boolean} fold notes takes the full value axis width - 0 by default\n * @param {string} active hexadecimal or CSS color of the active notes - defaults to #FFCA28\n * @param {string} inactive hexadecimal or CSS color of the inactive notes - defaults to #7491D2\n * @param {string} background hexadecimal or CSS color of the background - defaults to transparent\n * @param {string} playheadColor hexadecimal or CSS color of the line representing the play head - defaults to white\n * @param {boolean} fill notes are filled with color (otherwise only the label is displayed) - 0 by default\n * @param {boolean} fillActive active notes are filled with color - 0 by default\n * @param {boolean} stroke notes are shown with colored borders - 0 by default\n * @param {boolean} strokeActive active notes are shown with colored borders - 0 by default\n * @param {boolean} hideInactive only active notes are shown - 0 by default\n * @param {boolean} colorizeInactive use note color for inactive notes - 1 by default\n * @param {string} fontFamily define the font used by notes labels - defaults to 'monospace'\n * @param {integer} minMidi minimum note value to display on the value axis - defaults to 10\n * @param {integer} maxMidi maximum note value to display on the value axis - defaults to 90\n * @param {boolean} autorange automatically calculate the minMidi and maxMidi parameters - 0 by default\n * @see _pianoroll\n * @example\n * note(\"c2 a2 eb2\")\n * .euclid(5,8)\n * .s('sawtooth')\n * .lpenv(4).lpf(300)\n * .pianoroll({ labels: 1 })\n */",
      "meta": {
        "filename": "pianoroll.mjs",
        "lineno": 39,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/draw",
        "code": {}
      },
      "description": "<p>Visualises a pattern as a scrolling 'pianoroll', displayed in the background of the editor. To show a pianoroll for all running patterns, use <code>all(pianoroll)</code>. To have a pianoroll appear below\na pattern instead, prefix with <code>_</code>, e.g.: <code>sound(&quot;bd sd&quot;)._pianoroll()</code>.</p>",
      "name": "pianoroll",
      "synonyms_text": "punchcard",
      "synonyms": [
        "punchcard"
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "<p>Object containing all the optional following parameters as key value pairs:</p>",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "description": "<p>number of cycles to be displayed at the same time - defaults to 4</p>",
          "name": "cycles"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>location of the active notes on the time axis - 0 to 1, defaults to 0.5</p>",
          "name": "playhead"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "<p>displays the roll vertically - 0 by default</p>",
          "name": "vertical"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "<p>displays labels on individual notes (see the label function) - 0 by default</p>",
          "name": "labels"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "<p>reverse the direction of the roll - 0 by default</p>",
          "name": "flipTime"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "<p>reverse the relative location of notes on the value axis - 0 by default</p>",
          "name": "flipValues"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>lookup X cycles outside of the cycles window to display notes in advance - 1 by default</p>",
          "name": "overscan"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "<p>hide notes with negative time (before starting playing the pattern) - 0 by default</p>",
          "name": "hideNegative"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "<p>notes leave a solid trace - 0 by default</p>",
          "name": "smear"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "<p>notes takes the full value axis width - 0 by default</p>",
          "name": "fold"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>hexadecimal or CSS color of the active notes - defaults to #FFCA28</p>",
          "name": "active"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>hexadecimal or CSS color of the inactive notes - defaults to #7491D2</p>",
          "name": "inactive"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>hexadecimal or CSS color of the background - defaults to transparent</p>",
          "name": "background"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>hexadecimal or CSS color of the line representing the play head - defaults to white</p>",
          "name": "playheadColor"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "<p>notes are filled with color (otherwise only the label is displayed) - 0 by default</p>",
          "name": "fill"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "<p>active notes are filled with color - 0 by default</p>",
          "name": "fillActive"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "<p>notes are shown with colored borders - 0 by default</p>",
          "name": "stroke"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "<p>active notes are shown with colored borders - 0 by default</p>",
          "name": "strokeActive"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "<p>only active notes are shown - 0 by default</p>",
          "name": "hideInactive"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "<p>use note color for inactive notes - 1 by default</p>",
          "name": "colorizeInactive"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>define the font used by notes labels - defaults to 'monospace'</p>",
          "name": "fontFamily"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "description": "<p>minimum note value to display on the value axis - defaults to 10</p>",
          "name": "minMidi"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "description": "<p>maximum note value to display on the value axis - defaults to 90</p>",
          "name": "maxMidi"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "<p>automatically calculate the minMidi and maxMidi parameters - 0 by default</p>",
          "name": "autorange"
        }
      ],
      "see": [
        "_pianoroll"
      ],
      "examples": [
        "note(\"c2 a2 eb2\")\n.euclid(5,8)\n.s('sawtooth')\n.lpenv(4).lpf(300)\n.pianoroll({ labels: 1 })"
      ],
      "longname": "pianoroll",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Displays a vertical pianoroll with event labels.\n * Supports all the same options as pianoroll.\n *\n * @name wordfall\n */",
      "meta": {
        "filename": "pianoroll.mjs",
        "lineno": 297,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/draw",
        "code": {}
      },
      "description": "<p>Displays a vertical pianoroll with event labels.\nSupports all the same options as pianoroll.</p>",
      "name": "wordfall",
      "longname": "wordfall",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Renders a pitch circle to visualize frequencies within one octave\n * @name pitchwheel\n * @param {number} hapcircles\n * @param {number} circle\n * @param {number} edo\n * @param {string} root\n * @param {number} thickness\n * @param {number} hapRadius\n * @param {string} mode\n * @param {number} margin\n * @example\n * n(\"0 .. 12\").scale(\"C:chromatic\")\n * .s(\"sawtooth\")\n * .lpf(500)\n * ._pitchwheel()\n */",
      "meta": {
        "filename": "pitchwheel.mjs",
        "lineno": 116,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/draw",
        "code": {}
      },
      "description": "<p>Renders a pitch circle to visualize frequencies within one octave</p>",
      "name": "pitchwheel",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "hapcircles"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "circle"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "edo"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "root"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "thickness"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "hapRadius"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "mode"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "margin"
        }
      ],
      "examples": [
        "n(\"0 .. 12\").scale(\"C:chromatic\")\n.s(\"sawtooth\")\n.lpf(500)\n._pitchwheel()"
      ],
      "longname": "pitchwheel",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Displays a spiral visual.\n *\n * @name spiral\n * @param {Object} options Object containing all the optional following parameters as key value pairs:\n * @param {number} stretch controls the rotations per cycle ratio, where 1 = 1 cycle / 360 degrees\n * @param {number} size the diameter of the spiral\n * @param {number} thickness line thickness\n * @param {string} cap style of line ends: butt (default), round, square\n * @param {string} inset number of rotations before spiral starts (default 3)\n * @param {string} playheadColor color of playhead, defaults to white\n * @param {number} playheadLength length of playhead in rotations, defaults to 0.02\n * @param {number} playheadThickness thickness of playheadrotations, defaults to thickness\n * @param {number} padding space around spiral\n * @param {number} steady steadyness of spiral vs playhead. 1 = spiral doesn't move, playhead does.\n * @param {number} activeColor color of active segment. defaults to foreground of theme\n * @param {number} inactiveColor color of inactive segments. defaults to gutterForeground of theme\n * @param {boolean} colorizeInactive wether or not to colorize inactive segments, defaults to 0\n * @param {boolean} fade wether or not past and future should fade out. defaults to 1\n * @param {boolean} logSpiral wether or not the spiral should be logarithmic. defaults to 0\n * @example\n * note(\"c2 a2 eb2\")\n * .euclid(5,8)\n * .s('sawtooth')\n * .lpenv(4).lpf(300)\n * ._spiral({ steady: .96 })\n */",
      "meta": {
        "filename": "spiral.mjs",
        "lineno": 128,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/draw",
        "code": {}
      },
      "description": "<p>Displays a spiral visual.</p>",
      "name": "spiral",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "<p>Object containing all the optional following parameters as key value pairs:</p>",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>controls the rotations per cycle ratio, where 1 = 1 cycle / 360 degrees</p>",
          "name": "stretch"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>the diameter of the spiral</p>",
          "name": "size"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>line thickness</p>",
          "name": "thickness"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>style of line ends: butt (default), round, square</p>",
          "name": "cap"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>number of rotations before spiral starts (default 3)</p>",
          "name": "inset"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>color of playhead, defaults to white</p>",
          "name": "playheadColor"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>length of playhead in rotations, defaults to 0.02</p>",
          "name": "playheadLength"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>thickness of playheadrotations, defaults to thickness</p>",
          "name": "playheadThickness"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>space around spiral</p>",
          "name": "padding"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>steadyness of spiral vs playhead. 1 = spiral doesn't move, playhead does.</p>",
          "name": "steady"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>color of active segment. defaults to foreground of theme</p>",
          "name": "activeColor"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>color of inactive segments. defaults to gutterForeground of theme</p>",
          "name": "inactiveColor"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "<p>wether or not to colorize inactive segments, defaults to 0</p>",
          "name": "colorizeInactive"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "<p>wether or not past and future should fade out. defaults to 1</p>",
          "name": "fade"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "<p>wether or not the spiral should be logarithmic. defaults to 0</p>",
          "name": "logSpiral"
        }
      ],
      "examples": [
        "note(\"c2 a2 eb2\")\n.euclid(5,8)\n.s('sawtooth')\n.lpenv(4).lpf(300)\n._spiral({ steady: .96 })"
      ],
      "longname": "spiral",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * configures the default midimap, which is used when no \"midimap\" port is set\n * @example\n * defaultmidimap({ lpf: 74 })\n * $: note(\"c a f e\").midi();\n * $: lpf(sine.slow(4).segment(16)).midi();\n */",
      "meta": {
        "range": [
          4416,
          4515
        ],
        "filename": "midi.mjs",
        "lineno": 131,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/midi",
        "code": {
          "id": "astnode100061454",
          "name": "exports.defaultmidimap",
          "type": "FunctionDeclaration",
          "paramnames": [
            "mapping"
          ]
        }
      },
      "description": "<p>configures the default midimap, which is used when no &quot;midimap&quot; port is set</p>",
      "examples": [
        "defaultmidimap({ lpf: 74 })\n$: note(\"c a f e\").midi();\n$: lpf(sine.slow(4).segment(16)).midi();"
      ],
      "name": "defaultmidimap",
      "longname": "defaultmidimap",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/**\n * Adds midimaps to the registry. Inside each midimap, control names (e.g. lpf) are mapped to cc numbers.\n * @example\n * midimaps({ mymap: { lpf: 74 } })\n * $: note(\"c a f e\")\n * .lpf(sine.slow(4))\n * .midimap('mymap')\n * .midi()\n * @example\n * midimaps({ mymap: {\n *   lpf: { ccn: 74, min: 0, max: 20000, exp: 0.5 }\n * }})\n * $: note(\"c a f e\")\n * .lpf(sine.slow(2).range(400,2000))\n * .midimap('mymap')\n * .midi()\n */",
      "meta": {
        "range": [
          4962,
          5392
        ],
        "filename": "midi.mjs",
        "lineno": 154,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/midi",
        "code": {
          "id": "astnode100061472",
          "name": "exports.midimaps",
          "type": "FunctionDeclaration",
          "paramnames": [
            "map"
          ]
        }
      },
      "description": "<p>Adds midimaps to the registry. Inside each midimap, control names (e.g. lpf) are mapped to cc numbers.</p>",
      "examples": [
        "midimaps({ mymap: { lpf: 74 } })\n$: note(\"c a f e\")\n.lpf(sine.slow(4))\n.midimap('mymap')\n.midi()",
        "midimaps({ mymap: {\n  lpf: { ccn: 74, min: 0, max: 20000, exp: 0.5 }\n}})\n$: note(\"c a f e\")\n.lpf(sine.slow(2).range(400,2000))\n.midimap('mymap')\n.midi()"
      ],
      "name": "midimaps",
      "longname": "midimaps",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/**\n * MIDI output: Opens a MIDI output port.\n * @param {string | number} midiport MIDI device name or index defaulting to 0\n * @param {object} options Additional MIDI configuration options\n * @example\n * note(\"c4\").midichan(1).midi('IAC Driver Bus 1')\n * @example\n * note(\"c4\").midichan(1).midi('IAC Driver Bus 1', { controller: true, latency: 50 })\n */",
      "meta": {
        "range": [
          10343,
          16473
        ],
        "filename": "midi.mjs",
        "lineno": 289,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/midi",
        "code": {
          "id": "astnode100062123",
          "name": "Pattern.prototype.midi",
          "type": "FunctionExpression",
          "paramnames": [
            "midiport",
            "options"
          ]
        },
        "vars": {
          "undefined": null,
          "options": "Pattern#midi~options",
          "midiport": "Pattern#midi~midiport",
          "midiConfig": "Pattern#midi~midiConfig",
          "": null
        }
      },
      "description": "<p>MIDI output: Opens a MIDI output port.</p>",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "number"
            ]
          },
          "description": "<p>MIDI device name or index defaulting to 0</p>",
          "name": "midiport"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "<p>Additional MIDI configuration options</p>",
          "name": "options"
        }
      ],
      "examples": [
        "note(\"c4\").midichan(1).midi('IAC Driver Bus 1')",
        "note(\"c4\").midichan(1).midi('IAC Driver Bus 1', { controller: true, latency: 50 })"
      ],
      "name": "midi",
      "longname": "Pattern#midi",
      "kind": "function",
      "memberof": "Pattern",
      "scope": "instance"
    },
    {
      "comment": "/**\n * MIDI input: Opens a MIDI input port to receive MIDI control change messages.\n * @param {string | number} input MIDI device name or index defaulting to 0\n * @returns {Function}\n * @example\n * let cc = await midin('IAC Driver Bus 1')\n * note(\"c a f e\").lpf(cc(0).range(0, 1000)).lpq(cc(1).range(0, 10)).sound(\"sawtooth\")\n */",
      "meta": {
        "range": [
          16844,
          18118
        ],
        "filename": "midi.mjs",
        "lineno": 474,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/midi",
        "code": {
          "id": "astnode100062772",
          "name": "exports.midin",
          "type": "FunctionDeclaration",
          "paramnames": [
            "input"
          ]
        }
      },
      "description": "<p>MIDI input: Opens a MIDI input port to receive MIDI control change messages.</p>",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "number"
            ]
          },
          "description": "<p>MIDI device name or index defaulting to 0</p>",
          "name": "input"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          }
        }
      ],
      "examples": [
        "let cc = await midin('IAC Driver Bus 1')\nnote(\"c a f e\").lpf(cc(0).range(0, 1000)).lpq(cc(1).range(0, 10)).sound(\"sawtooth\")"
      ],
      "name": "midin",
      "longname": "midin",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/**\n *  The accelerometer's x-axis value ranges from 0 to 1.\n * @name accelerationX\n * @return {Pattern}\n * @synonyms accX\n * @example\n * n(accelerationX.segment(4).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "filename": "motion.mjs",
        "lineno": 5,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/motion",
        "code": {}
      },
      "description": "<p>The accelerometer's x-axis value ranges from 0 to 1.</p>",
      "name": "accelerationX",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "synonyms_text": "accX",
      "synonyms": [
        "accX"
      ],
      "examples": [
        "n(accelerationX.segment(4).range(0,7)).scale(\"C:minor\")"
      ],
      "longname": "accelerationX",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n *  The accelerometer's y-axis value ranges from 0 to 1.\n * @name accelerationY\n * @return {Pattern}\n * @synonyms accY\n * @example\n * n(accelerationY.segment(4).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "filename": "motion.mjs",
        "lineno": 15,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/motion",
        "code": {}
      },
      "description": "<p>The accelerometer's y-axis value ranges from 0 to 1.</p>",
      "name": "accelerationY",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "synonyms_text": "accY",
      "synonyms": [
        "accY"
      ],
      "examples": [
        "n(accelerationY.segment(4).range(0,7)).scale(\"C:minor\")"
      ],
      "longname": "accelerationY",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n *  The accelerometer's z-axis value ranges from 0 to 1.\n * @name accelerationZ\n * @return {Pattern}\n * @synonyms accZ\n * @example\n * n(accelerationZ.segment(4).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "filename": "motion.mjs",
        "lineno": 25,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/motion",
        "code": {}
      },
      "description": "<p>The accelerometer's z-axis value ranges from 0 to 1.</p>",
      "name": "accelerationZ",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "synonyms_text": "accZ",
      "synonyms": [
        "accZ"
      ],
      "examples": [
        "n(accelerationZ.segment(4).range(0,7)).scale(\"C:minor\")"
      ],
      "longname": "accelerationZ",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n *  The device's gravity x-axis value ranges from 0 to 1.\n * @name gravityX\n * @return {Pattern}\n * @synonyms gravX\n * @example\n * n(gravityX.segment(4).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "filename": "motion.mjs",
        "lineno": 35,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/motion",
        "code": {}
      },
      "description": "<p>The device's gravity x-axis value ranges from 0 to 1.</p>",
      "name": "gravityX",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "synonyms_text": "gravX",
      "synonyms": [
        "gravX"
      ],
      "examples": [
        "n(gravityX.segment(4).range(0,7)).scale(\"C:minor\")"
      ],
      "longname": "gravityX",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n *  The device's gravity y-axis value ranges from 0 to 1.\n * @name gravityY\n * @return {Pattern}\n * @synonyms gravY\n * @example\n * n(gravityY.segment(4).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "filename": "motion.mjs",
        "lineno": 45,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/motion",
        "code": {}
      },
      "description": "<p>The device's gravity y-axis value ranges from 0 to 1.</p>",
      "name": "gravityY",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "synonyms_text": "gravY",
      "synonyms": [
        "gravY"
      ],
      "examples": [
        "n(gravityY.segment(4).range(0,7)).scale(\"C:minor\")"
      ],
      "longname": "gravityY",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n *  The device's gravity z-axis value ranges from 0 to 1.\n * @name gravityZ\n * @return {Pattern}\n * @synonyms gravZ\n * @example\n * n(gravityZ.segment(4).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "filename": "motion.mjs",
        "lineno": 55,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/motion",
        "code": {}
      },
      "description": "<p>The device's gravity z-axis value ranges from 0 to 1.</p>",
      "name": "gravityZ",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "synonyms_text": "gravZ",
      "synonyms": [
        "gravZ"
      ],
      "examples": [
        "n(gravityZ.segment(4).range(0,7)).scale(\"C:minor\")"
      ],
      "longname": "gravityZ",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n *  The device's rotation around the alpha-axis value ranges from 0 to 1.\n * @name rotationAlpha\n * @return {Pattern}\n * @synonyms rotA, rotZ, rotationZ\n * @example\n * n(rotationAlpha.segment(4).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "filename": "motion.mjs",
        "lineno": 65,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/motion",
        "code": {}
      },
      "description": "<p>The device's rotation around the alpha-axis value ranges from 0 to 1.</p>",
      "name": "rotationAlpha",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "synonyms_text": "rotA, rotZ, rotationZ",
      "synonyms": [
        "rotA",
        "rotZ",
        "rotationZ"
      ],
      "examples": [
        "n(rotationAlpha.segment(4).range(0,7)).scale(\"C:minor\")"
      ],
      "longname": "rotationAlpha",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n *  The device's rotation around the beta-axis value ranges from 0 to 1.\n * @name rotationBeta\n * @return {Pattern}\n * @synonyms rotB, rotX, rotationX\n * @example\n * n(rotationBeta.segment(4).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "filename": "motion.mjs",
        "lineno": 75,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/motion",
        "code": {}
      },
      "description": "<p>The device's rotation around the beta-axis value ranges from 0 to 1.</p>",
      "name": "rotationBeta",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "synonyms_text": "rotB, rotX, rotationX",
      "synonyms": [
        "rotB",
        "rotX",
        "rotationX"
      ],
      "examples": [
        "n(rotationBeta.segment(4).range(0,7)).scale(\"C:minor\")"
      ],
      "longname": "rotationBeta",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n *  The device's rotation around the gamma-axis value ranges from 0 to 1.\n * @name rotationGamma\n * @return {Pattern}\n * @synonyms rotG, rotY, rotationY\n * @example\n * n(rotationGamma.segment(4).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "filename": "motion.mjs",
        "lineno": 85,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/motion",
        "code": {}
      },
      "description": "<p>The device's rotation around the gamma-axis value ranges from 0 to 1.</p>",
      "name": "rotationGamma",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "synonyms_text": "rotG, rotY, rotationY",
      "synonyms": [
        "rotG",
        "rotY",
        "rotationY"
      ],
      "examples": [
        "n(rotationGamma.segment(4).range(0,7)).scale(\"C:minor\")"
      ],
      "longname": "rotationGamma",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n *  The device's orientation alpha value ranges from 0 to 1.\n * @name orientationAlpha\n * @return {Pattern}\n * @synonyms oriA, oriZ, orientationZ\n * @example\n * n(orientationAlpha.segment(4).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "filename": "motion.mjs",
        "lineno": 95,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/motion",
        "code": {}
      },
      "description": "<p>The device's orientation alpha value ranges from 0 to 1.</p>",
      "name": "orientationAlpha",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "synonyms_text": "oriA, oriZ, orientationZ",
      "synonyms": [
        "oriA",
        "oriZ",
        "orientationZ"
      ],
      "examples": [
        "n(orientationAlpha.segment(4).range(0,7)).scale(\"C:minor\")"
      ],
      "longname": "orientationAlpha",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n *  The device's orientation beta value ranges from 0 to 1.\n * @name orientationBeta\n * @return {Pattern}\n * @synonyms oriB, oriX, orientationX\n * @example\n * n(orientationBeta.segment(4).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "filename": "motion.mjs",
        "lineno": 105,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/motion",
        "code": {}
      },
      "description": "<p>The device's orientation beta value ranges from 0 to 1.</p>",
      "name": "orientationBeta",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "synonyms_text": "oriB, oriX, orientationX",
      "synonyms": [
        "oriB",
        "oriX",
        "orientationX"
      ],
      "examples": [
        "n(orientationBeta.segment(4).range(0,7)).scale(\"C:minor\")"
      ],
      "longname": "orientationBeta",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n *  The device's orientation gamma value ranges from 0 to 1.\n * @name orientationGamma\n * @return {Pattern}\n * @synonyms oriG, oriY, orientationY\n * @example\n * n(orientationGamma.segment(4).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "filename": "motion.mjs",
        "lineno": 115,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/motion",
        "code": {}
      },
      "description": "<p>The device's orientation gamma value ranges from 0 to 1.</p>",
      "name": "orientationGamma",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "synonyms_text": "oriG, oriY, orientationY",
      "synonyms": [
        "oriG",
        "oriY",
        "orientationY"
      ],
      "examples": [
        "n(orientationGamma.segment(4).range(0,7)).scale(\"C:minor\")"
      ],
      "longname": "orientationGamma",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n *  The device's absolute orientation alpha value ranges from 0 to 1.\n * @name absoluteOrientationAlpha\n * @return {Pattern}\n * @synonyms absOriA, absOriZ, absoluteOrientationZ\n * @example\n * n(absoluteOrientationAlpha.segment(4).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "filename": "motion.mjs",
        "lineno": 125,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/motion",
        "code": {}
      },
      "description": "<p>The device's absolute orientation alpha value ranges from 0 to 1.</p>",
      "name": "absoluteOrientationAlpha",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "synonyms_text": "absOriA, absOriZ, absoluteOrientationZ",
      "synonyms": [
        "absOriA",
        "absOriZ",
        "absoluteOrientationZ"
      ],
      "examples": [
        "n(absoluteOrientationAlpha.segment(4).range(0,7)).scale(\"C:minor\")"
      ],
      "longname": "absoluteOrientationAlpha",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n *  The device's absolute orientation beta value ranges from 0 to 1.\n * @name absoluteOrientationBeta\n * @return {Pattern}\n * @synonyms absOriB, absOriX, absoluteOrientationX\n * @example\n * n(absoluteOrientationBeta.segment(4).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "filename": "motion.mjs",
        "lineno": 135,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/motion",
        "code": {}
      },
      "description": "<p>The device's absolute orientation beta value ranges from 0 to 1.</p>",
      "name": "absoluteOrientationBeta",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "synonyms_text": "absOriB, absOriX, absoluteOrientationX",
      "synonyms": [
        "absOriB",
        "absOriX",
        "absoluteOrientationX"
      ],
      "examples": [
        "n(absoluteOrientationBeta.segment(4).range(0,7)).scale(\"C:minor\")"
      ],
      "longname": "absoluteOrientationBeta",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n *  The device's absolute orientation gamma value ranges from 0 to 1.\n * @name absoluteOrientationGamma\n * @return {Pattern}\n * @synonyms absOriG, absOriY, absoluteOrientationY\n * @example\n * n(absoluteOrientationGamma.segment(4).range(0,7)).scale(\"C:minor\")\n *\n */",
      "meta": {
        "filename": "motion.mjs",
        "lineno": 145,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/motion",
        "code": {}
      },
      "description": "<p>The device's absolute orientation gamma value ranges from 0 to 1.</p>",
      "name": "absoluteOrientationGamma",
      "returns": [
        {
          "type": {
            "names": [
              "Pattern"
            ]
          }
        }
      ],
      "synonyms_text": "absOriG, absOriY, absoluteOrientationY",
      "synonyms": [
        "absOriG",
        "absOriY",
        "absoluteOrientationY"
      ],
      "examples": [
        "n(absoluteOrientationGamma.segment(4).range(0,7)).scale(\"C:minor\")"
      ],
      "longname": "absoluteOrientationGamma",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n *\n * Sends each hap as an OSC message, which can be picked up by SuperCollider or any other OSC-enabled software.\n * For more info, read [MIDI & OSC in the docs](https://strudel.cc/learn/input-output/)\n *\n * @name osc\n * @memberof Pattern\n * @returns Pattern\n */",
      "meta": {
        "filename": "osc.mjs",
        "lineno": 75,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/osc",
        "code": {}
      },
      "description": "<p>Sends each hap as an OSC message, which can be picked up by SuperCollider or any other OSC-enabled software.\nFor more info, read <a href=\"https://strudel.cc/learn/input-output/\">MIDI &amp; OSC in the docs</a></p>",
      "name": "osc",
      "memberof": "Pattern",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "scope": "static",
      "longname": "Pattern.osc",
      "kind": "member"
    },
    {
      "comment": "/** Overlap-Add Node */",
      "meta": {
        "range": [
          150,
          6513
        ],
        "filename": "ola-processor.js",
        "lineno": 7,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100098732",
          "name": "OLAProcessor",
          "type": "ClassDeclaration",
          "paramnames": [
            "options"
          ]
        }
      },
      "name": "OLAProcessor",
      "longname": "OLAProcessor",
      "kind": "class",
      "classdesc": "<p>Overlap-Add Node</p>",
      "scope": "global"
    },
    {
      "comment": "/** Handles dynamic reallocation of input/output channels buffer\n     (channel numbers may lety during lifecycle) **/",
      "meta": {
        "range": [
          1429,
          1897
        ],
        "filename": "ola-processor.js",
        "lineno": 39,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100098885",
          "name": "OLAProcessor#reallocateChannelsIfNeeded",
          "type": "MethodDefinition",
          "paramnames": [
            "inputs",
            "outputs"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Handles dynamic reallocation of input/output channels buffer\n(channel numbers may lety during lifecycle)</p>",
      "name": "reallocateChannelsIfNeeded",
      "longname": "OLAProcessor#reallocateChannelsIfNeeded",
      "kind": "function",
      "memberof": "OLAProcessor",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Read next web audio block to input buffers **/",
      "meta": {
        "range": [
          3534,
          4122
        ],
        "filename": "ola-processor.js",
        "lineno": 92,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100099192",
          "name": "OLAProcessor#readInputs",
          "type": "MethodDefinition",
          "paramnames": [
            "inputs"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Read next web audio block to input buffers</p>",
      "name": "readInputs",
      "longname": "OLAProcessor#readInputs",
      "kind": "function",
      "memberof": "OLAProcessor",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Write next web audio block from output buffers **/",
      "meta": {
        "range": [
          4183,
          4461
        ],
        "filename": "ola-processor.js",
        "lineno": 112,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100099313",
          "name": "OLAProcessor#writeOutputs",
          "type": "MethodDefinition",
          "paramnames": [
            "outputs"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Write next web audio block from output buffers</p>",
      "name": "writeOutputs",
      "longname": "OLAProcessor#writeOutputs",
      "kind": "function",
      "memberof": "OLAProcessor",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Shift left content of input buffers to receive new web audio block **/",
      "meta": {
        "range": [
          4542,
          4757
        ],
        "filename": "ola-processor.js",
        "lineno": 122,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100099373",
          "name": "OLAProcessor#shiftInputBuffers",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Shift left content of input buffers to receive new web audio block</p>",
      "name": "shiftInputBuffers",
      "longname": "OLAProcessor#shiftInputBuffers",
      "kind": "function",
      "memberof": "OLAProcessor",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Shift left content of output buffers to receive new web audio block **/",
      "meta": {
        "range": [
          4839,
          5147
        ],
        "filename": "ola-processor.js",
        "lineno": 131,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100099420",
          "name": "OLAProcessor#shiftOutputBuffers",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Shift left content of output buffers to receive new web audio block</p>",
      "name": "shiftOutputBuffers",
      "longname": "OLAProcessor#shiftOutputBuffers",
      "kind": "function",
      "memberof": "OLAProcessor",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Copy contents of input buffers to buffer actually sent to process **/",
      "meta": {
        "range": [
          5227,
          5454
        ],
        "filename": "ola-processor.js",
        "lineno": 141,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100099487",
          "name": "OLAProcessor#prepareInputBuffersToSend",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Copy contents of input buffers to buffer actually sent to process</p>",
      "name": "prepareInputBuffersToSend",
      "longname": "OLAProcessor#prepareInputBuffersToSend",
      "kind": "function",
      "memberof": "OLAProcessor",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Add contents of output buffers just processed to output buffers **/",
      "meta": {
        "range": [
          5532,
          5852
        ],
        "filename": "ola-processor.js",
        "lineno": 150,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100099539",
          "name": "OLAProcessor#handleOutputBuffersToRetrieve",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Add contents of output buffers just processed to output buffers</p>",
      "name": "handleOutputBuffersToRetrieve",
      "longname": "OLAProcessor#handleOutputBuffersToRetrieve",
      "kind": "function",
      "memberof": "OLAProcessor",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Generates a reverb impulse response.\n\n @param {!Object} params TODO: Document the properties.\n @param {!function(!AudioBuffer)} callback Function to call when\n  the impulse response has been generated. The impulse response\n  is passed to this function as its parameter. May be called\n  immediately within the current execution context, or later. */",
      "meta": {
        "range": [
          969,
          2138
        ],
        "filename": "reverbGen.mjs",
        "lineno": 24,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100100024",
          "name": "reverbGen.generateReverb",
          "type": "FunctionExpression",
          "paramnames": [
            "params",
            "callback"
          ]
        },
        "vars": {
          "audioContext": "reverbGen.generateReverb~audioContext",
          "sampleRate": "reverbGen.generateReverb~sampleRate",
          "numChannels": "reverbGen.generateReverb~numChannels",
          "totalTime": "reverbGen.generateReverb~totalTime",
          "decaySampleFrames": "reverbGen.generateReverb~decaySampleFrames",
          "numSampleFrames": "reverbGen.generateReverb~numSampleFrames",
          "fadeInSampleFrames": "reverbGen.generateReverb~fadeInSampleFrames",
          "decayBase": "reverbGen.generateReverb~decayBase",
          "reverbIR": "reverbGen.generateReverb~reverbIR",
          "i": "reverbGen.generateReverb~i",
          "chan": "reverbGen.generateReverb~chan",
          "j": "reverbGen.generateReverb~j",
          "chan[undefined]": "reverbGen.generateReverb~chan.undefined]"
        }
      },
      "description": "<p>Generates a reverb impulse response.</p>",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": false,
          "description": "<p>TODO: Document the properties.</p>",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "nullable": false,
          "description": "<p>Function to call when\nthe impulse response has been generated. The impulse response\nis passed to this function as its parameter. May be called\nimmediately within the current execution context, or later.</p>",
          "name": "callback"
        }
      ],
      "name": "generateReverb",
      "longname": "reverbGen.generateReverb",
      "kind": "function",
      "memberof": "reverbGen",
      "scope": "static"
    },
    {
      "comment": "/** Creates a canvas element showing a graph of the given data.\n\n\n @param {!Float32Array} data An array of numbers, or a Float32Array.\n @param {number} width Width in pixels of the canvas.\n @param {number} height Height in pixels of the canvas.\n @param {number} min Minimum value of data for the graph (lower edge).\n @param {number} max Maximum value of data in the graph (upper edge).\n @return {!CanvasElement} The generated canvas element. */",
      "meta": {
        "range": [
          2586,
          3097
        ],
        "filename": "reverbGen.mjs",
        "lineno": 58,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100100204",
          "name": "reverbGen.generateGraph",
          "type": "FunctionExpression",
          "paramnames": [
            "data",
            "width",
            "height",
            "min",
            "max"
          ]
        },
        "vars": {
          "canvas": "reverbGen.generateGraph~canvas",
          "canvas.width": "reverbGen.generateGraph~canvas.width",
          "canvas.height": "reverbGen.generateGraph~canvas.height",
          "gc": "reverbGen.generateGraph~gc",
          "gc.fillStyle": "reverbGen.generateGraph~gc.fillStyle",
          "xscale": "reverbGen.generateGraph~xscale",
          "yscale": "reverbGen.generateGraph~yscale",
          "i": "reverbGen.generateGraph~i"
        }
      },
      "description": "<p>Creates a canvas element showing a graph of the given data.</p>",
      "params": [
        {
          "type": {
            "names": [
              "Float32Array"
            ]
          },
          "nullable": false,
          "description": "<p>An array of numbers, or a Float32Array.</p>",
          "name": "data"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>Width in pixels of the canvas.</p>",
          "name": "width"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>Height in pixels of the canvas.</p>",
          "name": "height"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>Minimum value of data for the graph (lower edge).</p>",
          "name": "min"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>Maximum value of data in the graph (upper edge).</p>",
          "name": "max"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "CanvasElement"
            ]
          },
          "nullable": false,
          "description": "<p>The generated canvas element.</p>"
        }
      ],
      "name": "generateGraph",
      "longname": "reverbGen.generateGraph",
      "kind": "function",
      "memberof": "reverbGen",
      "scope": "static"
    },
    {
      "comment": "/** Applies a constantly changing lowpass filter to the given sound.\n\n @private\n @param {!AudioBuffer} input\n @param {number} lpFreqStart\n @param {number} lpFreqEnd\n @param {number} lpFreqEndAt\n @param {!function(!AudioBuffer)} callback May be called\n  immediately within the current execution context, or later.*/",
      "meta": {
        "range": [
          3419,
          4357
        ],
        "filename": "reverbGen.mjs",
        "lineno": 83,
        "columnno": 4,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100100319",
          "name": "applyGradualLowpass",
          "type": "FunctionExpression"
        },
        "vars": {
          "channelData": "applyGradualLowpass~channelData",
          "context": "applyGradualLowpass~context",
          "player": "applyGradualLowpass~player",
          "player.buffer": "applyGradualLowpass~player.buffer",
          "filter": "applyGradualLowpass~filter",
          "lpFreqStart": "applyGradualLowpass~lpFreqStart",
          "lpFreqEnd": "applyGradualLowpass~lpFreqEnd",
          "filter.type": "applyGradualLowpass~filter.type",
          "filter.Q.value": "applyGradualLowpass~filter.Q.value",
          "context.oncomplete": "applyGradualLowpass~context.oncomplete",
          "": null,
          "window.filterNode": "window.filterNode"
        }
      },
      "description": "<p>Applies a constantly changing lowpass filter to the given sound.</p>",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "AudioBuffer"
            ]
          },
          "nullable": false,
          "name": "input"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "lpFreqStart"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "lpFreqEnd"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "lpFreqEndAt"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "nullable": false,
          "description": "<p>May be called\nimmediately within the current execution context, or later.</p>",
          "name": "callback"
        }
      ],
      "name": "applyGradualLowpass",
      "longname": "applyGradualLowpass",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/** @private\n @param {!AudioBuffer} buffer\n @return {!Array.<!Float32Array>} An array containing the Float32Array of each channel's samples. */",
      "meta": {
        "range": [
          4508,
          4691
        ],
        "filename": "reverbGen.mjs",
        "lineno": 116,
        "columnno": 4,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100100483",
          "name": "getAllChannelData",
          "type": "FunctionExpression"
        },
        "vars": {
          "channels": "getAllChannelData~channels",
          "i": "getAllChannelData~i",
          "channels[undefined]": "getAllChannelData~channels.undefined]"
        }
      },
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "AudioBuffer"
            ]
          },
          "nullable": false,
          "name": "buffer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<!Float32Array>"
            ]
          },
          "nullable": false,
          "description": "<p>An array containing the Float32Array of each channel's samples.</p>"
        }
      ],
      "name": "getAllChannelData",
      "longname": "getAllChannelData",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/** @private\n @return {number} A random number from -1 to 1. */",
      "meta": {
        "range": [
          4762,
          4824
        ],
        "filename": "reverbGen.mjs",
        "lineno": 126,
        "columnno": 4,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100100518",
          "name": "randomSample",
          "type": "FunctionExpression"
        }
      },
      "access": "private",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>A random number from -1 to 1.</p>"
        }
      ],
      "name": "randomSample",
      "longname": "randomSample",
      "kind": "function",
      "scope": "global",
      "params": []
    },
    {
      "comment": "/**\n * Loads a collection of samples to use with `s`\n * @example\n * samples('github:tidalcycles/dirt-samples');\n * s(\"[bd ~]*2, [~ hh]*2, ~ sd\")\n * @example\n * samples({\n *  bd: '808bd/BD0000.WAV',\n *  sd: '808sd/SD0010.WAV'\n *  }, 'https://raw.githubusercontent.com/tidalcycles/Dirt-Samples/master/');\n * s(\"[bd ~]*2, [~ hh]*2, ~ sd\")\n * @example\n * samples('shabda:noise,chimp:2')\n * s(\"noise <chimp:0*2 chimp:1>\")\n * @example\n * samples('shabda/speech/fr-FR/f:chocolat')\n * s(\"chocolat*4\")\n */",
      "meta": {
        "range": [
          9038,
          9596
        ],
        "filename": "sampler.mjs",
        "lineno": 264,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100101779",
          "name": "exports.samples",
          "type": "VariableDeclaration"
        }
      },
      "description": "<p>Loads a collection of samples to use with <code>s</code></p>",
      "examples": [
        "samples('github:tidalcycles/dirt-samples');\ns(\"[bd ~]*2, [~ hh]*2, ~ sd\")",
        "samples({\n bd: '808bd/BD0000.WAV',\n sd: '808sd/SD0010.WAV'\n }, 'https://raw.githubusercontent.com/tidalcycles/Dirt-Samples/master/');\ns(\"[bd ~]*2, [~ hh]*2, ~ sd\")",
        "samples('shabda:noise,chimp:2')\ns(\"noise <chimp:0*2 chimp:1>\")",
        "samples('shabda/speech/fr-FR/f:chocolat')\ns(\"chocolat*4\")"
      ],
      "name": "samples",
      "longname": "samples",
      "kind": "constant",
      "scope": "global"
    },
    {
      "comment": "/**\n * Register an alias for a bank of sounds.\n * Optionally accepts a single argument map of bank aliases.\n * Optionally accepts a single argument string of a path to a JSON file containing bank aliases.\n * @param {string} bank - The bank to alias\n * @param {string} alias - The alias to use for the bank\n */",
      "meta": {
        "range": [
          3683,
          4070
        ],
        "filename": "superdough.mjs",
        "lineno": 101,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100102506",
          "name": "exports.aliasBank",
          "type": "FunctionDeclaration",
          "paramnames": [
            "args"
          ]
        }
      },
      "description": "<p>Register an alias for a bank of sounds.\nOptionally accepts a single argument map of bank aliases.\nOptionally accepts a single argument string of a path to a JSON file containing bank aliases.</p>",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>The bank to alias</p>",
          "name": "bank"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>The alias to use for the bank</p>",
          "name": "alias"
        }
      ],
      "name": "aliasBank",
      "longname": "aliasBank",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/**\n * Register an alias for a sound.\n * @param {string} original - The original sound name\n * @param {string} alias - The alias to use for the sound\n */",
      "meta": {
        "range": [
          4226,
          4423
        ],
        "filename": "superdough.mjs",
        "lineno": 121,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100102558",
          "name": "exports.soundAlias",
          "type": "FunctionDeclaration",
          "paramnames": [
            "original",
            "alias"
          ]
        }
      },
      "description": "<p>Register an alias for a sound.</p>",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>The original sound name</p>",
          "name": "original"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>The alias to use for the sound</p>",
          "name": "alias"
        }
      ],
      "name": "soundAlias",
      "longname": "soundAlias",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/** Apply Hann window in-place */",
      "meta": {
        "range": [
          15251,
          15387
        ],
        "filename": "worklets.mjs",
        "lineno": 571,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100111213",
          "name": "PhaseVocoderProcessor#applyHannWindow",
          "type": "MethodDefinition",
          "paramnames": [
            "input"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Apply Hann window in-place</p>",
      "name": "applyHannWindow",
      "longname": "PhaseVocoderProcessor#applyHannWindow",
      "kind": "function",
      "memberof": "PhaseVocoderProcessor",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Compute squared magnitudes for peak finding **/",
      "meta": {
        "range": [
          15445,
          15757
        ],
        "filename": "worklets.mjs",
        "lineno": 578,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100111247",
          "name": "PhaseVocoderProcessor#computeMagnitudes",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Compute squared magnitudes for peak finding</p>",
      "name": "computeMagnitudes",
      "longname": "PhaseVocoderProcessor#computeMagnitudes",
      "kind": "function",
      "memberof": "PhaseVocoderProcessor",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Find peaks in spectrum magnitudes **/",
      "meta": {
        "range": [
          15805,
          16276
        ],
        "filename": "worklets.mjs",
        "lineno": 592,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100111307",
          "name": "PhaseVocoderProcessor#findPeaks",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Find peaks in spectrum magnitudes</p>",
      "name": "findPeaks",
      "longname": "PhaseVocoderProcessor#findPeaks",
      "kind": "function",
      "memberof": "PhaseVocoderProcessor",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/** Shift peaks and regions of influence by pitchFactor into new specturm */",
      "meta": {
        "range": [
          16359,
          18422
        ],
        "filename": "worklets.mjs",
        "lineno": 616,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100111413",
          "name": "PhaseVocoderProcessor#shiftPeaks",
          "type": "MethodDefinition",
          "paramnames": [
            "pitchFactor"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "<p>Shift peaks and regions of influence by pitchFactor into new specturm</p>",
      "name": "shiftPeaks",
      "longname": "PhaseVocoderProcessor#shiftPeaks",
      "kind": "function",
      "memberof": "PhaseVocoderProcessor",
      "scope": "instance",
      "params": []
    },
    {
      "comment": "/**  BYTE BEATS */",
      "meta": {
        "range": [
          21480,
          22411
        ],
        "filename": "worklets.mjs",
        "lineno": 779,
        "columnno": 6,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough",
        "code": {
          "id": "astnode100112127",
          "name": "chyx",
          "type": "ObjectExpression",
          "value": "{\"bitC\":\"\",\"br\":\"\",\"sinf\":\"\",\"cosf\":\"\",\"tanf\":\"\",\"regG\":\"\"}"
        }
      },
      "description": "<p>BYTE BEATS</p>",
      "name": "chyx",
      "longname": "chyx",
      "kind": "constant",
      "scope": "global",
      "params": []
    },
    {
      "comment": "/**\n * Equal Power Crossfade function.\n * Smoothly transitions between signals A and B, maintaining consistent perceived loudness.\n *\n * @param {number} a - Signal A (can be a single value or an array value in buffer processing).\n * @param {number} b - Signal B (can be a single value or an array value in buffer processing).\n * @param {number} m - Crossfade parameter (0.0 = all A, 1.0 = all B, 0.5 = equal mix).\n * @returns {number} Crossfaded output value.\n */",
      "meta": {
        "range": [
          850,
          1009
        ],
        "filename": "dough.mjs",
        "lineno": 23,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100114429",
          "name": "crossfade",
          "type": "FunctionDeclaration",
          "paramnames": [
            "a",
            "b",
            "m"
          ]
        },
        "vars": {
          "aGain": "crossfade~aGain",
          "bGain": "crossfade~bGain"
        }
      },
      "description": "<p>Equal Power Crossfade function.\nSmoothly transitions between signals A and B, maintaining consistent perceived loudness.</p>",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>Signal A (can be a single value or an array value in buffer processing).</p>",
          "name": "a"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>Signal B (can be a single value or an array value in buffer processing).</p>",
          "name": "b"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>Crossfade parameter (0.0 = all A, 1.0 = all B, 0.5 = equal mix).</p>",
          "name": "m"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>Crossfaded output value.</p>"
        }
      ],
      "name": "crossfade",
      "longname": "crossfade",
      "kind": "function",
      "scope": "global"
    },
    {
      "comment": "/** @type {number} */",
      "meta": {
        "range": [
          16818,
          16825
        ],
        "filename": "dough.mjs",
        "lineno": 660,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117388",
          "name": "id",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "id",
      "longname": "DoughVoice#id",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number[]} */",
      "meta": {
        "range": [
          16854,
          16867
        ],
        "filename": "dough.mjs",
        "lineno": 662,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117390",
          "name": "out",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "Array.<number>"
        ]
      },
      "name": "out",
      "longname": "DoughVoice#out",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          16907,
          16914
        ],
        "filename": "dough.mjs",
        "lineno": 665,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117394",
          "name": "attack",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "attack",
      "longname": "DoughVoice#attack",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          16953,
          16959
        ],
        "filename": "dough.mjs",
        "lineno": 667,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117395",
          "name": "decay",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "decay",
      "longname": "DoughVoice#decay",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          16998,
          17006
        ],
        "filename": "dough.mjs",
        "lineno": 669,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117396",
          "name": "sustain",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "sustain",
      "longname": "DoughVoice#sustain",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number} */",
      "meta": {
        "range": [
          17033,
          17041
        ],
        "filename": "dough.mjs",
        "lineno": 671,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117397",
          "name": "release",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "release",
      "longname": "DoughVoice#release",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number} */",
      "meta": {
        "range": [
          17068,
          17075
        ],
        "filename": "dough.mjs",
        "lineno": 673,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117398",
          "name": "_begin",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "_begin",
      "longname": "DoughVoice#_begin",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number} */",
      "meta": {
        "range": [
          17102,
          17112
        ],
        "filename": "dough.mjs",
        "lineno": 675,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117399",
          "name": "_duration",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "_duration",
      "longname": "DoughVoice#_duration",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {any} */",
      "meta": {
        "range": [
          17137,
          17144
        ],
        "filename": "dough.mjs",
        "lineno": 678,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117400",
          "name": "_sound",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "any"
        ]
      },
      "name": "_sound",
      "longname": "DoughVoice#_sound",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number} */",
      "meta": {
        "range": [
          17171,
          17185
        ],
        "filename": "dough.mjs",
        "lineno": 680,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117401",
          "name": "_channels",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "_channels",
      "longname": "DoughVoice#_channels",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {BufferPlayer[] | undefined} */",
      "meta": {
        "range": [
          17232,
          17241
        ],
        "filename": "dough.mjs",
        "lineno": 682,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117403",
          "name": "_buffers",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "Array.<BufferPlayer>",
          "undefined"
        ]
      },
      "name": "_buffers",
      "longname": "DoughVoice#_buffers",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {string | undefined} */",
      "meta": {
        "range": [
          17280,
          17285
        ],
        "filename": "dough.mjs",
        "lineno": 684,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117404",
          "name": "unit",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "string",
          "undefined"
        ]
      },
      "name": "unit",
      "longname": "DoughVoice#unit",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {ADSR | undefined} */",
      "meta": {
        "range": [
          17323,
          17329
        ],
        "filename": "dough.mjs",
        "lineno": 687,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117405",
          "name": "_penv",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "ADSR",
          "undefined"
        ]
      },
      "name": "_penv",
      "longname": "DoughVoice#_penv",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          17368,
          17373
        ],
        "filename": "dough.mjs",
        "lineno": 689,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117406",
          "name": "penv",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "penv",
      "longname": "DoughVoice#penv",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          17412,
          17420
        ],
        "filename": "dough.mjs",
        "lineno": 691,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117407",
          "name": "pattack",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "pattack",
      "longname": "DoughVoice#pattack",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          17459,
          17466
        ],
        "filename": "dough.mjs",
        "lineno": 693,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117408",
          "name": "pdecay",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "pdecay",
      "longname": "DoughVoice#pdecay",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          17505,
          17514
        ],
        "filename": "dough.mjs",
        "lineno": 695,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117409",
          "name": "psustain",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "psustain",
      "longname": "DoughVoice#psustain",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          17553,
          17562
        ],
        "filename": "dough.mjs",
        "lineno": 697,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117410",
          "name": "prelease",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "prelease",
      "longname": "DoughVoice#prelease",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          17602,
          17606
        ],
        "filename": "dough.mjs",
        "lineno": 700,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117411",
          "name": "vib",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "vib",
      "longname": "DoughVoice#vib",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          17654,
          17661
        ],
        "filename": "dough.mjs",
        "lineno": 704,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117413",
          "name": "vibmod",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "vibmod",
      "longname": "DoughVoice#vibmod",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {SineOsc | undefined} */",
      "meta": {
        "range": [
          17702,
          17706
        ],
        "filename": "dough.mjs",
        "lineno": 707,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117414",
          "name": "_fm",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "SineOsc",
          "undefined"
        ]
      },
      "name": "_fm",
      "longname": "DoughVoice#_fm",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          17745,
          17749
        ],
        "filename": "dough.mjs",
        "lineno": 709,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117415",
          "name": "fmh",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "fmh",
      "longname": "DoughVoice#fmh",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          17788,
          17792
        ],
        "filename": "dough.mjs",
        "lineno": 711,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117416",
          "name": "fmi",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "fmi",
      "longname": "DoughVoice#fmi",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {ADSR | undefined} */",
      "meta": {
        "range": [
          17830,
          17837
        ],
        "filename": "dough.mjs",
        "lineno": 714,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117417",
          "name": "_fmenv",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "ADSR",
          "undefined"
        ]
      },
      "name": "_fmenv",
      "longname": "DoughVoice#_fmenv",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          17876,
          17885
        ],
        "filename": "dough.mjs",
        "lineno": 716,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117418",
          "name": "fmattack",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "fmattack",
      "longname": "DoughVoice#fmattack",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          17924,
          17932
        ],
        "filename": "dough.mjs",
        "lineno": 718,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117419",
          "name": "fmdecay",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "fmdecay",
      "longname": "DoughVoice#fmdecay",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          17971,
          17981
        ],
        "filename": "dough.mjs",
        "lineno": 720,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117420",
          "name": "fmsustain",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "fmsustain",
      "longname": "DoughVoice#fmsustain",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          18020,
          18030
        ],
        "filename": "dough.mjs",
        "lineno": 722,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117421",
          "name": "fmrelease",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "fmrelease",
      "longname": "DoughVoice#fmrelease",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {ADSR | undefined} */",
      "meta": {
        "range": [
          18068,
          18075
        ],
        "filename": "dough.mjs",
        "lineno": 725,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117422",
          "name": "_lpenv",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "ADSR",
          "undefined"
        ]
      },
      "name": "_lpenv",
      "longname": "DoughVoice#_lpenv",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          18123,
          18132
        ],
        "filename": "dough.mjs",
        "lineno": 728,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117424",
          "name": "lpattack",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "lpattack",
      "longname": "DoughVoice#lpattack",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          18171,
          18179
        ],
        "filename": "dough.mjs",
        "lineno": 730,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117425",
          "name": "lpdecay",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "lpdecay",
      "longname": "DoughVoice#lpdecay",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          18218,
          18228
        ],
        "filename": "dough.mjs",
        "lineno": 732,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117426",
          "name": "lpsustain",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "lpsustain",
      "longname": "DoughVoice#lpsustain",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          18267,
          18277
        ],
        "filename": "dough.mjs",
        "lineno": 734,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117427",
          "name": "lprelease",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "lprelease",
      "longname": "DoughVoice#lprelease",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {ADSR | undefined} */",
      "meta": {
        "range": [
          18315,
          18322
        ],
        "filename": "dough.mjs",
        "lineno": 737,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117428",
          "name": "_hpenv",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "ADSR",
          "undefined"
        ]
      },
      "name": "_hpenv",
      "longname": "DoughVoice#_hpenv",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          18361,
          18367
        ],
        "filename": "dough.mjs",
        "lineno": 739,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117429",
          "name": "hpenv",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "hpenv",
      "longname": "DoughVoice#hpenv",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          18406,
          18415
        ],
        "filename": "dough.mjs",
        "lineno": 741,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117430",
          "name": "hpattack",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "hpattack",
      "longname": "DoughVoice#hpattack",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          18454,
          18462
        ],
        "filename": "dough.mjs",
        "lineno": 743,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117431",
          "name": "hpdecay",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "hpdecay",
      "longname": "DoughVoice#hpdecay",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          18501,
          18511
        ],
        "filename": "dough.mjs",
        "lineno": 745,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117432",
          "name": "hpsustain",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "hpsustain",
      "longname": "DoughVoice#hpsustain",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          18550,
          18560
        ],
        "filename": "dough.mjs",
        "lineno": 747,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117433",
          "name": "hprelease",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "hprelease",
      "longname": "DoughVoice#hprelease",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {ADSR | undefined} */",
      "meta": {
        "range": [
          18598,
          18605
        ],
        "filename": "dough.mjs",
        "lineno": 750,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117434",
          "name": "_bpenv",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "ADSR",
          "undefined"
        ]
      },
      "name": "_bpenv",
      "longname": "DoughVoice#_bpenv",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          18644,
          18650
        ],
        "filename": "dough.mjs",
        "lineno": 752,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117435",
          "name": "bpenv",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "bpenv",
      "longname": "DoughVoice#bpenv",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          18689,
          18698
        ],
        "filename": "dough.mjs",
        "lineno": 754,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117436",
          "name": "bpattack",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "bpattack",
      "longname": "DoughVoice#bpattack",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          18737,
          18745
        ],
        "filename": "dough.mjs",
        "lineno": 756,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117437",
          "name": "bpdecay",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "bpdecay",
      "longname": "DoughVoice#bpdecay",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          18784,
          18794
        ],
        "filename": "dough.mjs",
        "lineno": 758,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117438",
          "name": "bpsustain",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "bpsustain",
      "longname": "DoughVoice#bpsustain",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          18833,
          18843
        ],
        "filename": "dough.mjs",
        "lineno": 760,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117439",
          "name": "bprelease",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "bprelease",
      "longname": "DoughVoice#bprelease",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          18883,
          18890
        ],
        "filename": "dough.mjs",
        "lineno": 763,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117440",
          "name": "cutoff",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "cutoff",
      "longname": "DoughVoice#cutoff",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          18929,
          18937
        ],
        "filename": "dough.mjs",
        "lineno": 765,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117441",
          "name": "hcutoff",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "hcutoff",
      "longname": "DoughVoice#hcutoff",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          18976,
          18982
        ],
        "filename": "dough.mjs",
        "lineno": 767,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117442",
          "name": "bandf",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "bandf",
      "longname": "DoughVoice#bandf",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          19021,
          19028
        ],
        "filename": "dough.mjs",
        "lineno": 769,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117443",
          "name": "coarse",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "coarse",
      "longname": "DoughVoice#coarse",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          19067,
          19073
        ],
        "filename": "dough.mjs",
        "lineno": 771,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117444",
          "name": "crush",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "crush",
      "longname": "DoughVoice#crush",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number | undefined} */",
      "meta": {
        "range": [
          19112,
          19120
        ],
        "filename": "dough.mjs",
        "lineno": 773,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117445",
          "name": "distort",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number",
          "undefined"
        ]
      },
      "name": "distort",
      "longname": "DoughVoice#distort",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {number} */",
      "meta": {
        "range": [
          19148,
          19153
        ],
        "filename": "dough.mjs",
        "lineno": 776,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117446",
          "name": "freq",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "freq",
      "longname": "DoughVoice#freq",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {string | undefined} */",
      "meta": {
        "range": [
          19192,
          19197
        ],
        "filename": "dough.mjs",
        "lineno": 778,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117447",
          "name": "note",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "string",
          "undefined"
        ]
      },
      "name": "note",
      "longname": "DoughVoice#note",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {TwoPoleFilter[] | null | undefined} */",
      "meta": {
        "range": [
          19253,
          19258
        ],
        "filename": "dough.mjs",
        "lineno": 781,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117448",
          "name": "_lpf",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "Array.<TwoPoleFilter>",
          "null",
          "undefined"
        ]
      },
      "name": "_lpf",
      "longname": "DoughVoice#_lpf",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {TwoPoleFilter[] | null | undefined} */",
      "meta": {
        "range": [
          19313,
          19318
        ],
        "filename": "dough.mjs",
        "lineno": 783,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117449",
          "name": "_hpf",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "Array.<TwoPoleFilter>",
          "null",
          "undefined"
        ]
      },
      "name": "_hpf",
      "longname": "DoughVoice#_hpf",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {TwoPoleFilter[] | null | undefined} */",
      "meta": {
        "range": [
          19373,
          19378
        ],
        "filename": "dough.mjs",
        "lineno": 785,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117450",
          "name": "_bpf",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "Array.<TwoPoleFilter>",
          "null",
          "undefined"
        ]
      },
      "name": "_bpf",
      "longname": "DoughVoice#_bpf",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {Chorus[] | null | undefined} */",
      "meta": {
        "range": [
          19426,
          19434
        ],
        "filename": "dough.mjs",
        "lineno": 787,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117451",
          "name": "_chorus",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "Array.<Chorus>",
          "null",
          "undefined"
        ]
      },
      "name": "_chorus",
      "longname": "DoughVoice#_chorus",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {Coarse[] | null | undefined} */",
      "meta": {
        "range": [
          19482,
          19490
        ],
        "filename": "dough.mjs",
        "lineno": 789,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117452",
          "name": "_coarse",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "Array.<Coarse>",
          "null",
          "undefined"
        ]
      },
      "name": "_coarse",
      "longname": "DoughVoice#_coarse",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {Crush[] | null | undefined} */",
      "meta": {
        "range": [
          19537,
          19544
        ],
        "filename": "dough.mjs",
        "lineno": 791,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117453",
          "name": "_crush",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "Array.<Crush>",
          "null",
          "undefined"
        ]
      },
      "name": "_crush",
      "longname": "DoughVoice#_crush",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/** @type {Distort[] | null | undefined} */",
      "meta": {
        "range": [
          19593,
          19602
        ],
        "filename": "dough.mjs",
        "lineno": 793,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117454",
          "name": "_distort",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "Array.<Distort>",
          "null",
          "undefined"
        ]
      },
      "name": "_distort",
      "longname": "DoughVoice#_distort",
      "kind": "member",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/**\n   * @param {DoughVoice} value\n   */",
      "meta": {
        "range": [
          19649,
          24138
        ],
        "filename": "dough.mjs",
        "lineno": 798,
        "columnno": 2,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough",
        "code": {
          "id": "astnode100117455",
          "name": "exports.DoughVoice",
          "type": "MethodDefinition",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "": null
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "DoughVoice"
            ]
          },
          "name": "value"
        }
      ],
      "name": "DoughVoice",
      "longname": "DoughVoice#DoughVoice",
      "kind": "class",
      "memberof": "DoughVoice",
      "scope": "instance"
    },
    {
      "comment": "/**\n * Change the pitch of each value by the given amount. Expects numbers or note strings as values.\n * The amount can be given as a number of semitones or as a string in interval short notation.\n * If you don't care about enharmonic correctness, just use numbers. Otherwise, pass the interval of\n * the form: ST where S is the degree number and T the type of interval with\n *\n * - M = major\n * - m = minor\n * - P = perfect\n * - A = augmented\n * - d = diminished\n *\n * Examples intervals:\n *\n * - 1P = unison\n * - 3M = major third\n * - 3m = minor third\n * - 4P = perfect fourth\n * - 4A = augmented fourth\n * - 5P = perfect fifth\n * - 5d = diminished fifth\n *\n * @param {string | number} amount Either number of semitones or interval string.\n * @returns Pattern\n * @memberof Pattern\n * @name transpose\n * @synonyms trans\n * @example\n * \"c2 c3\".fast(2).transpose(\"<0 -2 5 3>\".slow(2)).note()\n * @example\n * \"c2 c3\".fast(2).transpose(\"<1P -2M 4P 3m>\".slow(2)).note()\n */",
      "meta": {
        "filename": "tonal.mjs",
        "lineno": 73,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/tonal",
        "code": {}
      },
      "description": "<p>Change the pitch of each value by the given amount. Expects numbers or note strings as values.\nThe amount can be given as a number of semitones or as a string in interval short notation.\nIf you don't care about enharmonic correctness, just use numbers. Otherwise, pass the interval of\nthe form: ST where S is the degree number and T the type of interval with</p>\n<ul>\n<li>M = major</li>\n<li>m = minor</li>\n<li>P = perfect</li>\n<li>A = augmented</li>\n<li>d = diminished</li>\n</ul>\n<p>Examples intervals:</p>\n<ul>\n<li>1P = unison</li>\n<li>3M = major third</li>\n<li>3m = minor third</li>\n<li>4P = perfect fourth</li>\n<li>4A = augmented fourth</li>\n<li>5P = perfect fifth</li>\n<li>5d = diminished fifth</li>\n</ul>",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "number"
            ]
          },
          "description": "<p>Either number of semitones or interval string.</p>",
          "name": "amount"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "memberof": "Pattern",
      "name": "transpose",
      "synonyms_text": "trans",
      "synonyms": [
        "trans"
      ],
      "examples": [
        "\"c2 c3\".fast(2).transpose(\"<0 -2 5 3>\".slow(2)).note()",
        "\"c2 c3\".fast(2).transpose(\"<1P -2M 4P 3m>\".slow(2)).note()"
      ],
      "scope": "static",
      "longname": "Pattern.transpose",
      "kind": "member"
    },
    {
      "comment": "/**\n * Transposes notes inside the scale by the number of steps.\n * Expected to be called on a Pattern which already has a {@link Pattern#scale}\n *\n * @memberof Pattern\n * @name scaleTranspose\n * @param {offset} offset number of steps inside the scale\n * @returns Pattern\n * @synonyms scaleTrans, strans\n * @example\n * \"-8 [2,4,6]\"\n * .scale('C4 bebop major')\n * .scaleTranspose(\"<0 -1 -2 -3 -4 -5 -6 -4>\")\n * .note()\n */",
      "meta": {
        "filename": "tonal.mjs",
        "lineno": 143,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/tonal",
        "code": {}
      },
      "description": "<p>Transposes notes inside the scale by the number of steps.\nExpected to be called on a Pattern which already has a {@link Pattern#scale}</p>",
      "memberof": "Pattern",
      "name": "scaleTranspose",
      "params": [
        {
          "type": {
            "names": [
              "offset"
            ]
          },
          "description": "<p>number of steps inside the scale</p>",
          "name": "offset"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "synonyms_text": "scaleTrans, strans",
      "synonyms": [
        "scaleTrans",
        "strans"
      ],
      "examples": [
        "\"-8 [2,4,6]\"\n.scale('C4 bebop major')\n.scaleTranspose(\"<0 -1 -2 -3 -4 -5 -6 -4>\")\n.note()"
      ],
      "scope": "static",
      "longname": "Pattern.scaleTranspose",
      "kind": "member"
    },
    {
      "comment": "/**\n * Turns numbers into notes in the scale (zero indexed) or quantizes notes to a scale.\n *\n * When describing notes via numbers, note that negative numbers can be used to wrap backwards\n * in the scale as well as sharps or flats (but not both) to produce notes outside of the scale.\n *\n * Also sets scale for other scale operations, like {@link Pattern#scaleTranspose}.\n *\n * A scale consists of a root note (e.g. `c4`, `c`, `f#`, `bb4`) followed by semicolon (':') and then a [scale type](https://github.com/tonaljs/tonal/blob/main/packages/scale-type/data.ts).\n *\n * The root note defaults to octave 3, if no octave number is given.\n *\n * @name scale\n * @param {string} scale Name of scale\n * @returns Pattern\n * @example\n * n(\"0 2 4 6 4 2\").scale(\"C:major\")\n * @example\n * n(\"[0,7] 4 [2,7] 4\")\n * .scale(\"C:<major minor>/2\")\n * .s(\"piano\")\n * @example\n * n(rand.range(0,12).segment(8))\n * .scale(\"C:ritusen\")\n * .s(\"piano\")\n * @example\n * n(\"<[0,7b] [-4# -4] [-2,7##] 4 [0,7] [-4# -4b] [-2,7###] 4b>*4\")\n * .scale(\"C:<major minor>/2\")\n * .s(\"piano\")\n * @example\n * note(\"C1*16\").transpose(irand(36)).scale('Cb2 major').scaleTranspose(3)\n */",
      "meta": {
        "filename": "tonal.mjs",
        "lineno": 225,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/tonal",
        "code": {}
      },
      "description": "<p>Turns numbers into notes in the scale (zero indexed) or quantizes notes to a scale.</p>\n<p>When describing notes via numbers, note that negative numbers can be used to wrap backwards\nin the scale as well as sharps or flats (but not both) to produce notes outside of the scale.</p>\n<p>Also sets scale for other scale operations, like {@link Pattern#scaleTranspose}.</p>\n<p>A scale consists of a root note (e.g. <code>c4</code>, <code>c</code>, <code>f#</code>, <code>bb4</code>) followed by semicolon (':') and then a <a href=\"https://github.com/tonaljs/tonal/blob/main/packages/scale-type/data.ts\">scale type</a>.</p>\n<p>The root note defaults to octave 3, if no octave number is given.</p>",
      "name": "scale",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>Name of scale</p>",
          "name": "scale"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "n(\"0 2 4 6 4 2\").scale(\"C:major\")",
        "n(\"[0,7] 4 [2,7] 4\")\n.scale(\"C:<major minor>/2\")\n.s(\"piano\")",
        "n(rand.range(0,12).segment(8))\n.scale(\"C:ritusen\")\n.s(\"piano\")",
        "n(\"<[0,7b] [-4# -4] [-2,7##] 4 [0,7] [-4# -4b] [-2,7###] 4b>*4\")\n.scale(\"C:<major minor>/2\")\n.s(\"piano\")",
        "note(\"C1*16\").transpose(irand(36)).scale('Cb2 major').scaleTranspose(3)"
      ],
      "longname": "scale",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Adds a new custom voicing dictionary.\n *\n * @name addVoicings\n * @memberof Pattern\n * @param {string} name identifier for the voicing dictionary\n * @param {Object} dictionary maps chord symbol to possible voicings\n * @param {Array} range min, max note\n * @returns Pattern\n * @example\n * addVoicings('cookie', {\n *   7: ['3M 7m 9M 12P 15P', '7m 10M 13M 16M 19P'],\n *   '^7': ['3M 6M 9M 12P 14M', '7M 10M 13M 16M 19P'],\n *   m7: ['8P 11P 14m 17m 19P', '5P 8P 11P 14m 17m'],\n *   m7b5: ['3m 5d 8P 11P 14m', '5d 8P 11P 14m 17m'],\n *   o7: ['3m 6M 9M 11A 15P'],\n *   '7alt': ['3M 7m 10m 13m 15P'],\n *   '7#11': ['7m 10m 13m 15P 17m'],\n * }, ['C3', 'C6'])\n * \"<C^7 A7 Dm7 G7>\".voicings('cookie').note()\n */",
      "meta": {
        "filename": "voicings.mjs",
        "lineno": 89,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/tonal",
        "code": {}
      },
      "description": "<p>Adds a new custom voicing dictionary.</p>",
      "name": "addVoicings",
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>identifier for the voicing dictionary</p>",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "<p>maps chord symbol to possible voicings</p>",
          "name": "dictionary"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "<p>min, max note</p>",
          "name": "range"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "addVoicings('cookie', {\n  7: ['3M 7m 9M 12P 15P', '7m 10M 13M 16M 19P'],\n  '^7': ['3M 6M 9M 12P 14M', '7M 10M 13M 16M 19P'],\n  m7: ['8P 11P 14m 17m 19P', '5P 8P 11P 14m 17m'],\n  m7b5: ['3m 5d 8P 11P 14m', '5d 8P 11P 14m 17m'],\n  o7: ['3m 6M 9M 11A 15P'],\n  '7alt': ['3M 7m 10m 13m 15P'],\n  '7#11': ['7m 10m 13m 15P 17m'],\n}, ['C3', 'C6'])\n\"<C^7 A7 Dm7 G7>\".voicings('cookie').note()"
      ],
      "scope": "static",
      "longname": "Pattern.addVoicings",
      "kind": "member"
    },
    {
      "comment": "/**\n * DEPRECATED: still works, but it is recommended you use .voicing instead (without s).\n * Turns chord symbols into voicings, using the smoothest voice leading possible.\n * Uses [chord-voicings package](https://github.com/felixroos/chord-voicings#chord-voicings).\n *\n * @name voicings\n * @memberof Pattern\n * @param {string} dictionary which voicing dictionary to use.\n * @returns Pattern\n * @example\n * stack(\"<C^7 A7 Dm7 G7>\".voicings('lefthand'), \"<C3 A2 D3 G2>\").note()\n */",
      "meta": {
        "filename": "voicings.mjs",
        "lineno": 130,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/tonal",
        "code": {}
      },
      "description": "<p>DEPRECATED: still works, but it is recommended you use .voicing instead (without s).\nTurns chord symbols into voicings, using the smoothest voice leading possible.\nUses <a href=\"https://github.com/felixroos/chord-voicings#chord-voicings\">chord-voicings package</a>.</p>",
      "name": "voicings",
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>which voicing dictionary to use.</p>",
          "name": "dictionary"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "stack(\"<C^7 A7 Dm7 G7>\".voicings('lefthand'), \"<C3 A2 D3 G2>\").note()"
      ],
      "scope": "static",
      "longname": "Pattern.voicings",
      "kind": "member"
    },
    {
      "comment": "/**\n * Maps the chords of the incoming pattern to root notes in the given octave.\n *\n * @name rootNotes\n * @memberof Pattern\n * @param {octave} octave octave to use\n * @returns Pattern\n * @example\n * \"<C^7 A7 Dm7 G7>\".rootNotes(2).note()\n */",
      "meta": {
        "filename": "voicings.mjs",
        "lineno": 156,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/tonal",
        "code": {}
      },
      "description": "<p>Maps the chords of the incoming pattern to root notes in the given octave.</p>",
      "name": "rootNotes",
      "memberof": "Pattern",
      "params": [
        {
          "type": {
            "names": [
              "octave"
            ]
          },
          "description": "<p>octave to use</p>",
          "name": "octave"
        }
      ],
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "\"<C^7 A7 Dm7 G7>\".rootNotes(2).note()"
      ],
      "scope": "static",
      "longname": "Pattern.rootNotes",
      "kind": "member"
    },
    {
      "comment": "/**\n * Turns chord symbols into voicings. You can use the following control params:\n *\n * - `chord`: Note, followed by chord symbol, e.g. C Am G7 Bb^7\n * - `dict`: voicing dictionary to use, falls back to default dictionary\n * - `anchor`: the note that is used to align the chord\n * - `mode`: how the voicing is aligned to the anchor\n *   - `below`: top note <= anchor\n *   - `duck`: top note <= anchor, anchor excluded\n *   - `above`: bottom note >= anchor\n * - `offset`: whole number that shifts the voicing up or down to the next voicing\n * - `n`: if set, the voicing is played like a scale. Overshooting numbers will be octaved\n *\n * All of the above controls are optional, except `chord`.\n * If you pass a pattern of strings to voicing, they will be interpreted as chords.\n *\n * @name voicing\n * @returns Pattern\n * @example\n * n(\"0 1 2 3\").chord(\"<C Am F G>\").voicing()\n */",
      "meta": {
        "filename": "voicings.mjs",
        "lineno": 175,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/tonal",
        "code": {}
      },
      "description": "<p>Turns chord symbols into voicings. You can use the following control params:</p>\n<ul>\n<li><code>chord</code>: Note, followed by chord symbol, e.g. C Am G7 Bb^7</li>\n<li><code>dict</code>: voicing dictionary to use, falls back to default dictionary</li>\n<li><code>anchor</code>: the note that is used to align the chord</li>\n<li><code>mode</code>: how the voicing is aligned to the anchor\n<ul>\n<li><code>below</code>: top note &lt;= anchor</li>\n<li><code>duck</code>: top note &lt;= anchor, anchor excluded</li>\n<li><code>above</code>: bottom note &gt;= anchor</li>\n</ul>\n</li>\n<li><code>offset</code>: whole number that shifts the voicing up or down to the next voicing</li>\n<li><code>n</code>: if set, the voicing is played like a scale. Overshooting numbers will be octaved</li>\n</ul>\n<p>All of the above controls are optional, except <code>chord</code>.\nIf you pass a pattern of strings to voicing, they will be interpreted as chords.</p>",
      "name": "voicing",
      "returns": [
        {
          "description": "<p>Pattern</p>"
        }
      ],
      "examples": [
        "n(\"0 1 2 3\").chord(\"<C Am F G>\").voicing()"
      ],
      "longname": "voicing",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Renders an oscilloscope for the frequency domain of the audio signal.\n * @name fscope\n * @param {string} color line color as hex or color name. defaults to white.\n * @param {number} scale scales the y-axis. Defaults to 0.25\n * @param {number} pos y-position relative to screen height. 0 = top, 1 = bottom of screen\n * @param {number} lean y-axis alignment where 0 = top and 1 = bottom\n * @param {number} min min value\n * @param {number} max max value\n * @example\n * s(\"sawtooth\").fscope()\n */",
      "meta": {
        "filename": "scope.mjs",
        "lineno": 98,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/webaudio",
        "code": {}
      },
      "description": "<p>Renders an oscilloscope for the frequency domain of the audio signal.</p>",
      "name": "fscope",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>line color as hex or color name. defaults to white.</p>",
          "name": "color"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>scales the y-axis. Defaults to 0.25</p>",
          "name": "scale"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>y-position relative to screen height. 0 = top, 1 = bottom of screen</p>",
          "name": "pos"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>y-axis alignment where 0 = top and 1 = bottom</p>",
          "name": "lean"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>min value</p>",
          "name": "min"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>max value</p>",
          "name": "max"
        }
      ],
      "examples": [
        "s(\"sawtooth\").fscope()"
      ],
      "longname": "fscope",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Renders an oscilloscope for the time domain of the audio signal.\n * @name scope\n * @synonyms tscope\n * @param {object} config optional config with options:\n * @param {boolean} align if 1, the scope will be aligned to the first zero crossing. defaults to 1\n * @param {string} color line color as hex or color name. defaults to white.\n * @param {number} thickness line thickness. defaults to 3\n * @param {number} scale scales the y-axis. Defaults to 0.25\n * @param {number} pos y-position relative to screen height. 0 = top, 1 = bottom of screen\n * @param {number} trigger amplitude value that is used to align the scope. defaults to 0.\n * @example\n * s(\"sawtooth\")._scope()\n */",
      "meta": {
        "filename": "scope.mjs",
        "lineno": 121,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/webaudio",
        "code": {}
      },
      "description": "<p>Renders an oscilloscope for the time domain of the audio signal.</p>",
      "name": "scope",
      "synonyms_text": "tscope",
      "synonyms": [
        "tscope"
      ],
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "<p>optional config with options:</p>",
          "name": "config"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "<p>if 1, the scope will be aligned to the first zero crossing. defaults to 1</p>",
          "name": "align"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "<p>line color as hex or color name. defaults to white.</p>",
          "name": "color"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>line thickness. defaults to 3</p>",
          "name": "thickness"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>scales the y-axis. Defaults to 0.25</p>",
          "name": "scale"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>y-position relative to screen height. 0 = top, 1 = bottom of screen</p>",
          "name": "pos"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "<p>amplitude value that is used to align the scope. defaults to 0.</p>",
          "name": "trigger"
        }
      ],
      "examples": [
        "s(\"sawtooth\")._scope()"
      ],
      "longname": "scope",
      "kind": "member",
      "scope": "global"
    },
    {
      "comment": "/**\n * Renders a spectrum analyzer for the incoming audio signal.\n * @name spectrum\n * @param {object} config optional config with options:\n * @param {integer} thickness line thickness in px (default 3)\n * @param {integer} speed scroll speed (default 1)\n * @param {integer} min min db (default -80)\n * @param {integer} max max db (default 0)\n * @example\n * n(\"<0 4 <2 3> 1>*3\")\n * .off(1/8, add(n(5)))\n * .off(1/5, add(n(7)))\n * .scale(\"d3:minor:pentatonic\")\n * .s('sine')\n * .dec(.3).room(.5)\n * ._spectrum()\n */",
      "meta": {
        "filename": "spectrum.mjs",
        "lineno": 5,
        "columnno": 0,
        "path": "/home/calvinw/develop/strudel-docs-local/strudel/packages/webaudio",
        "code": {}
      },
      "description": "<p>Renders a spectrum analyzer for the incoming audio signal.</p>",
      "name": "spectrum",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "<p>optional config with options:</p>",
          "name": "config"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "description": "<p>line thickness in px (default 3)</p>",
          "name": "thickness"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "description": "<p>scroll speed (default 1)</p>",
          "name": "speed"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "description": "<p>min db (default -80)</p>",
          "name": "min"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "description": "<p>max db (default 0)</p>",
          "name": "max"
        }
      ],
      "examples": [
        "n(\"<0 4 <2 3> 1>*3\")\n.off(1/8, add(n(5)))\n.off(1/5, add(n(7)))\n.scale(\"d3:minor:pentatonic\")\n.s('sine')\n.dec(.3).room(.5)\n._spectrum()"
      ],
      "longname": "spectrum",
      "kind": "member",
      "scope": "global"
    },
    {
      "kind": "package",
      "longname": "package:undefined",
      "files": [
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/autocomplete.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/basicSetup.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/codemirror.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/flash.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/highlight.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/html.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/keybindings.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/slider.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/CutiePi.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/algoboy.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/androidstudio.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/archBtw.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/atomone.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/aura.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/bbedit.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/blackscreen.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/bluescreen.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/bluescreenlight.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/darcula.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/dracula.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/duotoneDark.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/duotoneLight.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/eclipse.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/fruitDaw.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/githubDark.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/githubLight.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/green-text.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/gruvboxDark.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/gruvboxLight.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/materialDark.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/materialLight.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/monokai.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/noctisLilac.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/nord.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/red-text.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/solarizedDark.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/solarizedLight.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/sonic-pink.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/strudel-theme.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/sublime.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/teletext.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/terminal.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/theme-helper.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/tokioNightStorm.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/tokyoNight.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/tokyoNightDay.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/vscodeDark.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/vscodeLight.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/whitescreen.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes/xcodeLight.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/themes.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/tooltip.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/codemirror/widget.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/bench/pattern.bench.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/clockworker.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/controls.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/cyclist.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/drawLine.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/euclid.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/evaluate.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/fraction.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/hap.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/logger.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/neocyclist.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/pattern.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/pick.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/repl.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/signal.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/speak.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/state.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/test/controls.test.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/test/drawLine.test.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/test/euclid.test.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/test/fraction.test.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/test/pattern.test.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/test/solmization.test.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/test/util.test.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/test/value.test.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/time.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/timespan.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/ui.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/util.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/value.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/core/zyklus.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/csound/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/csound/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/desktopbridge/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/desktopbridge/loggerbridge.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/desktopbridge/midibridge.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/desktopbridge/oscbridge.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/desktopbridge/utils.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/draw/animate.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/draw/color.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/draw/draw.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/draw/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/draw/pianoroll.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/draw/pitchwheel.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/draw/spiral.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/draw/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/embed/embed.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/gamepad/gamepad.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/gamepad/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/gamepad/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/hs2js/src/hs2js.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/hs2js/src/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/hs2js/src/parser.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/hs2js/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/hydra/hydra.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/hydra/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/midi/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/midi/midi.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/midi/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/mini/bench/mini.bench.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/mini/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/mini/krill-parser.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/mini/mini.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/mini/test/mini.test.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/mini/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/mondo/mondo.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/mondo/test/mondo.test.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/mondo/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/mondough/mondough.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/mondough/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/motion/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/motion/motion.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/motion/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/mqtt/mqtt.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/mqtt/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/osc/osc.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/osc/server.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/osc/superdirtoutput.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/osc/tidal-sniffer.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/osc/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/reference/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/reference/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/repl/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/repl/prebake.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/repl/repl-component.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/repl/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/sampler/sample-server.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/serial/serial.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/serial/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/soundfonts/convert.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/soundfonts/fontloader.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/soundfonts/gm.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/soundfonts/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/soundfonts/list.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/soundfonts/sfumato.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/soundfonts/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/dspworklet.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/feedbackdelay.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/fft.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/helpers.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/logger.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/noise.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/ola-processor.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/reverb.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/reverbGen.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/sampler.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/superdough.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/synth.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/util.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/vowel.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/worklets.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/zzfx.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/superdough/zzfx_fork.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough/dough-export.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough/dough-worklet.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough/dough.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/supradough/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/tidal/tidal.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/tonal/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/tonal/ireal.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/tonal/test/tonal.test.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/tonal/test/tonleiter.test.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/tonal/tonal.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/tonal/tonleiter.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/tonal/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/tonal/voicings.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/transpiler/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/transpiler/test/transpiler.test.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/transpiler/transpiler.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/transpiler/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/vite-plugin-bundle-audioworklet/vite-plugin-bundle-audioworklet.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/web/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/web/web.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/webaudio/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/webaudio/scope.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/webaudio/spectrum.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/webaudio/supradough.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/webaudio/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/webaudio/webaudio.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/xen/index.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/xen/test/xen.test.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/xen/tune.mjs",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/xen/tunejs.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/xen/vite.config.js",
        "/home/calvinw/develop/strudel-docs-local/strudel/packages/xen/xen.mjs"
      ]
    }
  ]
}